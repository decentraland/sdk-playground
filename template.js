/*! "node_modules/@dcl/amd/dist/amd.js" 1fcc2d76805964317daad52b00a258748d14ac85cfd45892dfdb47e8951b1ef1 */ eval("\"use strict\";\n// A naive attempt at getting the global `this`. Donâ€™t use `this`!\nconst getGlobalThis = function () {\n    // @ts-ignore\n    if (typeof globalThis !== 'undefined')\n        return globalThis;\n    // @ts-ignore\n    if (typeof self !== 'undefined')\n        return self;\n    // @ts-ignore\n    if (typeof window !== 'undefined')\n        return window;\n    // Note: this might still return the wrong result!\n    // @ts-ignore\n    if (typeof this !== 'undefined')\n        return this;\n    throw new Error('Unable to locate global `this`');\n};\nconst globalObject = getGlobalThis();\nvar loader;\n(function (loader) {\n    'use strict';\n    const MODULE_LOADING = 1;\n    const MODULE_READY = 2;\n    let unnamedModules = 0;\n    const anonymousQueue = [];\n    const cycles = [];\n    const settings = {\n        baseUrl: ''\n    };\n    const registeredModules = {};\n    function config(config) {\n        if (typeof config === 'object') {\n            for (const x in config) {\n                if (config.hasOwnProperty(x)) {\n                    ;\n                    settings[x] = config[x];\n                }\n            }\n        }\n    }\n    loader.config = config;\n    function define(first, second, third) {\n        let moduleToLoad = null;\n        let factory = {};\n        let dependencies = null;\n        if (typeof first === 'function') {\n            factory = first;\n        }\n        else if (typeof first === 'string') {\n            moduleToLoad = first;\n            if (typeof second === 'function') {\n                factory = second;\n            }\n            else if (second instanceof Array) {\n                dependencies = second;\n                factory = third;\n            }\n        }\n        else if (first instanceof Array) {\n            dependencies = first;\n            if (typeof second === 'function') {\n                factory = second;\n            }\n        }\n        dependencies = dependencies || ['require', 'exports', 'module'];\n        if (moduleToLoad === null) {\n            moduleToLoad = `unnamed-module-${unnamedModules++}`;\n        }\n        moduleToLoad = normalizeModuleId(moduleToLoad);\n        function ready(deps) {\n            const module = registeredModules[moduleToLoad];\n            if (!module)\n                throw new Error('Could not access registered module ' + moduleToLoad);\n            let exports = module.exports;\n            exports =\n                typeof factory === 'function'\n                    ? factory.apply(globalObject, deps) || exports\n                    : factory;\n            module.exports = exports;\n            moduleReady(moduleToLoad);\n        }\n        dependencies = (dependencies || []).map((dep) => resolve(moduleToLoad, dep));\n        if (!registeredModules[moduleToLoad]) {\n            registeredModules[moduleToLoad] = {\n                name: moduleToLoad,\n                parent: null,\n                dclamd: MODULE_LOADING,\n                dependencies,\n                handlers: [],\n                exports: {},\n                dependants: new Set()\n            };\n        }\n        registeredModules[moduleToLoad].dependencies = dependencies;\n        require(dependencies, ready, (err) => {\n            if (typeof onerror === 'function') {\n                onerror(err);\n            }\n            else {\n                throw err;\n            }\n        }, moduleToLoad);\n    }\n    loader.define = define;\n    (function (define) {\n        define.amd = {};\n        define.modules = registeredModules;\n    })(define = loader.define || (loader.define = {}));\n    function moduleReady(moduleName) {\n        const module = registeredModules[moduleName];\n        if (!module)\n            throw new Error('Could not access registered module ' + moduleName);\n        module.dclamd = MODULE_READY;\n        const handlers = module.handlers;\n        if (handlers && handlers.length) {\n            for (let x = 0; x < handlers.length; x++) {\n                handlers[x](registeredModules[moduleName]);\n            }\n        }\n    }\n    /**\n     * Walks (recursively) the dependencies of 'from' in search of 'to'.\n     * Returns cycle as array.\n     */\n    function getCyclePath(fromModule, toModule, depth) {\n        if (!registeredModules[fromModule]) {\n            return null;\n        }\n        if (fromModule === toModule || depth === 50)\n            return [fromModule];\n        const dependencies = registeredModules[fromModule].dependencies;\n        for (let i = 0, len = dependencies.length; i < len; i++) {\n            const path = getCyclePath(dependencies[i], toModule, depth + 1);\n            if (path !== null) {\n                path.push(fromModule);\n                return path;\n            }\n        }\n        return null;\n    }\n    /**\n     * Walks (recursively) the dependencies of 'from' in search of 'to'.\n     * Returns true if there is such a path or false otherwise.\n     * @param from Module id to start at\n     * @param to Module id to look for\n     */\n    function hasDependencyPath(fromId, toId) {\n        const from = registeredModules[fromId];\n        if (!from) {\n            return false;\n        }\n        const inQueue = {};\n        for (const i in registeredModules) {\n            inQueue[i] = false;\n        }\n        const queue = [];\n        // Insert 'from' in queue\n        queue.push(from);\n        inQueue[fromId] = true;\n        while (queue.length > 0) {\n            // Pop first inserted element of queue\n            const element = queue.shift();\n            const dependencies = element.dependencies;\n            if (dependencies) {\n                // Walk the element's dependencies\n                for (let i = 0, len = dependencies.length; i < len; i++) {\n                    const dependency = dependencies[i];\n                    if (dependency === toId) {\n                        // There is a path to 'to'\n                        return true;\n                    }\n                    const dependencyModule = registeredModules[dependency];\n                    if (dependencyModule && !inQueue[dependency]) {\n                        // Insert 'dependency' in queue\n                        inQueue[dependency] = true;\n                        queue.push(dependencyModule);\n                    }\n                }\n            }\n        }\n        // There is no path to 'to'\n        return false;\n    }\n    function require(dependencies, callback, errorCallback, parentModule) {\n        const dependenciesResults = new Array(dependencies.length).fill(null);\n        let loadedCount = 0;\n        let hasLoaded = false;\n        if (typeof dependencies === 'string') {\n            if (registeredModules[dependencies]) {\n                if (registeredModules[dependencies].dclamd === MODULE_LOADING) {\n                    throw new Error(`Trying to load ${dependencies} from ${parentModule}. The first module is still loading.`);\n                }\n                return registeredModules[dependencies];\n            }\n            throw new Error(dependencies +\n                ' has not been defined. Please include it as a dependency in ' +\n                parentModule +\n                \"'s define()\");\n        }\n        const depsLength = dependencies.length;\n        for (let index = 0; index < depsLength; index++) {\n            switch (dependencies[index]) {\n                case 'require':\n                    const _require = function (new_module, callback, errorCallback) {\n                        return require(new_module, callback, errorCallback, parentModule);\n                    };\n                    _require.toUrl = function (module) {\n                        return toUrl(module, parentModule);\n                    };\n                    dependenciesResults[index] = _require;\n                    loadedCount++;\n                    break;\n                case 'exports':\n                    if (!registeredModules[parentModule]) {\n                        throw new Error('Parent module ' + parentModule + ' not registered yet');\n                    }\n                    dependenciesResults[index] = registeredModules[parentModule].exports;\n                    loadedCount++;\n                    break;\n                case 'module':\n                    dependenciesResults[index] = {\n                        id: parentModule,\n                        uri: toUrl(parentModule)\n                    };\n                    loadedCount++;\n                    break;\n                default: {\n                    // If we have a circular dependency, then we resolve the module even if it hasn't loaded yet\n                    const dependency = dependencies[index];\n                    const hasCycles = hasDependencyPath(dependency, parentModule);\n                    const handleLoadedModule = () => {\n                        dependenciesResults[index] = registeredModules[dependency].exports;\n                        loadedCount++;\n                        if (loadedCount === depsLength && callback) {\n                            hasLoaded = true;\n                            callback(dependenciesResults);\n                        }\n                    };\n                    if (hasCycles) {\n                        const cyclePath = getCyclePath(dependency, parentModule, 0);\n                        if (cyclePath) {\n                            cyclePath.reverse();\n                            cyclePath.push(dependency);\n                            cycles.push(cyclePath);\n                        }\n                        load(dependency, () => { }, errorCallback, parentModule);\n                        handleLoadedModule();\n                    }\n                    else {\n                        load(dependency, handleLoadedModule, errorCallback, parentModule);\n                    }\n                    break;\n                }\n            }\n        }\n        if (!hasLoaded && loadedCount === depsLength && callback) {\n            callback(dependenciesResults);\n        }\n    }\n    loader.require = require;\n    function createMethodHandler(rpcHandle, method) {\n        return function () {\n            return dcl.callRpc(rpcHandle, method.name, \n            // eslint-disable-next-line prefer-rest-params\n            anonymousQueue.slice.call(arguments, 0));\n        };\n    }\n    // returns: resolvedModuleName\n    function resolve(fromModule, toModule) {\n        return fromModule ? toUrl(toModule, fromModule) : toModule;\n    }\n    function load(moduleName, callback, errorCallback, parentModule) {\n        if (registeredModules[moduleName]) {\n            registeredModules[moduleName].dependants.add(parentModule);\n            if (registeredModules[moduleName].dclamd === MODULE_LOADING) {\n                callback && registeredModules[moduleName].handlers.push(callback);\n            }\n            else {\n                callback && callback(registeredModules[moduleName]);\n            }\n            return;\n        }\n        else {\n            registeredModules[moduleName] = {\n                name: moduleName,\n                parent: parentModule,\n                dclamd: MODULE_LOADING,\n                handlers: [callback],\n                dependencies: [],\n                dependants: new Set([parentModule]),\n                exports: {}\n            };\n        }\n        if (moduleName.indexOf('@') === 0) {\n            const exports = registeredModules[moduleName].exports;\n            if (typeof dcl.loadModule === 'function') {\n                dcl\n                    .loadModule(moduleName, exports)\n                    .then((descriptor) => {\n                    for (const i in descriptor.methods) {\n                        const method = descriptor.methods[i];\n                        exports[method.name] = createMethodHandler(descriptor.rpcHandle, method);\n                    }\n                    moduleReady(moduleName);\n                })\n                    .catch((e) => {\n                    errorCallback(e);\n                });\n            }\n            else {\n                throw new Error('Asynchronous modules will not work because loadModule function is not present');\n            }\n        }\n    }\n    if (typeof dcl !== 'undefined') {\n        dcl.onStart(() => {\n            const unknownModules = new Set();\n            const notLoadedModules = [];\n            for (const i in registeredModules) {\n                if (registeredModules[i]) {\n                    if (registeredModules[i].dclamd === MODULE_LOADING) {\n                        notLoadedModules.push(registeredModules[i]);\n                    }\n                    registeredModules[i].dependencies.forEach(($) => {\n                        if ($ === 'require' || $ === 'exports' || $ === 'module')\n                            return;\n                        if (!registeredModules[$])\n                            unknownModules.add($);\n                    });\n                }\n            }\n            const errorParts = [];\n            if (cycles.length) {\n                errorParts.push(`\\n> Cyclic dependencies: ${cycles\n                    .map(($) => '\\n  - ' + $.join(' -> '))\n                    .join('')}`);\n            }\n            if (unknownModules.size) {\n                errorParts.push(`\\n> Undeclared/unknown modules: ${Array.from(unknownModules)\n                    .map(($) => '\\n  - ' + $)\n                    .join('')}`);\n            }\n            if (notLoadedModules.length) {\n                errorParts.push(`\\n> These modules didn't load: ${notLoadedModules\n                    .map(($) => '\\n  - ' + $.name)\n                    .join('')}.\\n`);\n            }\n            if (errorParts.length) {\n                throw new Error(errorParts.join('\\n'));\n            }\n        });\n    }\n    /**\n     * Normalize 'a/../name' to 'name', etc.\n     */\n    function normalizeModuleId(moduleId) {\n        let r = moduleId, pattern;\n        // replace /./ => /\n        pattern = /\\/\\.\\//;\n        while (pattern.test(r)) {\n            r = r.replace(pattern, '/');\n        }\n        // replace ^./ => nothing\n        r = r.replace(/^\\.\\//g, '');\n        // replace /aa/../ => / (BUT IGNORE /../../)\n        pattern =\n            /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\n        while (pattern.test(r)) {\n            r = r.replace(pattern, '/');\n        }\n        // replace ^aa/../ => nothing (BUT IGNORE ../../)\n        r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\n        // replace ^/ => nothing\n        r = r.replace(/^\\//g, '');\n        return r;\n    }\n    /**\n     * Resolve relative module ids\n     */\n    function resolveModule(moduleId, parentModule) {\n        let result = moduleId;\n        if (!result.startsWith('@')) {\n            if (result.startsWith('./') || result.startsWith('../')) {\n                const currentPath = parentModule.split('/');\n                currentPath.pop();\n                result = normalizeModuleId(currentPath.join('/') + '/' + result);\n            }\n        }\n        return result;\n    }\n    function toUrl(moduleName, parentModule) {\n        switch (moduleName) {\n            case 'require':\n            case 'exports':\n            case 'module':\n                return moduleName;\n        }\n        if (parentModule) {\n            return resolveModule(moduleName, parentModule);\n        }\n        return normalizeModuleId(moduleName);\n    }\n    require.toUrl = toUrl;\n})(loader || (loader = {}));\nglobalObject.define = loader.define;\nglobalObject.dclamd = loader;\n//# sourceMappingURL=data:application/json;base64,\n//# sourceURL=dcl://node_modules/@dcl/amd/dist/amd.js")
/*! "node_modules/@dcl/sdk/dist/ecs7/index.js" 7d9ee0b775a9b7a141a8070b892cebdb91533c812b37d92a8f098fadc01c27ef */ eval("(function (exports) {\n\t'use strict';\n\n\tvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\tvar dist$1 = {};\n\n\tvar Quaternion = {};\n\n\tvar Vector3$1 = {};\n\n\tvar hasRequiredVector3;\n\n\tfunction requireVector3 () {\n\t\tif (hasRequiredVector3) return Vector3$1;\n\t\thasRequiredVector3 = 1;\n\t\t(function (exports) {\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.Vector3 = void 0;\n\t\t\t(function (Vector3) {\n\t\t\t    /**\n\t\t\t     * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\n\t\t\t     * @param x - defines the first coordinates (on X axis)\n\t\t\t     * @param y - defines the second coordinates (on Y axis)\n\t\t\t     * @param z - defines the third coordinates (on Z axis)\n\t\t\t     */\n\t\t\t    function create(\n\t\t\t    /**\n\t\t\t     * Defines the first coordinates (on X axis)\n\t\t\t     */\n\t\t\t    x = 0, \n\t\t\t    /**\n\t\t\t     * Defines the second coordinates (on Y axis)\n\t\t\t     */\n\t\t\t    y = 0, \n\t\t\t    /**\n\t\t\t     * Defines the third coordinates (on Z axis)\n\t\t\t     */\n\t\t\t    z = 0) {\n\t\t\t        return { x, y, z };\n\t\t\t    }\n\t\t\t    Vector3.create = create;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 as the result of the addition of the two given vectors.\n\t\t\t     * @param vector1 - the first vector\n\t\t\t     * @param vector2 - the second vector\n\t\t\t     * @returns the resulting vector\n\t\t\t     */\n\t\t\t    function add(vector1, vector2) {\n\t\t\t        return {\n\t\t\t            x: vector1.x + vector2.x,\n\t\t\t            y: vector1.y + vector2.y,\n\t\t\t            z: vector1.z + vector2.z\n\t\t\t        };\n\t\t\t    }\n\t\t\t    Vector3.add = add;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 as the result of the substraction of the two given vectors.\n\t\t\t     * @returns the resulting vector\n\t\t\t     */\n\t\t\t    function subtract(minuend, subtrahend) {\n\t\t\t        return {\n\t\t\t            x: minuend.x - subtrahend.x,\n\t\t\t            y: minuend.y - subtrahend.y,\n\t\t\t            z: minuend.z - subtrahend.z\n\t\t\t        };\n\t\t\t    }\n\t\t\t    Vector3.subtract = subtract;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 as the result of the substraction of the two given vectors.\n\t\t\t     * @returns the resulting vector\n\t\t\t     */\n\t\t\t    function subtractToRef(minuend, subtrahend, result) {\n\t\t\t        result.x = minuend.x - subtrahend.x;\n\t\t\t        result.y = minuend.y - subtrahend.y;\n\t\t\t        result.z = minuend.z - subtrahend.z;\n\t\t\t    }\n\t\t\t    Vector3.subtractToRef = subtractToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 with the other sign\n\t\t\t     * @returns the resulting vector\n\t\t\t     */\n\t\t\t    function opposite(value) {\n\t\t\t        return { x: -value.x, y: -value.y, z: -value.z };\n\t\t\t    }\n\t\t\t    Vector3.opposite = opposite;\n\t\t\t    /**\n\t\t\t     * Copy source into dest\n\t\t\t     *\n\t\t\t     */\n\t\t\t    function copy(source, dest) {\n\t\t\t        dest.x = source.x;\n\t\t\t        dest.y = source.y;\n\t\t\t        dest.z = source.z;\n\t\t\t    }\n\t\t\t    Vector3.copy = copy;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 with the same value\n\t\t\t     * @returns the resulting vector\n\t\t\t     */\n\t\t\t    function clone(source) {\n\t\t\t        return Object.assign({}, source);\n\t\t\t    }\n\t\t\t    Vector3.clone = clone;\n\t\t\t    // Properties\n\t\t\t    /**\n\t\t\t     * Gets the length of the Vector3\n\t\t\t     * @returns the length of the Vecto3\n\t\t\t     */\n\t\t\t    function length(vector) {\n\t\t\t        return Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\n\t\t\t    }\n\t\t\t    Vector3.length = length;\n\t\t\t    /**\n\t\t\t     * Gets the squared length of the Vector3\n\t\t\t     * @returns squared length of the Vector3\n\t\t\t     */\n\t\t\t    function lengthSquared(vector) {\n\t\t\t        return vector.x * vector.x + vector.y * vector.y + vector.z * vector.z;\n\t\t\t    }\n\t\t\t    Vector3.lengthSquared = lengthSquared;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n\t\t\t     * @param scale - defines the multiplier factor\n\t\t\t     * @returns a new Vector3\n\t\t\t     */\n\t\t\t    function scaleToRef(vector, scale, result) {\n\t\t\t        result.x = vector.x * scale;\n\t\t\t        result.y = vector.y * scale;\n\t\t\t        result.z = vector.z * scale;\n\t\t\t    }\n\t\t\t    Vector3.scaleToRef = scaleToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n\t\t\t     * @param scale - defines the multiplier factor\n\t\t\t     * @returns a new Vector3\n\t\t\t     */\n\t\t\t    function scale(vector, scale) {\n\t\t\t        return create(vector.x * scale, vector.y * scale, vector.z * scale);\n\t\t\t    }\n\t\t\t    Vector3.scale = scale;\n\t\t\t    /**\n\t\t\t     * Normalize the current Vector3 with the given input length.\n\t\t\t     * Please note that this is an in place operation.\n\t\t\t     * @param len - the length of the vector\n\t\t\t     * @returns the current updated Vector3\n\t\t\t     */\n\t\t\t    function normalizeFromLength(vector, len) {\n\t\t\t        const result = create(0, 0, 0);\n\t\t\t        normalizeFromLengthToRef(vector, len, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Vector3.normalizeFromLength = normalizeFromLength;\n\t\t\t    /**\n\t\t\t     * Normalize the current Vector3 with the given input length.\n\t\t\t     * Please note that this is an in place operation.\n\t\t\t     * @param len - the length of the vector\n\t\t\t     * @returns the current updated Vector3\n\t\t\t     */\n\t\t\t    function normalizeFromLengthToRef(vector, len, result) {\n\t\t\t        if (len === 0 || len === 1.0) {\n\t\t\t            copy(vector, result);\n\t\t\t            return;\n\t\t\t        }\n\t\t\t        scaleToRef(vector, 1.0 / len, result);\n\t\t\t    }\n\t\t\t    Vector3.normalizeFromLengthToRef = normalizeFromLengthToRef;\n\t\t\t    /**\n\t\t\t     * Normalize the current Vector3.\n\t\t\t     * Please note that this is an in place operation.\n\t\t\t     * @returns the current updated Vector3\n\t\t\t     */\n\t\t\t    function normalize(vector) {\n\t\t\t        return normalizeFromLength(vector, length(vector));\n\t\t\t    }\n\t\t\t    Vector3.normalize = normalize;\n\t\t\t    /**\n\t\t\t     * Normalize the current Vector3.\n\t\t\t     * Please note that this is an in place operation.\n\t\t\t     * @returns the current updated Vector3\n\t\t\t     */\n\t\t\t    function normalizeToRef(vector, result) {\n\t\t\t        normalizeFromLengthToRef(vector, length(vector), result);\n\t\t\t    }\n\t\t\t    Vector3.normalizeToRef = normalizeToRef;\n\t\t\t    /**\n\t\t\t     * Returns the dot product (float) between the vectors \"left\" and \"right\"\n\t\t\t     * @param left - defines the left operand\n\t\t\t     * @param right - defines the right operand\n\t\t\t     * @returns the dot product\n\t\t\t     */\n\t\t\t    function dot(left, right) {\n\t\t\t        return left.x * right.x + left.y * right.y + left.z * right.z;\n\t\t\t    }\n\t\t\t    Vector3.dot = dot;\n\t\t\t    /**\n\t\t\t     * Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3.\n\t\t\t     * @param q - defines the Quaternion\n\t\t\t     * @param result - defines the target Vector3\n\t\t\t     * @returns the current Vector3\n\t\t\t     */\n\t\t\t    function rotate(vector, q) {\n\t\t\t        const { x, y, z } = vector;\n\t\t\t        const { x: qx, y: qy, z: qz, w: qw } = q;\n\t\t\t        // calculate quat * vector\n\t\t\t        const ix = qw * x + qy * z - qz * y;\n\t\t\t        const iy = qw * y + qz * x - qx * z;\n\t\t\t        const iz = qw * z + qx * y - qy * x;\n\t\t\t        const iw = -qx * x - qy * y - qz * z;\n\t\t\t        // calculate result * inverse quat\n\t\t\t        return {\n\t\t\t            x: ix * qw + iw * -qx + iy * -qz - iz * -qy,\n\t\t\t            y: iy * qw + iw * -qy + iz * -qx - ix * -qz,\n\t\t\t            z: iz * qw + iw * -qz + ix * -qy - iy * -qx\n\t\t\t        };\n\t\t\t    }\n\t\t\t    Vector3.rotate = rotate;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\n\t\t\t     * @param start - defines the start value\n\t\t\t     * @param end - defines the end value\n\t\t\t     * @param amount - max defines amount between both (between 0 and 1)\n\t\t\t     * @returns the new Vector3\n\t\t\t     */\n\t\t\t    function lerp(start, end, amount) {\n\t\t\t        const result = create(0, 0, 0);\n\t\t\t        lerpToRef(start, end, amount, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Vector3.lerp = lerp;\n\t\t\t    /**\n\t\t\t     * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\n\t\t\t     * @param start - defines the start value\n\t\t\t     * @param end - defines the end value\n\t\t\t     * @param amount - max defines amount between both (between 0 and 1)\n\t\t\t     * @param result - defines the Vector3 where to store the result\n\t\t\t     */\n\t\t\t    function lerpToRef(start, end, amount, result) {\n\t\t\t        result.x = start.x + (end.x - start.x) * amount;\n\t\t\t        result.y = start.y + (end.y - start.y) * amount;\n\t\t\t        result.z = start.z + (end.z - start.z) * amount;\n\t\t\t    }\n\t\t\t    Vector3.lerpToRef = lerpToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\"\n\t\t\t     * The cross product is then orthogonal to both \"left\" and \"right\"\n\t\t\t     * @param left - defines the left operand\n\t\t\t     * @param right - defines the right operand\n\t\t\t     * @returns the cross product\n\t\t\t     */\n\t\t\t    function cross(left, right) {\n\t\t\t        const result = Vector3.Zero();\n\t\t\t        Vector3.crossToRef(left, right, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Vector3.cross = cross;\n\t\t\t    /**\n\t\t\t     * Sets the given vector \"result\" with the cross product of \"left\" and \"right\"\n\t\t\t     * The cross product is then orthogonal to both \"left\" and \"right\"\n\t\t\t     * @param left - defines the left operand\n\t\t\t     * @param right - defines the right operand\n\t\t\t     * @param result - defines the Vector3 where to store the result\n\t\t\t     */\n\t\t\t    function crossToRef(left, right, result) {\n\t\t\t        result.x = left.y * right.z - left.z * right.y;\n\t\t\t        result.y = left.z * right.x - left.x * right.z;\n\t\t\t        result.z = left.x * right.y - left.y * right.x;\n\t\t\t    }\n\t\t\t    Vector3.crossToRef = crossToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (0.0, 0.0, 0.0)\n\t\t\t     * @returns a new empty Vector3\n\t\t\t     */\n\t\t\t    function Zero() {\n\t\t\t        return create(0.0, 0.0, 0.0);\n\t\t\t    }\n\t\t\t    Vector3.Zero = Zero;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (1.0, 1.0, 1.0)\n\t\t\t     * @returns a new unit Vector3\n\t\t\t     */\n\t\t\t    function One() {\n\t\t\t        return create(1.0, 1.0, 1.0);\n\t\t\t    }\n\t\t\t    Vector3.One = One;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set tolengthSquared (0.0, 1.0, 0.0)\n\t\t\t     * @returns a new up Vector3\n\t\t\t     */\n\t\t\t    function Up() {\n\t\t\t        return create(0.0, 1.0, 0.0);\n\t\t\t    }\n\t\t\t    Vector3.Up = Up;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (0.0, -1.0, 0.0)\n\t\t\t     * @returns a new down Vector3\n\t\t\t     */\n\t\t\t    function Down() {\n\t\t\t        return create(0.0, -1.0, 0.0);\n\t\t\t    }\n\t\t\t    Vector3.Down = Down;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (0.0, 0.0, 1.0)\n\t\t\t     * @returns a new forward Vector3\n\t\t\t     */\n\t\t\t    function Forward() {\n\t\t\t        return create(0.0, 0.0, 1.0);\n\t\t\t    }\n\t\t\t    Vector3.Forward = Forward;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (0.0, 0.0, -1.0)\n\t\t\t     * @returns a new forward Vector3\n\t\t\t     */\n\t\t\t    function Backward() {\n\t\t\t        return create(0.0, 0.0, -1.0);\n\t\t\t    }\n\t\t\t    Vector3.Backward = Backward;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (1.0, 0.0, 0.0)\n\t\t\t     * @returns a new right Vector3\n\t\t\t     */\n\t\t\t    function Right() {\n\t\t\t        return create(1.0, 0.0, 0.0);\n\t\t\t    }\n\t\t\t    Vector3.Right = Right;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\n\t\t\t     * @returns a new left Vector3\n\t\t\t     */\n\t\t\t    function Left() {\n\t\t\t        return create(-1.0, 0.0, 0.0);\n\t\t\t    }\n\t\t\t    Vector3.Left = Left;\n\t\t\t})(exports.Vector3 || (exports.Vector3 = {}));\n\t\t\t\n\t} (Vector3$1));\n\t\treturn Vector3$1;\n\t}\n\n\tvar Scalar = {};\n\n\tvar hasRequiredScalar;\n\n\tfunction requireScalar () {\n\t\tif (hasRequiredScalar) return Scalar;\n\t\thasRequiredScalar = 1;\n\t\tObject.defineProperty(Scalar, \"__esModule\", { value: true });\n\t\tScalar.Scalar = void 0;\n\t\t/**\n\t\t * Two pi constants convenient for computation.\n\t\t */\n\t\tconst TwoPi = Math.PI * 2;\n\t\t/**\n\t\t * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n\t\t * @param a - number\n\t\t * @param b - number\n\t\t * @param epsilon - (default = 1.401298E-45)\n\t\t * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n\t\t */\n\t\tfunction withinEpsilon(a, b, epsilon = 1.401298e-45) {\n\t\t    const num = a - b;\n\t\t    return -epsilon <= num && num <= epsilon;\n\t\t}\n\t\t/**\n\t\t * Returns a string : the upper case translation of the number i to hexadecimal.\n\t\t * @param i - number\n\t\t * @returns the upper case translation of the number i to hexadecimal.\n\t\t */\n\t\tfunction toHex(i) {\n\t\t    const str = i.toString(16);\n\t\t    if (i <= 15) {\n\t\t        return ('0' + str).toUpperCase();\n\t\t    }\n\t\t    return str.toUpperCase();\n\t\t}\n\t\t/**\n\t\t * Returns -1 if value is negative and +1 is value is positive.\n\t\t * @param _value - the value\n\t\t * @returns the value itself if it's equal to zero.\n\t\t */\n\t\tfunction sign(value) {\n\t\t    const _value = +value; // convert to a number\n\t\t    if (_value === 0 || isNaN(_value)) {\n\t\t        return _value;\n\t\t    }\n\t\t    return _value > 0 ? 1 : -1;\n\t\t}\n\t\t/**\n\t\t * Returns the value itself if it's between min and max.\n\t\t * Returns min if the value is lower than min.\n\t\t * Returns max if the value is greater than max.\n\t\t * @param value - the value to clmap\n\t\t * @param min - the min value to clamp to (default: 0)\n\t\t * @param max - the max value to clamp to (default: 1)\n\t\t * @returns the clamped value\n\t\t */\n\t\tfunction clamp(value, min = 0, max = 1) {\n\t\t    return Math.min(max, Math.max(min, value));\n\t\t}\n\t\t/**\n\t\t * the log2 of value.\n\t\t * @param value - the value to compute log2 of\n\t\t * @returns the log2 of value.\n\t\t */\n\t\tfunction log2(value) {\n\t\t    return Math.log(value) * Math.LOG2E;\n\t\t}\n\t\t/**\n\t\t * Loops the value, so that it is never larger than length and never smaller than 0.\n\t\t *\n\t\t * This is similar to the modulo operator but it works with floating point numbers.\n\t\t * For example, using 3.0 for t and 2.5 for length, the result would be 0.5.\n\t\t * With t = 5 and length = 2.5, the result would be 0.0.\n\t\t * Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\n\t\t * @param value - the value\n\t\t * @param length - the length\n\t\t * @returns the looped value\n\t\t */\n\t\tfunction repeat(value, length) {\n\t\t    return value - Math.floor(value / length) * length;\n\t\t}\n\t\t/**\n\t\t * Normalize the value between 0.0 and 1.0 using min and max values\n\t\t * @param value - value to normalize\n\t\t * @param min - max to normalize between\n\t\t * @param max - min to normalize between\n\t\t * @returns the normalized value\n\t\t */\n\t\tfunction normalize(value, min, max) {\n\t\t    return (value - min) / (max - min);\n\t\t}\n\t\t/**\n\t\t * Denormalize the value from 0.0 and 1.0 using min and max values\n\t\t * @param normalized - value to denormalize\n\t\t * @param min - max to denormalize between\n\t\t * @param max - min to denormalize between\n\t\t * @returns the denormalized value\n\t\t */\n\t\tfunction denormalize(normalized, min, max) {\n\t\t    return normalized * (max - min) + min;\n\t\t}\n\t\t/**\n\t\t * Calculates the shortest difference between two given angles given in degrees.\n\t\t * @param current - current angle in degrees\n\t\t * @param target - target angle in degrees\n\t\t * @returns the delta\n\t\t */\n\t\tfunction deltaAngle(current, target) {\n\t\t    let num = repeat(target - current, 360.0);\n\t\t    if (num > 180.0) {\n\t\t        num -= 360.0;\n\t\t    }\n\t\t    return num;\n\t\t}\n\t\t/**\n\t\t * PingPongs the value t, so that it is never larger than length and never smaller than 0.\n\t\t * @param tx - value\n\t\t * @param length - length\n\t\t * @returns The returned value will move back and forth between 0 and length\n\t\t */\n\t\tfunction pingPong(tx, length) {\n\t\t    const t = repeat(tx, length * 2.0);\n\t\t    return length - Math.abs(t - length);\n\t\t}\n\t\t/**\n\t\t * Interpolates between min and max with smoothing at the limits.\n\t\t *\n\t\t * This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up\n\t\t * from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\n\t\t * @param from - from\n\t\t * @param to - to\n\t\t * @param tx - value\n\t\t * @returns the smooth stepped value\n\t\t */\n\t\tfunction smoothStep(from, to, tx) {\n\t\t    let t = clamp(tx);\n\t\t    t = -2.0 * t * t * t + 3.0 * t * t;\n\t\t    return to * t + from * (1.0 - t);\n\t\t}\n\t\t/**\n\t\t * Moves a value current towards target.\n\t\t *\n\t\t * This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta.\n\t\t * Negative values of maxDelta pushes the value away from target.\n\t\t * @param current - current value\n\t\t * @param target - target value\n\t\t * @param maxDelta - max distance to move\n\t\t * @returns resulting value\n\t\t */\n\t\tfunction moveTowards(current, target, maxDelta) {\n\t\t    let result = 0;\n\t\t    if (Math.abs(target - current) <= maxDelta) {\n\t\t        result = target;\n\t\t    }\n\t\t    else {\n\t\t        result = current + sign(target - current) * maxDelta;\n\t\t    }\n\t\t    return result;\n\t\t}\n\t\t/**\n\t\t * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\n\t\t *\n\t\t * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta\n\t\t *  are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\n\t\t * @param current - current value\n\t\t * @param target - target value\n\t\t * @param maxDelta - max distance to move\n\t\t * @returns resulting angle\n\t\t */\n\t\tfunction moveTowardsAngle(current, target, maxDelta) {\n\t\t    const num = deltaAngle(current, target);\n\t\t    let result = 0;\n\t\t    if (-maxDelta < num && num < maxDelta) {\n\t\t        result = target;\n\t\t    }\n\t\t    else {\n\t\t        result = moveTowards(current, current + num, maxDelta);\n\t\t    }\n\t\t    return result;\n\t\t}\n\t\t/**\n\t\t * Creates a new scalar with values linearly interpolated of \"amount\" between the start scalar and the end scalar\n\t\t * @param start - start value\n\t\t * @param end - target value\n\t\t * @param amount - amount to lerp between\n\t\t * @returns the lerped value\n\t\t */\n\t\tfunction lerp(start, end, amount) {\n\t\t    return start + (end - start) * amount;\n\t\t}\n\t\t/**\n\t\t * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.\n\t\t * The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\n\t\t * @param start - start value\n\t\t * @param end - target value\n\t\t * @param amount - amount to lerp between\n\t\t * @returns the lerped value\n\t\t */\n\t\tfunction lerpAngle(start, end, amount) {\n\t\t    let num = repeat(end - start, 360.0);\n\t\t    if (num > 180.0) {\n\t\t        num -= 360.0;\n\t\t    }\n\t\t    return start + num * clamp(amount);\n\t\t}\n\t\t/**\n\t\t * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\n\t\t * @param a - start value\n\t\t * @param b - target value\n\t\t * @param value - value between a and b\n\t\t * @returns the inverseLerp value\n\t\t */\n\t\tfunction inverseLerp(a, b, value) {\n\t\t    let result = 0;\n\t\t    if (a !== b) {\n\t\t        result = clamp((value - a) / (b - a));\n\t\t    }\n\t\t    else {\n\t\t        result = 0.0;\n\t\t    }\n\t\t    return result;\n\t\t}\n\t\t/**\n\t\t * Returns a new scalar located for \"amount\" (float) on the Hermite spline defined by the scalars \"value1\", \"value3\", \"tangent1\", \"tangent2\".\n\t\t * {@link http://mathworld.wolfram.com/HermitePolynomial.html}\n\t\t * @param value1 - spline value\n\t\t * @param tangent1 - spline value\n\t\t * @param value2 - spline value\n\t\t * @param tangent2 - spline value\n\t\t * @param amount - input value\n\t\t * @returns hermite result\n\t\t */\n\t\tfunction hermite(value1, tangent1, value2, tangent2, amount) {\n\t\t    const squared = amount * amount;\n\t\t    const cubed = amount * squared;\n\t\t    const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n\t\t    const part2 = -2.0 * cubed + 3.0 * squared;\n\t\t    const part3 = cubed - 2.0 * squared + amount;\n\t\t    const part4 = cubed - squared;\n\t\t    return value1 * part1 + value2 * part2 + tangent1 * part3 + tangent2 * part4;\n\t\t}\n\t\t/**\n\t\t * Returns a random float number between and min and max values\n\t\t * @param min - min value of random\n\t\t * @param max - max value of random\n\t\t * @returns random value\n\t\t */\n\t\tfunction randomRange(min, max) {\n\t\t    if (min === max) {\n\t\t        return min;\n\t\t    }\n\t\t    return Math.random() * (max - min) + min;\n\t\t}\n\t\t/**\n\t\t * This function returns percentage of a number in a given range.\n\t\t *\n\t\t * RangeToPercent(40,20,60) will return 0.5 (50%)\n\t\t * RangeToPercent(34,0,100) will return 0.34 (34%)\n\t\t * @param num - to convert to percentage\n\t\t * @param min - min range\n\t\t * @param max - max range\n\t\t * @returns the percentage\n\t\t */\n\t\tfunction rangeToPercent(num, min, max) {\n\t\t    return (num - min) / (max - min);\n\t\t}\n\t\t/**\n\t\t * This function returns number that corresponds to the percentage in a given range.\n\t\t *\n\t\t * PercentToRange(0.34,0,100) will return 34.\n\t\t * @param percent - to convert to number\n\t\t * @param min - min range\n\t\t * @param max - max range\n\t\t * @returns the number\n\t\t */\n\t\tfunction percentToRange(percent, min, max) {\n\t\t    return (max - min) * percent + min;\n\t\t}\n\t\t/**\n\t\t * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\n\t\t * @param angle - The angle to normalize in radian.\n\t\t * @returns The converted angle.\n\t\t */\n\t\tfunction normalizeRadians(angle) {\n\t\t    // More precise but slower version kept for reference.\n\t\t    // tslint:disable:no-commented-out-code\n\t\t    /*\n\t\t      // angle = angle % Tools.TwoPi;\n\t\t      // angle = (angle + Tools.TwoPi) % Tools.TwoPi;\n\t\t  \n\t\t      //if (angle > Math.PI) {\n\t\t      //\tangle -= Tools.TwoPi;\n\t\t      //}\n\t\t        */\n\t\t    return angle - TwoPi * Math.floor((angle + Math.PI) / TwoPi);\n\t\t}\n\t\t/**\n\t\t * Scalar computation library\n\t\t * @public\n\t\t */\n\t\tScalar.Scalar = {\n\t\t    withinEpsilon,\n\t\t    toHex,\n\t\t    sign,\n\t\t    clamp,\n\t\t    log2,\n\t\t    repeat,\n\t\t    normalize,\n\t\t    denormalize,\n\t\t    deltaAngle,\n\t\t    pingPong,\n\t\t    smoothStep,\n\t\t    moveTowards,\n\t\t    moveTowardsAngle,\n\t\t    lerp,\n\t\t    lerpAngle,\n\t\t    inverseLerp,\n\t\t    hermite,\n\t\t    randomRange,\n\t\t    rangeToPercent,\n\t\t    percentToRange,\n\t\t    normalizeRadians,\n\t\t    TwoPi\n\t\t};\n\t\t\n\t\treturn Scalar;\n\t}\n\n\tvar types$1 = {};\n\n\tvar hasRequiredTypes$1;\n\n\tfunction requireTypes$1 () {\n\t\tif (hasRequiredTypes$1) return types$1;\n\t\thasRequiredTypes$1 = 1;\n\t\t(function (exports) {\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.RAD2DEG = exports.DEG2RAD = exports.Epsilon = exports.ToLinearSpace = exports.ToGammaSpace = exports.Space = exports.Orientation = void 0;\n\t\t\t(function (Orientation) {\n\t\t\t    /**\n\t\t\t     * Clockwise\n\t\t\t     */\n\t\t\t    Orientation[Orientation[\"CW\"] = 0] = \"CW\";\n\t\t\t    /** Counter clockwise */\n\t\t\t    Orientation[Orientation[\"CCW\"] = 1] = \"CCW\";\n\t\t\t})(exports.Orientation || (exports.Orientation = {}));\n\t\t\t(function (Space) {\n\t\t\t    /** Local (object) space */\n\t\t\t    Space[Space[\"LOCAL\"] = 0] = \"LOCAL\";\n\t\t\t    /** World space */\n\t\t\t    Space[Space[\"WORLD\"] = 1] = \"WORLD\";\n\t\t\t    /** Bone space */\n\t\t\t    Space[Space[\"BONE\"] = 2] = \"BONE\";\n\t\t\t})(exports.Space || (exports.Space = {}));\n\t\t\t/**\n\t\t\t * Constant used to convert a value to gamma space\n\t\t\t * @public\n\t\t\t */\n\t\t\texports.ToGammaSpace = 1 / 2.2;\n\t\t\t/**\n\t\t\t * Constant used to convert a value to linear space\n\t\t\t * @public\n\t\t\t */\n\t\t\texports.ToLinearSpace = 2.2;\n\t\t\t/**\n\t\t\t * Constant used to define the minimal number value in Babylon.js\n\t\t\t * @public\n\t\t\t */\n\t\t\texports.Epsilon = 0.000001;\n\t\t\t/**\n\t\t\t * Constant used to convert from Euler degrees to radians\n\t\t\t * @public\n\t\t\t */\n\t\t\texports.DEG2RAD = Math.PI / 180;\n\t\t\t/**\n\t\t\t * Constant used to convert from radians to Euler degrees\n\t\t\t * @public\n\t\t\t */\n\t\t\texports.RAD2DEG = 360 / (Math.PI * 2);\n\t\t\t\n\t} (types$1));\n\t\treturn types$1;\n\t}\n\n\tvar hasRequiredQuaternion;\n\n\tfunction requireQuaternion () {\n\t\tif (hasRequiredQuaternion) return Quaternion;\n\t\thasRequiredQuaternion = 1;\n\t\t(function (exports) {\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.Quaternion = void 0;\n\t\t\tconst Vector3_1 = requireVector3();\n\t\t\tconst Scalar_1 = requireScalar();\n\t\t\tconst types_1 = requireTypes$1();\n\t\t\t(function (Quaternion) {\n\t\t\t    /**\n\t\t\t     * Creates a new Quaternion from the given floats\n\t\t\t     * @param x - defines the first component (0 by default)\n\t\t\t     * @param y - defines the second component (0 by default)\n\t\t\t     * @param z - defines the third component (0 by default)\n\t\t\t     * @param w - defines the fourth component (1.0 by default)\n\t\t\t     */\n\t\t\t    function create(\n\t\t\t    /** defines the first component (0 by default) */\n\t\t\t    x = 0.0, \n\t\t\t    /** defines the second component (0 by default) */\n\t\t\t    y = 0.0, \n\t\t\t    /** defines the third component (0 by default) */\n\t\t\t    z = 0.0, \n\t\t\t    /** defines the fourth component (1.0 by default) */\n\t\t\t    w = 1.0) {\n\t\t\t        return { x, y, z, w };\n\t\t\t    }\n\t\t\t    Quaternion.create = create;\n\t\t\t    /**\n\t\t\t     * Returns a new Quaternion as the result of the addition of the two given quaternions.\n\t\t\t     * @param q1 - the first quaternion\n\t\t\t     * @param q2 - the second quaternion\n\t\t\t     * @returns the resulting quaternion\n\t\t\t     */\n\t\t\t    function add(q1, q2) {\n\t\t\t        return { x: q1.x + q2.x, y: q1.y + q2.y, z: q1.z + q2.z, w: q1.w + q2.w };\n\t\t\t    }\n\t\t\t    Quaternion.add = add;\n\t\t\t    /**\n\t\t\t     * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n\t\t\t     * @param yaw - defines the rotation around Y axis\n\t\t\t     * @param pitch - defines the rotation around X axis\n\t\t\t     * @param roll - defines the rotation around Z axis\n\t\t\t     * @param result - defines the target quaternion\n\t\t\t     */\n\t\t\t    function rotationYawPitchRoll(yaw, pitch, roll) {\n\t\t\t        // Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n\t\t\t        const halfPitch = pitch * 0.5;\n\t\t\t        const halfYaw = yaw * 0.5;\n\t\t\t        const halfRoll = roll * 0.5;\n\t\t\t        const c1 = Math.cos(halfPitch);\n\t\t\t        const c2 = Math.cos(halfYaw);\n\t\t\t        const c3 = Math.cos(halfRoll);\n\t\t\t        const s1 = Math.sin(halfPitch);\n\t\t\t        const s2 = Math.sin(halfYaw);\n\t\t\t        const s3 = Math.sin(halfRoll);\n\t\t\t        return create(c2 * s1 * c3 + s2 * c1 * s3, s2 * c1 * c3 - c2 * s1 * s3, c2 * c1 * s3 - s2 * s1 * c3, c2 * c1 * c3 + s2 * s1 * s3);\n\t\t\t    }\n\t\t\t    Quaternion.rotationYawPitchRoll = rotationYawPitchRoll;\n\t\t\t    /**\n\t\t\t     * Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.\n\t\t\t     * @param x - the rotation on the x axis in euler degrees\n\t\t\t     * @param y - the rotation on the y axis in euler degrees\n\t\t\t     * @param z - the rotation on the z axis in euler degrees\n\t\t\t     */\n\t\t\t    function euler(x, y, z) {\n\t\t\t        return rotationYawPitchRoll(y * types_1.DEG2RAD, x * types_1.DEG2RAD, z * types_1.DEG2RAD);\n\t\t\t    }\n\t\t\t    Quaternion.euler = euler;\n\t\t\t    /**\n\t\t\t     * Gets length of current quaternion\n\t\t\t     * @returns the quaternion length (float)\n\t\t\t     */\n\t\t\t    function length(q) {\n\t\t\t        return Math.sqrt(lengthSquared(q));\n\t\t\t    }\n\t\t\t    Quaternion.length = length;\n\t\t\t    /**\n\t\t\t     * Gets length of current quaternion\n\t\t\t     * @returns the quaternion length (float)\n\t\t\t     */\n\t\t\t    function lengthSquared(q) {\n\t\t\t        return q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w;\n\t\t\t    }\n\t\t\t    Quaternion.lengthSquared = lengthSquared;\n\t\t\t    /**\n\t\t\t     * Returns the dot product (float) between the quaternions \"left\" and \"right\"\n\t\t\t     * @param left - defines the left operand\n\t\t\t     * @param right - defines the right operand\n\t\t\t     * @returns the dot product\n\t\t\t     */\n\t\t\t    function dot(left, right) {\n\t\t\t        return (left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w);\n\t\t\t    }\n\t\t\t    Quaternion.dot = dot;\n\t\t\t    /**\n\t\t\t     * Returns the angle in degrees between two rotations a and b.\n\t\t\t     * @param quat1 - defines the first quaternion\n\t\t\t     * @param quat2 - defines the second quaternion\n\t\t\t     */\n\t\t\t    function angle(quat1, quat2) {\n\t\t\t        const dotVal = dot(quat1, quat2);\n\t\t\t        return Math.acos(Math.min(Math.abs(dotVal), 1)) * 2 * types_1.RAD2DEG;\n\t\t\t    }\n\t\t\t    Quaternion.angle = angle;\n\t\t\t    /**\n\t\t\t     * The from quaternion is rotated towards to by an angular step of maxDegreesDelta.\n\t\t\t     * @param from - defines the first quaternion\n\t\t\t     * @param to - defines the second quaternion\n\t\t\t     * @param maxDegreesDelta - the interval step\n\t\t\t     */\n\t\t\t    function rotateTowards(from, to, maxDegreesDelta) {\n\t\t\t        const num = angle(from, to);\n\t\t\t        if (num === 0) {\n\t\t\t            return to;\n\t\t\t        }\n\t\t\t        const t = Math.min(1, maxDegreesDelta / num);\n\t\t\t        return slerp(from, to, t);\n\t\t\t    }\n\t\t\t    Quaternion.rotateTowards = rotateTowards;\n\t\t\t    /**\n\t\t\t     * Creates a rotation with the specified forward and upwards directions.\n\t\t\t     * @param forward - the direction to look in\n\t\t\t     * @param up - the vector that defines in which direction up is\n\t\t\t     */\n\t\t\t    function lookRotation(forward, up = { x: 0.0, y: 1.0, z: 0.0 }) {\n\t\t\t        const forwardNew = Vector3_1.Vector3.normalize(forward);\n\t\t\t        const right = Vector3_1.Vector3.normalize(Vector3_1.Vector3.cross(up, forwardNew));\n\t\t\t        const upNew = Vector3_1.Vector3.cross(forwardNew, right);\n\t\t\t        const m00 = right.x;\n\t\t\t        const m01 = right.y;\n\t\t\t        const m02 = right.z;\n\t\t\t        const m10 = upNew.x;\n\t\t\t        const m11 = upNew.y;\n\t\t\t        const m12 = upNew.z;\n\t\t\t        const m20 = forwardNew.x;\n\t\t\t        const m21 = forwardNew.y;\n\t\t\t        const m22 = forwardNew.z;\n\t\t\t        const num8 = m00 + m11 + m22;\n\t\t\t        const quaternion = create();\n\t\t\t        if (num8 > 0) {\n\t\t\t            let num = Math.sqrt(num8 + 1);\n\t\t\t            quaternion.w = num * 0.5;\n\t\t\t            num = 0.5 / num;\n\t\t\t            quaternion.x = (m12 - m21) * num;\n\t\t\t            quaternion.y = (m20 - m02) * num;\n\t\t\t            quaternion.z = (m01 - m10) * num;\n\t\t\t            return quaternion;\n\t\t\t        }\n\t\t\t        if (m00 >= m11 && m00 >= m22) {\n\t\t\t            const num7 = Math.sqrt(1 + m00 - m11 - m22);\n\t\t\t            const num4 = 0.5 / num7;\n\t\t\t            quaternion.x = 0.5 * num7;\n\t\t\t            quaternion.y = (m01 + m10) * num4;\n\t\t\t            quaternion.z = (m02 + m20) * num4;\n\t\t\t            quaternion.w = (m12 - m21) * num4;\n\t\t\t            return quaternion;\n\t\t\t        }\n\t\t\t        if (m11 > m22) {\n\t\t\t            const num6 = Math.sqrt(1 + m11 - m00 - m22);\n\t\t\t            const num3 = 0.5 / num6;\n\t\t\t            quaternion.x = (m10 + m01) * num3;\n\t\t\t            quaternion.y = 0.5 * num6;\n\t\t\t            quaternion.z = (m21 + m12) * num3;\n\t\t\t            quaternion.w = (m20 - m02) * num3;\n\t\t\t            return quaternion;\n\t\t\t        }\n\t\t\t        const num5 = Math.sqrt(1 + m22 - m00 - m11);\n\t\t\t        const num2 = 0.5 / num5;\n\t\t\t        quaternion.x = (m20 + m02) * num2;\n\t\t\t        quaternion.y = (m21 + m12) * num2;\n\t\t\t        quaternion.z = 0.5 * num5;\n\t\t\t        quaternion.w = (m01 - m10) * num2;\n\t\t\t        return quaternion;\n\t\t\t    }\n\t\t\t    Quaternion.lookRotation = lookRotation;\n\t\t\t    /**\n\t\t\t     * Normalize in place the current quaternion\n\t\t\t     * @returns the current updated quaternion\n\t\t\t     */\n\t\t\t    function normalize(q) {\n\t\t\t        const qLength = 1.0 / length(q);\n\t\t\t        return create(q.x * qLength, q.y * qLength, q.z * qLength, q.w * qLength);\n\t\t\t    }\n\t\t\t    Quaternion.normalize = normalize;\n\t\t\t    /**\n\t\t\t     * Creates a rotation which rotates from fromDirection to toDirection.\n\t\t\t     * @param from - defines the first direction Vector\n\t\t\t     * @param to - defines the target direction Vector\n\t\t\t     */\n\t\t\t    function fromToRotation(from, to, up = Vector3_1.Vector3.Up()) {\n\t\t\t        // Unity-based calculations implemented from https://forum.unity.com/threads/quaternion-lookrotation-around-an-axis.608470/#post-4069888\n\t\t\t        const v0 = Vector3_1.Vector3.normalize(from);\n\t\t\t        const v1 = Vector3_1.Vector3.normalize(to);\n\t\t\t        const a = Vector3_1.Vector3.cross(v0, v1);\n\t\t\t        const w = Math.sqrt(Vector3_1.Vector3.lengthSquared(v0) * Vector3_1.Vector3.lengthSquared(v1)) +\n\t\t\t            Vector3_1.Vector3.dot(v0, v1);\n\t\t\t        if (Vector3_1.Vector3.lengthSquared(a) < 0.0001) {\n\t\t\t            // the vectors are parallel, check w to find direction\n\t\t\t            // if w is 0 then values are opposite, and we sould rotate 180 degrees around the supplied axis\n\t\t\t            // otherwise the vectors in the same direction and no rotation should occur\n\t\t\t            return Math.abs(w) < 0.0001\n\t\t\t                ? normalize(create(up.x, up.y, up.z, 0))\n\t\t\t                : Identity();\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            return normalize(create(a.x, a.y, a.z, w));\n\t\t\t        }\n\t\t\t    }\n\t\t\t    Quaternion.fromToRotation = fromToRotation;\n\t\t\t    /**\n\t\t\t     * Creates an identity quaternion\n\t\t\t     * @returns - the identity quaternion\n\t\t\t     */\n\t\t\t    function Identity() {\n\t\t\t        return create(0.0, 0.0, 0.0, 1.0);\n\t\t\t    }\n\t\t\t    Quaternion.Identity = Identity;\n\t\t\t    /**\n\t\t\t     * Gets or sets the euler angle representation of the rotation.\n\t\t\t     * Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n\t\t\t     */\n\t\t\t    function eulerAngles(q) {\n\t\t\t        const out = Vector3_1.Vector3.create();\n\t\t\t        // if the input quaternion is normalized, this is exactly one. Otherwise, this acts as a correction factor for the quaternion's not-normalizedness\n\t\t\t        const unit = q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w;\n\t\t\t        // q will have a magnitude of 0.5 or greater if and only if q is a singularity case\n\t\t\t        const test = q.x * q.w - q.y * q.z;\n\t\t\t        if (test > 0.4995 * unit) {\n\t\t\t            // singularity at north pole\n\t\t\t            out.x = Math.PI / 2;\n\t\t\t            out.y = 2 * Math.atan2(q.y, q.x);\n\t\t\t            out.z = 0;\n\t\t\t        }\n\t\t\t        else if (test < -0.4995 * unit) {\n\t\t\t            // singularity at south pole\n\t\t\t            out.x = -Math.PI / 2;\n\t\t\t            out.y = -2 * Math.atan2(q.y, q.x);\n\t\t\t            out.z = 0;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            // no singularity - q is the majority of cases\n\t\t\t            out.x = Math.asin(2 * (q.w * q.x - q.y * q.z));\n\t\t\t            out.y = Math.atan2(2 * q.w * q.y + 2 * q.z * q.x, 1 - 2 * (q.x * q.x + q.y * q.y));\n\t\t\t            out.z = Math.atan2(2 * q.w * q.z + 2 * q.x * q.y, 1 - 2 * (q.z * q.z + q.x * q.x));\n\t\t\t        }\n\t\t\t        out.x *= types_1.RAD2DEG;\n\t\t\t        out.y *= types_1.RAD2DEG;\n\t\t\t        out.z *= types_1.RAD2DEG;\n\t\t\t        // ensure the degree values are between 0 and 360\n\t\t\t        out.x = Scalar_1.Scalar.repeat(out.x, 360);\n\t\t\t        out.y = Scalar_1.Scalar.repeat(out.y, 360);\n\t\t\t        out.z = Scalar_1.Scalar.repeat(out.z, 360);\n\t\t\t        return out;\n\t\t\t    }\n\t\t\t    Quaternion.eulerAngles = eulerAngles;\n\t\t\t    /**\n\t\t\t     * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n\t\t\t     * @param yaw - defines the rotation around Y axis\n\t\t\t     * @param pitch - defines the rotation around X axis\n\t\t\t     * @param roll - defines the rotation around Z axis\n\t\t\t     * @param result - defines the target quaternion\n\t\t\t     */\n\t\t\t    function rotationYawPitchRollToRef(yaw, pitch, roll, result) {\n\t\t\t        // Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n\t\t\t        const halfPitch = pitch * 0.5;\n\t\t\t        const halfYaw = yaw * 0.5;\n\t\t\t        const halfRoll = roll * 0.5;\n\t\t\t        const c1 = Math.cos(halfPitch);\n\t\t\t        const c2 = Math.cos(halfYaw);\n\t\t\t        const c3 = Math.cos(halfRoll);\n\t\t\t        const s1 = Math.sin(halfPitch);\n\t\t\t        const s2 = Math.sin(halfYaw);\n\t\t\t        const s3 = Math.sin(halfRoll);\n\t\t\t        result.x = c2 * s1 * c3 + s2 * c1 * s3;\n\t\t\t        result.y = s2 * c1 * c3 - c2 * s1 * s3;\n\t\t\t        result.z = c2 * c1 * s3 - s2 * s1 * c3;\n\t\t\t        result.w = c2 * c1 * c3 + s2 * s1 * s3;\n\t\t\t    }\n\t\t\t    Quaternion.rotationYawPitchRollToRef = rotationYawPitchRollToRef;\n\t\t\t    /**\n\t\t\t     * Updates the given quaternion with the given rotation matrix values\n\t\t\t     * @param matrix - defines the source matrix\n\t\t\t     * @param result - defines the target quaternion\n\t\t\t     */\n\t\t\t    function fromRotationMatrixToRef(matrix, result) {\n\t\t\t        const data = matrix._m;\n\t\t\t        // tslint:disable:one-variable-per-declaration\n\t\t\t        const m11 = data[0], m12 = data[4], m13 = data[8];\n\t\t\t        const m21 = data[1], m22 = data[5], m23 = data[9];\n\t\t\t        const m31 = data[2], m32 = data[6], m33 = data[10];\n\t\t\t        // tslint:enable:one-variable-per-declaration\n\t\t\t        const trace = m11 + m22 + m33;\n\t\t\t        let s;\n\t\t\t        if (trace > 0) {\n\t\t\t            s = 0.5 / Math.sqrt(trace + 1.0);\n\t\t\t            result.w = 0.25 / s;\n\t\t\t            result.x = (m32 - m23) * s;\n\t\t\t            result.y = (m13 - m31) * s;\n\t\t\t            result.z = (m21 - m12) * s;\n\t\t\t        }\n\t\t\t        else if (m11 > m22 && m11 > m33) {\n\t\t\t            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\t\t\t            result.w = (m32 - m23) / s;\n\t\t\t            result.x = 0.25 * s;\n\t\t\t            result.y = (m12 + m21) / s;\n\t\t\t            result.z = (m13 + m31) / s;\n\t\t\t        }\n\t\t\t        else if (m22 > m33) {\n\t\t\t            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\t\t\t            result.w = (m13 - m31) / s;\n\t\t\t            result.x = (m12 + m21) / s;\n\t\t\t            result.y = 0.25 * s;\n\t\t\t            result.z = (m23 + m32) / s;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\t\t\t            result.w = (m21 - m12) / s;\n\t\t\t            result.x = (m13 + m31) / s;\n\t\t\t            result.y = (m23 + m32) / s;\n\t\t\t            result.z = 0.25 * s;\n\t\t\t        }\n\t\t\t    }\n\t\t\t    Quaternion.fromRotationMatrixToRef = fromRotationMatrixToRef;\n\t\t\t    /**\n\t\t\t     * Interpolates between two quaternions\n\t\t\t     * @param left - defines first quaternion\n\t\t\t     * @param right - defines second quaternion\n\t\t\t     * @param amount - defines the gradient to use\n\t\t\t     * @returns the new interpolated quaternion\n\t\t\t     */\n\t\t\t    function slerp(left, right, amount) {\n\t\t\t        const result = Quaternion.Identity();\n\t\t\t        Quaternion.slerpToRef(left, right, amount, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Quaternion.slerp = slerp;\n\t\t\t    /**\n\t\t\t     * Interpolates between two quaternions and stores it into a target quaternion\n\t\t\t     * @param left - defines first quaternion\n\t\t\t     * @param right - defines second quaternion\n\t\t\t     * @param amount - defines the gradient to use\n\t\t\t     * @param result - defines the target quaternion\n\t\t\t     */\n\t\t\t    function slerpToRef(left, right, amount, result) {\n\t\t\t        let num2;\n\t\t\t        let num3;\n\t\t\t        let num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n\t\t\t        let flag = false;\n\t\t\t        if (num4 < 0) {\n\t\t\t            flag = true;\n\t\t\t            num4 = -num4;\n\t\t\t        }\n\t\t\t        if (num4 > 0.999999) {\n\t\t\t            num3 = 1 - amount;\n\t\t\t            num2 = flag ? -amount : amount;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            const num5 = Math.acos(num4);\n\t\t\t            const num6 = 1.0 / Math.sin(num5);\n\t\t\t            num3 = Math.sin((1.0 - amount) * num5) * num6;\n\t\t\t            num2 = flag\n\t\t\t                ? -Math.sin(amount * num5) * num6\n\t\t\t                : Math.sin(amount * num5) * num6;\n\t\t\t        }\n\t\t\t        result.x = num3 * left.x + num2 * right.x;\n\t\t\t        result.y = num3 * left.y + num2 * right.y;\n\t\t\t        result.z = num3 * left.z + num2 * right.z;\n\t\t\t        result.w = num3 * left.w + num2 * right.w;\n\t\t\t    }\n\t\t\t    Quaternion.slerpToRef = slerpToRef;\n\t\t\t    /**\n\t\t\t     * Multiplies two quaternions\n\t\t\t     * @param self - defines the first operand\n\t\t\t     * @param q1 - defines the second operand\n\t\t\t     * @returns a new quaternion set as the multiplication result of the self one with the given one \"q1\"\n\t\t\t     */\n\t\t\t    function multiply(self, q1) {\n\t\t\t        const result = create(0, 0, 0, 1.0);\n\t\t\t        multiplyToRef(self, q1, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Quaternion.multiply = multiply;\n\t\t\t    /**\n\t\t\t     * Sets the given \"result\" as the the multiplication result of the self one with the given one \"q1\"\n\t\t\t     * @param self - defines the first operand\n\t\t\t     * @param q1 - defines the second operand\n\t\t\t     * @param result - defines the target quaternion\n\t\t\t     * @returns the current quaternion\n\t\t\t     */\n\t\t\t    function multiplyToRef(self, q1, result) {\n\t\t\t        result.x = self.x * q1.w + self.y * q1.z - self.z * q1.y + self.w * q1.x;\n\t\t\t        result.y = -self.x * q1.z + self.y * q1.w + self.z * q1.x + self.w * q1.y;\n\t\t\t        result.z = self.x * q1.y - self.y * q1.x + self.z * q1.w + self.w * q1.z;\n\t\t\t        result.w = -self.x * q1.x - self.y * q1.y - self.z * q1.z + self.w * q1.w;\n\t\t\t    }\n\t\t\t    Quaternion.multiplyToRef = multiplyToRef;\n\t\t\t    function angleAxis(degress, axis) {\n\t\t\t        if (Vector3_1.Vector3.lengthSquared(axis) === 0) {\n\t\t\t            return Quaternion.Identity();\n\t\t\t        }\n\t\t\t        const result = Identity();\n\t\t\t        let radians = degress * types_1.DEG2RAD;\n\t\t\t        radians *= 0.5;\n\t\t\t        const a2 = Vector3_1.Vector3.normalize(axis);\n\t\t\t        Vector3_1.Vector3.scaleToRef(a2, Math.sin(radians), a2);\n\t\t\t        result.x = a2.x;\n\t\t\t        result.y = a2.y;\n\t\t\t        result.z = a2.z;\n\t\t\t        result.w = Math.cos(radians);\n\t\t\t        return normalize(result);\n\t\t\t    }\n\t\t\t    Quaternion.angleAxis = angleAxis;\n\t\t\t    /**\n\t\t\t     * Returns a zero filled quaternion\n\t\t\t     */\n\t\t\t    function Zero() {\n\t\t\t        return create(0.0, 0.0, 0.0, 0.0);\n\t\t\t    }\n\t\t\t    Quaternion.Zero = Zero;\n\t\t\t})(exports.Quaternion || (exports.Quaternion = {}));\n\t\t\t\n\t} (Quaternion));\n\t\treturn Quaternion;\n\t}\n\n\tvar hasRequiredDist$1;\n\n\tfunction requireDist$1 () {\n\t\tif (hasRequiredDist$1) return dist$1;\n\t\thasRequiredDist$1 = 1;\n\t\t(function (exports) {\n\t\t\tvar __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n\t\t\t    if (k2 === undefined) k2 = k;\n\t\t\t    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n\t\t\t}) : (function(o, m, k, k2) {\n\t\t\t    if (k2 === undefined) k2 = k;\n\t\t\t    o[k2] = m[k];\n\t\t\t}));\n\t\t\tvar __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {\n\t\t\t    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n\t\t\t};\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\t__exportStar(requireQuaternion(), exports);\n\t\t\t__exportStar(requireVector3(), exports);\n\t\t\t__exportStar(requireTypes$1(), exports);\n\t\t\t__exportStar(requireDist$1(), exports);\n\t\t\t\n\t} (dist$1));\n\t\treturn dist$1;\n\t}\n\n\tvar distExports$1 = requireDist$1();\n\n\tvar dist = {};\n\n\tvar types = {};\n\n\tvar hasRequiredTypes;\n\n\tfunction requireTypes () {\n\t\tif (hasRequiredTypes) return types;\n\t\thasRequiredTypes = 1;\n\t\tObject.defineProperty(types, \"__esModule\", { value: true });\n\t\t\n\t\treturn types;\n\t}\n\n\tvar hasRequiredDist;\n\n\tfunction requireDist () {\n\t\tif (hasRequiredDist) return dist;\n\t\thasRequiredDist = 1;\n\t\t(function (exports) {\n\t\t\tvar __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n\t\t\t    if (k2 === undefined) k2 = k;\n\t\t\t    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n\t\t\t}) : (function(o, m, k, k2) {\n\t\t\t    if (k2 === undefined) k2 = k;\n\t\t\t    o[k2] = m[k];\n\t\t\t}));\n\t\t\tvar __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {\n\t\t\t    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n\t\t\t};\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.crdtProtocol = exports.sameData = void 0;\n\t\t\t__exportStar(requireTypes(), exports);\n\t\t\t/**\n\t\t\t * Compare raw data.\n\t\t\t * @internal\n\t\t\t */\n\t\t\tfunction sameData(a, b) {\n\t\t\t    // At reference level\n\t\t\t    if (a === b)\n\t\t\t        return true;\n\t\t\t    if (a instanceof Uint8Array && b instanceof Uint8Array) {\n\t\t\t        if (a.byteLength !== b.byteLength) {\n\t\t\t            return false;\n\t\t\t        }\n\t\t\t        for (let i = 0; i < a.byteLength; i++) {\n\t\t\t            if (a[i] !== b[i]) {\n\t\t\t                return false;\n\t\t\t            }\n\t\t\t        }\n\t\t\t        return true;\n\t\t\t    }\n\t\t\t    if (globalThis.Buffer) {\n\t\t\t        if (a instanceof Buffer && b instanceof Buffer) {\n\t\t\t            // Deep level\n\t\t\t            return a.equals(b);\n\t\t\t        }\n\t\t\t    }\n\t\t\t    return false;\n\t\t\t}\n\t\t\texports.sameData = sameData;\n\t\t\t/**\n\t\t\t * @public\n\t\t\t * CRDT protocol.\n\t\t\t * Stores the latest state, and decides whenever we have\n\t\t\t * to process and store the new data in case its an update, or\n\t\t\t * to discard and send our local value cause remote it's outdated.\n\t\t\t */\n\t\t\tfunction crdtProtocol() {\n\t\t\t    /**\n\t\t\t     * Local state where we store the latest lamport timestamp\n\t\t\t     * and the raw data value\n\t\t\t     * @internal\n\t\t\t     */\n\t\t\t    const state = {};\n\t\t\t    /**\n\t\t\t     * We should call this fn in order to update the state\n\t\t\t     * @internal\n\t\t\t     */\n\t\t\t    function updateState(key, data, remoteTimestamp) {\n\t\t\t        const timestamp = Math.max(remoteTimestamp, state[key]?.timestamp || 0);\n\t\t\t        return (state[key] = { timestamp, data });\n\t\t\t    }\n\t\t\t    /**\n\t\t\t     * Create an event for the specified key and store the new data and\n\t\t\t     * lamport timestmap incremented by one in the state.\n\t\t\t     * @public\n\t\t\t     */\n\t\t\t    function createEvent(key, data) {\n\t\t\t        // Increment the timestamp\n\t\t\t        const timestamp = (state[key]?.timestamp || 0) + 1;\n\t\t\t        updateState(key, data, timestamp);\n\t\t\t        return { key, data, timestamp };\n\t\t\t    }\n\t\t\t    /**\n\t\t\t     * Process the received message only if the lamport number recieved is higher\n\t\t\t     * than the stored one. If its lower, we spread it to the network to correct the peer.\n\t\t\t     * If they are equal, the bigger raw data wins.\n\t\t\t  \n\t\t\t     * Returns the recieved data if the lamport number was bigger than ours.\n\t\t\t     * If it was an outdated message, then we return void\n\t\t\t     * @public\n\t\t\t     */\n\t\t\t    function processMessage(message) {\n\t\t\t        const { key, data, timestamp } = message;\n\t\t\t        const current = state[key];\n\t\t\t        // The received message is > than our current value, update our state.\n\t\t\t        if (!current || current.timestamp < timestamp) {\n\t\t\t            updateState(key, data, timestamp);\n\t\t\t            return message;\n\t\t\t        }\n\t\t\t        // Outdated Message. Resend our state message through the wire.\n\t\t\t        if (current.timestamp > timestamp) {\n\t\t\t            return {\n\t\t\t                key,\n\t\t\t                data: current.data,\n\t\t\t                timestamp: current.timestamp\n\t\t\t            };\n\t\t\t        }\n\t\t\t        // Same data, same timestamp. Weirdo echo message.\n\t\t\t        if (sameData(current.data, data)) {\n\t\t\t            return message;\n\t\t\t        }\n\t\t\t        // Race condition, same timestamp diff data.\n\t\t\t        function compareData(current, data) {\n\t\t\t            return current > data;\n\t\t\t        }\n\t\t\t        if (compareData(current.data, data)) {\n\t\t\t            return {\n\t\t\t                key,\n\t\t\t                data: current.data,\n\t\t\t                timestamp: current.timestamp\n\t\t\t            };\n\t\t\t        }\n\t\t\t        updateState(key, data, timestamp).data;\n\t\t\t        return message;\n\t\t\t    }\n\t\t\t    /**\n\t\t\t     * Returns the current state\n\t\t\t     * @public\n\t\t\t     */\n\t\t\t    function getState() {\n\t\t\t        return { ...state };\n\t\t\t    }\n\t\t\t    return {\n\t\t\t        createEvent,\n\t\t\t        processMessage,\n\t\t\t        getState\n\t\t\t    };\n\t\t\t}\n\t\t\texports.crdtProtocol = crdtProtocol;\n\t\t\t\n\t} (dist));\n\t\treturn dist;\n\t}\n\n\tvar distExports = requireDist();\n\n\t/**\n\t * Take the max between currentSize and intendedSize and then plus 1024. Then,\n\t *  find the next nearer multiple of 1024.\n\t * @param currentSize - number\n\t * @param intendedSize - number\n\t * @returns the calculated number\n\t */\n\tfunction getNextSize(currentSize, intendedSize) {\n\t    const minNewSize = Math.max(currentSize, intendedSize) + 1024;\n\t    return Math.ceil(minNewSize / 1024) * 1024;\n\t}\n\tconst defaultInitialCapacity = 10240;\n\t/**\n\t * ByteBuffer is a wrapper of DataView which also adds a read and write offset.\n\t *  Also in a write operation it resizes the buffer is being used if it needs.\n\t *\n\t * - Use read and write function to generate or consume data.\n\t * - Use set and get only if you are sure that you're doing.\n\t */\n\tfunction createByteBuffer(options = {}) {\n\t    var _a;\n\t    const initialROffset = ((_a = options.reading) === null || _a === void 0 ? void 0 : _a.currentOffset) || 0;\n\t    let initialBuffer = null;\n\t    let initialWOffset = 0;\n\t    if (options.writing) {\n\t        initialBuffer = options.writing.buffer;\n\t        if (options.writing.currentOffset) {\n\t            initialWOffset = options.writing.currentOffset;\n\t        }\n\t    }\n\t    else if (options.reading) {\n\t        initialBuffer = options.reading.buffer;\n\t        initialWOffset = options.reading.length || options.reading.buffer.length;\n\t    }\n\t    else {\n\t        initialBuffer = new Uint8Array(options.initialCapacity || defaultInitialCapacity);\n\t    }\n\t    let buffer = initialBuffer;\n\t    let view = new DataView(buffer.buffer, buffer.byteOffset);\n\t    let woffset = initialWOffset;\n\t    let roffset = initialROffset;\n\t    /**\n\t     * Increement the write offset and resize the buffer if it needs.\n\t     */\n\t    const woAdd = (amount) => {\n\t        if (woffset + amount > buffer.byteLength) {\n\t            const newsize = getNextSize(buffer.byteLength, woffset + amount);\n\t            const newBuffer = new Uint8Array(newsize);\n\t            newBuffer.set(buffer);\n\t            buffer = newBuffer;\n\t            view = new DataView(buffer.buffer);\n\t        }\n\t        woffset += amount;\n\t        return woffset - amount;\n\t    };\n\t    /**\n\t     * Increment the read offset and throw an error if it's trying to read\n\t     *  outside the bounds.\n\t     */\n\t    const roAdd = (amount) => {\n\t        if (roffset + amount > woffset) {\n\t            throw new Error('Outside of the bounds of writen data.');\n\t        }\n\t        roffset += amount;\n\t        return roffset - amount;\n\t    };\n\t    return {\n\t        /**\n\t         * @returns The entire current Uint8Array.\n\t         *\n\t         * WARNING: if the buffer grows, the view had changed itself,\n\t         *  and the reference will be a invalid one.\n\t         */\n\t        buffer() {\n\t            return buffer;\n\t        },\n\t        /**\n\t         * @returns The capacity of the current buffer\n\t         */\n\t        bufferLength() {\n\t            return buffer.length;\n\t        },\n\t        /**\n\t         * Resets byteBuffer to avoid creating a new one\n\t         */\n\t        resetBuffer() {\n\t            roffset = 0;\n\t            woffset = 0;\n\t        },\n\t        /**\n\t         * @returns The current read offset\n\t         */\n\t        currentReadOffset() {\n\t            return roffset;\n\t        },\n\t        /**\n\t         * @returns The current write offset\n\t         */\n\t        currentWriteOffset() {\n\t            return woffset;\n\t        },\n\t        /**\n\t         * Reading purpose\n\t         * Returns the previuos offsset size before incrementing\n\t         */\n\t        incrementReadOffset(amount) {\n\t            return roAdd(amount);\n\t        },\n\t        /**\n\t         * @returns How many bytes are available to read.\n\t         */\n\t        remainingBytes() {\n\t            return woffset - roffset;\n\t        },\n\t        readFloat32() {\n\t            return view.getFloat32(roAdd(4));\n\t        },\n\t        readFloat64() {\n\t            return view.getFloat64(roAdd(8));\n\t        },\n\t        readInt8() {\n\t            return view.getInt8(roAdd(1));\n\t        },\n\t        readInt16() {\n\t            return view.getInt16(roAdd(2));\n\t        },\n\t        readInt32() {\n\t            return view.getInt32(roAdd(4));\n\t        },\n\t        readInt64() {\n\t            return view.getBigInt64(roAdd(8));\n\t        },\n\t        readUint8() {\n\t            return view.getUint8(roAdd(1));\n\t        },\n\t        readUint16() {\n\t            return view.getUint16(roAdd(2));\n\t        },\n\t        readUint32() {\n\t            return view.getUint32(roAdd(4));\n\t        },\n\t        readUint64() {\n\t            return view.getBigUint64(roAdd(8));\n\t        },\n\t        readBuffer() {\n\t            const length = view.getUint32(roAdd(4));\n\t            return buffer.subarray(roAdd(length), roAdd(0));\n\t        },\n\t        /**\n\t         * Writing purpose\n\t         */\n\t        /**\n\t         * Increment offset\n\t         * @param amount - how many bytes\n\t         * @returns The offset when this reserving starts.\n\t         */\n\t        incrementWriteOffset(amount) {\n\t            return woAdd(amount);\n\t        },\n\t        /**\n\t         * @returns The total number of bytes writen in the buffer.\n\t         */\n\t        size() {\n\t            return woffset;\n\t        },\n\t        /**\n\t         * Take care using this function, if you modify the data after, the\n\t         * returned subarray will change too. If you'll modify the content of the\n\t         * bytebuffer, maybe you want to use toCopiedBinary()\n\t         *\n\t         * @returns The subarray from 0 to offset as reference.\n\t         */\n\t        toBinary() {\n\t            return buffer.subarray(0, woffset);\n\t        },\n\t        /**\n\t         * Safe copied buffer of the current data of ByteBuffer\n\t         *\n\t         * @returns The subarray from 0 to offset.\n\t         */\n\t        toCopiedBinary() {\n\t            return new Uint8Array(this.toBinary());\n\t        },\n\t        writeBuffer(value, writeLength = true) {\n\t            if (writeLength) {\n\t                this.writeUint32(value.byteLength);\n\t            }\n\t            const o = woAdd(value.byteLength);\n\t            buffer.set(value, o);\n\t        },\n\t        writeFloat32(value) {\n\t            const o = woAdd(4);\n\t            view.setFloat32(o, value);\n\t        },\n\t        writeFloat64(value) {\n\t            const o = woAdd(8);\n\t            view.setFloat64(o, value);\n\t        },\n\t        writeInt8(value) {\n\t            const o = woAdd(1);\n\t            view.setInt8(o, value);\n\t        },\n\t        writeInt16(value) {\n\t            const o = woAdd(2);\n\t            view.setInt16(o, value);\n\t        },\n\t        writeInt32(value) {\n\t            const o = woAdd(4);\n\t            view.setInt32(o, value);\n\t        },\n\t        writeInt64(value) {\n\t            const o = woAdd(8);\n\t            view.setBigInt64(o, value);\n\t        },\n\t        writeUint8(value) {\n\t            const o = woAdd(1);\n\t            view.setUint8(o, value);\n\t        },\n\t        writeUint16(value) {\n\t            const o = woAdd(2);\n\t            view.setUint16(o, value);\n\t        },\n\t        writeUint32(value) {\n\t            const o = woAdd(4);\n\t            view.setUint32(o, value);\n\t        },\n\t        writeUint64(value) {\n\t            const o = woAdd(8);\n\t            view.setBigUint64(o, value);\n\t        },\n\t        // Dataview Proxy\n\t        getFloat32(offset) {\n\t            return view.getFloat32(offset);\n\t        },\n\t        getFloat64(offset) {\n\t            return view.getFloat64(offset);\n\t        },\n\t        getInt8(offset) {\n\t            return view.getInt8(offset);\n\t        },\n\t        getInt16(offset) {\n\t            return view.getInt16(offset);\n\t        },\n\t        getInt32(offset) {\n\t            return view.getInt32(offset);\n\t        },\n\t        getInt64(offset) {\n\t            return view.getBigInt64(offset);\n\t        },\n\t        getUint8(offset) {\n\t            return view.getUint8(offset);\n\t        },\n\t        getUint16(offset) {\n\t            return view.getUint16(offset);\n\t        },\n\t        getUint32(offset) {\n\t            return view.getUint32(offset);\n\t        },\n\t        getUint64(offset) {\n\t            return view.getBigUint64(offset);\n\t        },\n\t        setFloat32(offset, value) {\n\t            view.setFloat32(offset, value);\n\t        },\n\t        setFloat64(offset, value) {\n\t            view.setFloat64(offset, value);\n\t        },\n\t        setInt8(offset, value) {\n\t            view.setInt8(offset, value);\n\t        },\n\t        setInt16(offset, value) {\n\t            view.setInt16(offset, value);\n\t        },\n\t        setInt32(offset, value) {\n\t            view.setInt32(offset, value);\n\t        },\n\t        setInt64(offset, value) {\n\t            view.setBigInt64(offset, value);\n\t        },\n\t        setUint8(offset, value) {\n\t            view.setUint8(offset, value);\n\t        },\n\t        setUint16(offset, value) {\n\t            view.setUint16(offset, value);\n\t        },\n\t        setUint32(offset, value) {\n\t            view.setUint32(offset, value);\n\t        },\n\t        setUint64(offset, value) {\n\t            view.setBigUint64(offset, value);\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * The wire message is the top-level message that can be packed\n\t *  inside it can contain a data with another structure or protocol\n\t *\n\t * Each wire message has three primitive property that it'll never change\n\t *   ---> length        uint32 (message size up to 4,294,967,295)\n\t *   ---> version       uint32 (for now just a number which is zero)\n\t *   ---> message type  uint32\n\t * The length indicates how many bytes are above self, the version in\n\t * combination with message type defines the set of handlers that will be\n\t * available to process the message\n\t *\n\t */\n\tvar WireMessage;\n\t(function (WireMessage) {\n\t    (function (Enum) {\n\t        Enum[Enum[\"RESERVED\"] = 0] = \"RESERVED\";\n\t        // Component Operation\n\t        Enum[Enum[\"PUT_COMPONENT\"] = 1] = \"PUT_COMPONENT\";\n\t        Enum[Enum[\"DELETE_COMPONENT\"] = 2] = \"DELETE_COMPONENT\";\n\t        Enum[Enum[\"MAX_MESSAGE_TYPE\"] = 3] = \"MAX_MESSAGE_TYPE\";\n\t    })(WireMessage.Enum || (WireMessage.Enum = {}));\n\t    WireMessage.HEADER_LENGTH = 8;\n\t    /**\n\t     * Validate if the message incoming is completed\n\t     * @param buf - ByteBuffer\n\t     */\n\t    function validate(buf) {\n\t        const rem = buf.remainingBytes();\n\t        if (rem < WireMessage.HEADER_LENGTH) {\n\t            return false;\n\t        }\n\t        const messageLength = buf.getUint32(buf.currentReadOffset());\n\t        if (rem < messageLength) {\n\t            return false;\n\t        }\n\t        return true;\n\t    }\n\t    WireMessage.validate = validate;\n\t    function readHeader(buf) {\n\t        if (!validate(buf)) {\n\t            return null;\n\t        }\n\t        return {\n\t            length: buf.readUint32(),\n\t            type: buf.readUint32()\n\t        };\n\t    }\n\t    WireMessage.readHeader = readHeader;\n\t})(WireMessage || (WireMessage = {}));\n\tvar WireMessage$1 = WireMessage;\n\n\tvar ComponentOperation;\n\t(function (ComponentOperation) {\n\t    ComponentOperation.MESSAGE_HEADER_LENGTH = 20;\n\t    /**\n\t     * Call this function for an optimal writing data passing the ByteBuffer\n\t     *  already allocated\n\t     */\n\t    function write(type, entity, timestamp, componentDefinition, buf) {\n\t        // reserve the beginning\n\t        const startMessageOffset = buf.incrementWriteOffset(WireMessage$1.HEADER_LENGTH + ComponentOperation.MESSAGE_HEADER_LENGTH);\n\t        // write body\n\t        if (type === WireMessage$1.Enum.PUT_COMPONENT) {\n\t            componentDefinition.writeToByteBuffer(entity, buf);\n\t        }\n\t        const messageLength = buf.size() - startMessageOffset;\n\t        // Write WireMessage header\n\t        buf.setUint32(startMessageOffset, messageLength);\n\t        buf.setUint32(startMessageOffset + 4, type);\n\t        // Write ComponentOperation header\n\t        buf.setUint32(startMessageOffset + 8, entity);\n\t        buf.setUint32(startMessageOffset + 12, componentDefinition._id);\n\t        buf.setUint64(startMessageOffset + 16, BigInt(timestamp));\n\t        buf.setUint32(startMessageOffset + 24, messageLength - ComponentOperation.MESSAGE_HEADER_LENGTH - WireMessage$1.HEADER_LENGTH);\n\t    }\n\t    ComponentOperation.write = write;\n\t    function read(buf) {\n\t        const header = WireMessage$1.readHeader(buf);\n\t        if (!header) {\n\t            return null;\n\t        }\n\t        const common = {\n\t            ...header,\n\t            entity: buf.readUint32(),\n\t            componentId: buf.readInt32(),\n\t            timestamp: Number(buf.readUint64())\n\t        };\n\t        if (header.type === WireMessage$1.Enum.DELETE_COMPONENT) {\n\t            return common;\n\t        }\n\t        return {\n\t            ...common,\n\t            data: buf.readBuffer()\n\t        };\n\t    }\n\t    ComponentOperation.read = read;\n\t})(ComponentOperation || (ComponentOperation = {}));\n\n\tvar CrdtUtils;\n\t(function (CrdtUtils) {\n\t    function getKey(entity, componentId) {\n\t        return `${entity}.${componentId}`;\n\t    }\n\t    CrdtUtils.getKey = getKey;\n\t    (function (SynchronizedEntityType) {\n\t        // synchronizes entities with the NetworkSynchronized component only, used for networked games\n\t        SynchronizedEntityType[SynchronizedEntityType[\"NETWORKED\"] = 0] = \"NETWORKED\";\n\t        // synchronizes entities needed by the renderer\n\t        SynchronizedEntityType[SynchronizedEntityType[\"RENDERER\"] = 1] = \"RENDERER\";\n\t    })(CrdtUtils.SynchronizedEntityType || (CrdtUtils.SynchronizedEntityType = {}));\n\t})(CrdtUtils || (CrdtUtils = {}));\n\tvar CrdtUtils$1 = CrdtUtils;\n\n\tfunction crdtSceneSystem({ engine, transports }) {\n\t    // CRDT Client\n\t    const crdtClient = distExports.crdtProtocol();\n\t    // Messages that we received at transport.onMessage waiting to be processed\n\t    const receivedMessages = [];\n\t    // Messages already processed by the engine but that we need to broadcast to other transports.\n\t    const transportMessages = [];\n\t    // Map of entities already processed at least once\n\t    transports.forEach((transport) => (transport.onmessage = parseChunkMessage(transport.type)));\n\t    /**\n\t     *\n\t     * @param transportType tranport id to identiy messages\n\t     * @returns a function to process received messages\n\t     */\n\t    function parseChunkMessage(transportType) {\n\t        /**\n\t         * Receives a chunk of binary messages and stores all the valid\n\t         * Component Operation Messages at messages queue\n\t         * @param chunkMessage A chunk of binary messages\n\t         */\n\t        return function parseChunkMessage(chunkMessage) {\n\t            const buffer = createByteBuffer({\n\t                reading: { buffer: chunkMessage, currentOffset: 0 }\n\t            });\n\t            while (WireMessage$1.validate(buffer)) {\n\t                const offset = buffer.currentReadOffset();\n\t                const message = ComponentOperation.read(buffer);\n\t                const { type, entity, componentId, data, timestamp } = message;\n\t                receivedMessages.push({\n\t                    type,\n\t                    entity,\n\t                    componentId,\n\t                    data,\n\t                    timestamp,\n\t                    transportType,\n\t                    messageBuffer: buffer\n\t                        .buffer()\n\t                        .subarray(offset, buffer.currentReadOffset())\n\t                });\n\t            }\n\t        };\n\t    }\n\t    /**\n\t     * Return and clear the messaes queue\n\t     * @returns messages recieved by the transport to process on the next tick\n\t     */\n\t    function getMessages(value) {\n\t        const messagesToProcess = Array.from(value);\n\t        value.length = 0;\n\t        return messagesToProcess;\n\t    }\n\t    /**\n\t     * This fn will be called on every tick.\n\t     * Process all the messages queue received by the transport\n\t     */\n\t    function receiveMessages() {\n\t        const messagesToProcess = getMessages(receivedMessages);\n\t        for (const transport of transports) {\n\t            const buffer = createByteBuffer();\n\t            for (const message of messagesToProcess) {\n\t                const { data, timestamp, componentId, entity, type } = message;\n\t                const crdtMessage = {\n\t                    key: CrdtUtils$1.getKey(entity, componentId),\n\t                    data: data || null,\n\t                    timestamp: timestamp\n\t                };\n\t                const component = engine.getComponent(componentId);\n\t                const current = crdtClient.processMessage(crdtMessage);\n\t                // CRDT outdated message. Resend this message through the wire\n\t                if (crdtMessage !== current) {\n\t                    const type = component.has(entity)\n\t                        ? WireMessage$1.Enum.PUT_COMPONENT\n\t                        : WireMessage$1.Enum.DELETE_COMPONENT;\n\t                    ComponentOperation.write(type, entity, current.timestamp, component, buffer);\n\t                }\n\t                else {\n\t                    // Process CRDT Message\n\t                    if (type === WireMessage$1.Enum.DELETE_COMPONENT) {\n\t                        component.deleteFrom(entity);\n\t                    }\n\t                    else {\n\t                        const opts = {\n\t                            reading: { buffer: message.data, currentOffset: 0 }\n\t                        };\n\t                        const bb = createByteBuffer(opts);\n\t                        // Update engine component\n\t                        component.upsertFromBinary(message.entity, bb);\n\t                        component.clearDirty();\n\t                    }\n\t                    // Add message to transport queue to be processed by others transports\n\t                    transportMessages.push(message);\n\t                }\n\t            }\n\t            if (buffer.size()) {\n\t                transport.send(buffer.toBinary());\n\t            }\n\t        }\n\t    }\n\t    /**\n\t     * Iterates the dirty map and generates crdt messages to be send\n\t     * @param dirtyMap a map of { entities: [componentId] }\n\t     */\n\t    function createMessages(dirtyMap) {\n\t        // CRDT Messages will be the merge between the recieved transport messages and the new crdt messages\n\t        const crdtMessages = getMessages(transportMessages);\n\t        const buffer = createByteBuffer();\n\t        for (const [entity, componentsId] of dirtyMap) {\n\t            for (const componentId of componentsId) {\n\t                const component = engine.getComponent(componentId);\n\t                const entityComponent = component.has(entity)\n\t                    ? component.toBinary(entity).toBinary()\n\t                    : null;\n\t                const event = crdtClient.createEvent(CrdtUtils$1.getKey(entity, componentId), entityComponent);\n\t                const offset = buffer.currentWriteOffset();\n\t                const type = component.has(entity)\n\t                    ? WireMessage$1.Enum.PUT_COMPONENT\n\t                    : WireMessage$1.Enum.DELETE_COMPONENT;\n\t                const transportMessage = {\n\t                    type,\n\t                    componentId,\n\t                    entity,\n\t                    timestamp: event.timestamp\n\t                };\n\t                if (transports.some((t) => t.filter(transportMessage))) {\n\t                    ComponentOperation.write(type, entity, event.timestamp, component, buffer);\n\t                    crdtMessages.push({\n\t                        ...transportMessage,\n\t                        messageBuffer: buffer\n\t                            .buffer()\n\t                            .subarray(offset, buffer.currentWriteOffset())\n\t                    });\n\t                }\n\t            }\n\t        }\n\t        // Send messages to transports\n\t        const transportBuffer = createByteBuffer();\n\t        for (const transport of transports) {\n\t            transportBuffer.resetBuffer();\n\t            for (const message of crdtMessages) {\n\t                if (transport.filter(message)) {\n\t                    transportBuffer.writeBuffer(message.messageBuffer, false);\n\t                }\n\t            }\n\t            if (transportBuffer.size()) {\n\t                transport.send(transportBuffer.toBinary());\n\t            }\n\t        }\n\t    }\n\t    return {\n\t        createMessages,\n\t        receiveMessages\n\t    };\n\t}\n\n\tvar EntityUtils;\n\t(function (EntityUtils) {\n\t    EntityUtils.MAX_ENTITIES = 0xffffffff;\n\t    EntityUtils.DYNAMIC_ENTITIES_START_AT = 100e3;\n\t    EntityUtils.RESERVED_STATIC_ENTITIES = 512;\n\t    EntityUtils.RESERVED_ENTITIES_RANGE = [\n\t        0,\n\t        EntityUtils.RESERVED_STATIC_ENTITIES - 1\n\t    ];\n\t    EntityUtils.STATIC_ENTITIES_RANGE = [\n\t        EntityUtils.RESERVED_STATIC_ENTITIES,\n\t        EntityUtils.DYNAMIC_ENTITIES_START_AT - 1\n\t    ];\n\t    EntityUtils.DYNAMIC_ENTITIES_RANGE = [\n\t        EntityUtils.DYNAMIC_ENTITIES_START_AT,\n\t        EntityUtils.MAX_ENTITIES\n\t    ];\n\t    function isInRange(entity, range) {\n\t        return entity >= range[0] && entity <= range[1];\n\t    }\n\t    function isDynamicEntity(entity) {\n\t        return isInRange(entity, EntityUtils.DYNAMIC_ENTITIES_RANGE);\n\t    }\n\t    EntityUtils.isDynamicEntity = isDynamicEntity;\n\t    function isStaticEntity(entity) {\n\t        return isInRange(entity, EntityUtils.STATIC_ENTITIES_RANGE);\n\t    }\n\t    EntityUtils.isStaticEntity = isStaticEntity;\n\t    function isReservedEntity(entity) {\n\t        return isInRange(entity, EntityUtils.RESERVED_ENTITIES_RANGE);\n\t    }\n\t    EntityUtils.isReservedEntity = isReservedEntity;\n\t})(EntityUtils || (EntityUtils = {}));\n\n\tfunction EntityContainer() {\n\t    const staticEntity = Entity(EntityUtils.STATIC_ENTITIES_RANGE);\n\t    const dynamicEntity = Entity(EntityUtils.DYNAMIC_ENTITIES_RANGE);\n\t    return {\n\t        generateEntity(dynamic = false) {\n\t            if (dynamic) {\n\t                return dynamicEntity.generateEntity();\n\t            }\n\t            else {\n\t                return staticEntity.generateEntity();\n\t            }\n\t        },\n\t        removeEntity(entity) {\n\t            return (staticEntity.removeEntity(entity) || dynamicEntity.removeEntity(entity));\n\t        },\n\t        isEntityExists(entity) {\n\t            return (EntityUtils.isReservedEntity(entity) ||\n\t                staticEntity.getExistingEntities().has(entity) ||\n\t                dynamicEntity.getExistingEntities().has(entity));\n\t        },\n\t        getExistingEntities() {\n\t            return new Set([\n\t                ...staticEntity.getExistingEntities(),\n\t                ...dynamicEntity.getExistingEntities()\n\t            ]);\n\t        }\n\t    };\n\t}\n\tfunction Entity(range) {\n\t    function createEntity(entity) {\n\t        return entity;\n\t    }\n\t    let entityCounter = range[0];\n\t    const usedEntities = new Set();\n\t    function generateEntity() {\n\t        if (entityCounter >= range[1]) {\n\t            throw new Error(`It fails trying to generate an entity out of range [${range[0]}, ${range[1]}].`);\n\t        }\n\t        const entity = createEntity(entityCounter);\n\t        entityCounter++;\n\t        usedEntities.add(entity);\n\t        return entity;\n\t    }\n\t    function removeEntity(entity) {\n\t        return usedEntities.delete(entity);\n\t    }\n\t    return {\n\t        getExistingEntities() {\n\t            return new Set(usedEntities);\n\t        },\n\t        generateEntity,\n\t        removeEntity\n\t    };\n\t}\n\n\tfunction deepReadonly(val) {\n\t    // Fail only on development due to perf issues\n\t    // if (isProd()) {\n\t    //   return val\n\t    // }\n\t    return Object.freeze({ ...val });\n\t}\n\n\tfunction defineComponent(componentId, spec\n\t// meta: { syncFlags }\n\t) {\n\t    const data = new Map();\n\t    const dirtyIterator = new Set();\n\t    return {\n\t        _id: componentId,\n\t        default: function () {\n\t            return spec.create();\n\t        },\n\t        isDirty: function (entity) {\n\t            return dirtyIterator.has(entity);\n\t        },\n\t        has: function (entity) {\n\t            return data.has(entity);\n\t        },\n\t        deleteFrom: function (entity) {\n\t            const component = data.get(entity);\n\t            data.delete(entity);\n\t            dirtyIterator.add(entity);\n\t            return component || null;\n\t        },\n\t        getOrNull: function (entity) {\n\t            const component = data.get(entity);\n\t            return component ? deepReadonly(component) : null;\n\t        },\n\t        get: function (entity) {\n\t            const component = data.get(entity);\n\t            if (!component) {\n\t                throw new Error(`[getFrom] Component ${componentId} for ${entity} not found`);\n\t            }\n\t            return deepReadonly(component);\n\t        },\n\t        create: function (entity, value) {\n\t            const component = data.get(entity);\n\t            if (component) {\n\t                throw new Error(`[create] Component ${componentId} for ${entity} already exists`);\n\t            }\n\t            const usedValue = value === undefined ? spec.create() : value;\n\t            data.set(entity, usedValue);\n\t            dirtyIterator.add(entity);\n\t            return usedValue;\n\t        },\n\t        createOrReplace: function (entity, value) {\n\t            const usedValue = value === undefined ? spec.create() : value;\n\t            data.set(entity, usedValue);\n\t            dirtyIterator.add(entity);\n\t            return usedValue;\n\t        },\n\t        getMutableOrNull: function (entity) {\n\t            const component = data.get(entity);\n\t            if (!component) {\n\t                return null;\n\t            }\n\t            dirtyIterator.add(entity);\n\t            return component;\n\t        },\n\t        getMutable: function (entity) {\n\t            const component = this.getMutableOrNull(entity);\n\t            if (component === null) {\n\t                throw new Error(`[mutable] Component ${componentId} for ${entity} not found`);\n\t            }\n\t            return component;\n\t        },\n\t        iterator: function* () {\n\t            for (const [entity, component] of data) {\n\t                yield [entity, component];\n\t            }\n\t        },\n\t        dirtyIterator: function* () {\n\t            for (const entity of dirtyIterator) {\n\t                yield entity;\n\t            }\n\t        },\n\t        toBinary(entity) {\n\t            const component = data.get(entity);\n\t            if (!component) {\n\t                throw new Error(`[toBinary] Component ${componentId} for ${entity} not found`);\n\t            }\n\t            const writeBuffer = createByteBuffer();\n\t            spec.serialize(component, writeBuffer);\n\t            return writeBuffer;\n\t        },\n\t        writeToByteBuffer(entity, buffer) {\n\t            const component = data.get(entity);\n\t            if (!component) {\n\t                throw new Error(`[writeToByteBuffer] Component ${componentId} for ${entity} not found`);\n\t            }\n\t            spec.serialize(component, buffer);\n\t        },\n\t        updateFromBinary(entity, buffer) {\n\t            const component = data.get(entity);\n\t            if (!component) {\n\t                throw new Error(`[updateFromBinary] Component ${componentId} for ${entity} not found`);\n\t            }\n\t            return this.upsertFromBinary(entity, buffer);\n\t        },\n\t        upsertFromBinary(entity, buffer) {\n\t            const newValue = spec.deserialize(buffer);\n\t            data.set(entity, newValue);\n\t            dirtyIterator.add(entity);\n\t            return newValue;\n\t        },\n\t        clearDirty: function () {\n\t            dirtyIterator.clear();\n\t        }\n\t    };\n\t}\n\n\tconst SYSTEMS_REGULAR_PRIORITY = 100e3;\n\tfunction SystemContainer() {\n\t    const systems = [];\n\t    function sort() {\n\t        systems.sort((a, b) => b.priority - a.priority);\n\t    }\n\t    function add(fn, priority, name) {\n\t        if (systems.find((item) => item.fn === fn)) {\n\t            throw new Error('System already added');\n\t        }\n\t        else if (name && systems.find((item) => item.name === name)) {\n\t            throw new Error('System name already used');\n\t        }\n\t        systems.push({\n\t            fn,\n\t            priority,\n\t            name\n\t        });\n\t        sort();\n\t    }\n\t    function remove(selector) {\n\t        let index = -1;\n\t        if (typeof selector === 'string') {\n\t            index = systems.findIndex((item) => item.name === selector);\n\t        }\n\t        else {\n\t            index = systems.findIndex((item) => item.fn === selector);\n\t        }\n\t        if (index === -1) {\n\t            return false;\n\t        }\n\t        systems.splice(index, 1);\n\t        sort();\n\t        return true;\n\t    }\n\t    return {\n\t        add,\n\t        remove,\n\t        getSystems() {\n\t            return systems;\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$j = 1;\n\t/** @internal */\n\tconst TRANSFORM_LENGTH = 44;\n\t/** @internal */\n\tconst TransformSchema = {\n\t    serialize(value, builder) {\n\t        const ptr = builder.incrementWriteOffset(TRANSFORM_LENGTH);\n\t        builder.setFloat32(ptr, value.position.x);\n\t        builder.setFloat32(ptr + 4, value.position.y);\n\t        builder.setFloat32(ptr + 8, value.position.z);\n\t        builder.setFloat32(ptr + 12, value.rotation.x);\n\t        builder.setFloat32(ptr + 16, value.rotation.y);\n\t        builder.setFloat32(ptr + 20, value.rotation.z);\n\t        builder.setFloat32(ptr + 24, value.rotation.w);\n\t        builder.setFloat32(ptr + 28, value.scale.x);\n\t        builder.setFloat32(ptr + 32, value.scale.y);\n\t        builder.setFloat32(ptr + 36, value.scale.z);\n\t        builder.setUint32(ptr + 40, value.parent || 0);\n\t    },\n\t    deserialize(reader) {\n\t        const ptr = reader.incrementReadOffset(TRANSFORM_LENGTH);\n\t        return {\n\t            position: {\n\t                x: reader.getFloat32(ptr),\n\t                y: reader.getFloat32(ptr + 4),\n\t                z: reader.getFloat32(ptr + 8)\n\t            },\n\t            rotation: {\n\t                x: reader.getFloat32(ptr + 12),\n\t                y: reader.getFloat32(ptr + 16),\n\t                z: reader.getFloat32(ptr + 20),\n\t                w: reader.getFloat32(ptr + 24)\n\t            },\n\t            scale: {\n\t                x: reader.getFloat32(ptr + 28),\n\t                y: reader.getFloat32(ptr + 32),\n\t                z: reader.getFloat32(ptr + 36)\n\t            },\n\t            parent: reader.getUint32(ptr + 40)\n\t        };\n\t    },\n\t    create() {\n\t        return {\n\t            position: { x: 0, y: 0, z: 0 },\n\t            scale: { x: 1, y: 1, z: 1 },\n\t            rotation: { x: 0, y: 0, z: 0, w: 1 },\n\t            parent: undefined\n\t        };\n\t    }\n\t};\n\n\tvar minimal$1 = {exports: {}};\n\n\tvar indexMinimal = {};\n\n\tvar minimal = {};\n\n\tvar aspromise;\n\tvar hasRequiredAspromise;\n\n\tfunction requireAspromise () {\n\t\tif (hasRequiredAspromise) return aspromise;\n\t\thasRequiredAspromise = 1;\n\t\taspromise = asPromise;\r\n\r\n\t\t/**\r\n\t\t * Callback as used by {@link util.asPromise}.\r\n\t\t * @typedef asPromiseCallback\r\n\t\t * @type {function}\r\n\t\t * @param {Error|null} error Error, if any\r\n\t\t * @param {...*} params Additional arguments\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Returns a promise from a node-style callback function.\r\n\t\t * @memberof util\r\n\t\t * @param {asPromiseCallback} fn Function to call\r\n\t\t * @param {*} ctx Function context\r\n\t\t * @param {...*} params Function arguments\r\n\t\t * @returns {Promise<*>} Promisified function\r\n\t\t */\r\n\t\tfunction asPromise(fn, ctx/*, varargs */) {\r\n\t\t    var params  = new Array(arguments.length - 1),\r\n\t\t        offset  = 0,\r\n\t\t        index   = 2,\r\n\t\t        pending = true;\r\n\t\t    while (index < arguments.length)\r\n\t\t        params[offset++] = arguments[index++];\r\n\t\t    return new Promise(function executor(resolve, reject) {\r\n\t\t        params[offset] = function callback(err/*, varargs */) {\r\n\t\t            if (pending) {\r\n\t\t                pending = false;\r\n\t\t                if (err)\r\n\t\t                    reject(err);\r\n\t\t                else {\r\n\t\t                    var params = new Array(arguments.length - 1),\r\n\t\t                        offset = 0;\r\n\t\t                    while (offset < params.length)\r\n\t\t                        params[offset++] = arguments[offset];\r\n\t\t                    resolve.apply(null, params);\r\n\t\t                }\r\n\t\t            }\r\n\t\t        };\r\n\t\t        try {\r\n\t\t            fn.apply(ctx || null, params);\r\n\t\t        } catch (err) {\r\n\t\t            if (pending) {\r\n\t\t                pending = false;\r\n\t\t                reject(err);\r\n\t\t            }\r\n\t\t        }\r\n\t\t    });\r\n\t\t}\n\t\treturn aspromise;\n\t}\n\n\tvar base64 = {};\n\n\tvar hasRequiredBase64;\n\n\tfunction requireBase64 () {\n\t\tif (hasRequiredBase64) return base64;\n\t\thasRequiredBase64 = 1;\n\t\t(function (exports) {\n\r\n\t\t\t/**\r\n\t\t\t * A minimal base64 implementation for number arrays.\r\n\t\t\t * @memberof util\r\n\t\t\t * @namespace\r\n\t\t\t */\r\n\t\t\tvar base64 = exports;\r\n\r\n\t\t\t/**\r\n\t\t\t * Calculates the byte length of a base64 encoded string.\r\n\t\t\t * @param {string} string Base64 encoded string\r\n\t\t\t * @returns {number} Byte length\r\n\t\t\t */\r\n\t\t\tbase64.length = function length(string) {\r\n\t\t\t    var p = string.length;\r\n\t\t\t    if (!p)\r\n\t\t\t        return 0;\r\n\t\t\t    var n = 0;\r\n\t\t\t    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n\t\t\t        ++n;\r\n\t\t\t    return Math.ceil(string.length * 3) / 4 - n;\r\n\t\t\t};\r\n\r\n\t\t\t// Base64 encoding table\r\n\t\t\tvar b64 = new Array(64);\r\n\r\n\t\t\t// Base64 decoding table\r\n\t\t\tvar s64 = new Array(123);\r\n\r\n\t\t\t// 65..90, 97..122, 48..57, 43, 47\r\n\t\t\tfor (var i = 0; i < 64;)\r\n\t\t\t    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n\t\t\t/**\r\n\t\t\t * Encodes a buffer to a base64 encoded string.\r\n\t\t\t * @param {Uint8Array} buffer Source buffer\r\n\t\t\t * @param {number} start Source start\r\n\t\t\t * @param {number} end Source end\r\n\t\t\t * @returns {string} Base64 encoded string\r\n\t\t\t */\r\n\t\t\tbase64.encode = function encode(buffer, start, end) {\r\n\t\t\t    var parts = null,\r\n\t\t\t        chunk = [];\r\n\t\t\t    var i = 0, // output index\r\n\t\t\t        j = 0, // goto index\r\n\t\t\t        t;     // temporary\r\n\t\t\t    while (start < end) {\r\n\t\t\t        var b = buffer[start++];\r\n\t\t\t        switch (j) {\r\n\t\t\t            case 0:\r\n\t\t\t                chunk[i++] = b64[b >> 2];\r\n\t\t\t                t = (b & 3) << 4;\r\n\t\t\t                j = 1;\r\n\t\t\t                break;\r\n\t\t\t            case 1:\r\n\t\t\t                chunk[i++] = b64[t | b >> 4];\r\n\t\t\t                t = (b & 15) << 2;\r\n\t\t\t                j = 2;\r\n\t\t\t                break;\r\n\t\t\t            case 2:\r\n\t\t\t                chunk[i++] = b64[t | b >> 6];\r\n\t\t\t                chunk[i++] = b64[b & 63];\r\n\t\t\t                j = 0;\r\n\t\t\t                break;\r\n\t\t\t        }\r\n\t\t\t        if (i > 8191) {\r\n\t\t\t            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n\t\t\t            i = 0;\r\n\t\t\t        }\r\n\t\t\t    }\r\n\t\t\t    if (j) {\r\n\t\t\t        chunk[i++] = b64[t];\r\n\t\t\t        chunk[i++] = 61;\r\n\t\t\t        if (j === 1)\r\n\t\t\t            chunk[i++] = 61;\r\n\t\t\t    }\r\n\t\t\t    if (parts) {\r\n\t\t\t        if (i)\r\n\t\t\t            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n\t\t\t        return parts.join(\"\");\r\n\t\t\t    }\r\n\t\t\t    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n\t\t\t};\r\n\r\n\t\t\tvar invalidEncoding = \"invalid encoding\";\r\n\r\n\t\t\t/**\r\n\t\t\t * Decodes a base64 encoded string to a buffer.\r\n\t\t\t * @param {string} string Source string\r\n\t\t\t * @param {Uint8Array} buffer Destination buffer\r\n\t\t\t * @param {number} offset Destination offset\r\n\t\t\t * @returns {number} Number of bytes written\r\n\t\t\t * @throws {Error} If encoding is invalid\r\n\t\t\t */\r\n\t\t\tbase64.decode = function decode(string, buffer, offset) {\r\n\t\t\t    var start = offset;\r\n\t\t\t    var j = 0, // goto index\r\n\t\t\t        t;     // temporary\r\n\t\t\t    for (var i = 0; i < string.length;) {\r\n\t\t\t        var c = string.charCodeAt(i++);\r\n\t\t\t        if (c === 61 && j > 1)\r\n\t\t\t            break;\r\n\t\t\t        if ((c = s64[c]) === undefined)\r\n\t\t\t            throw Error(invalidEncoding);\r\n\t\t\t        switch (j) {\r\n\t\t\t            case 0:\r\n\t\t\t                t = c;\r\n\t\t\t                j = 1;\r\n\t\t\t                break;\r\n\t\t\t            case 1:\r\n\t\t\t                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n\t\t\t                t = c;\r\n\t\t\t                j = 2;\r\n\t\t\t                break;\r\n\t\t\t            case 2:\r\n\t\t\t                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n\t\t\t                t = c;\r\n\t\t\t                j = 3;\r\n\t\t\t                break;\r\n\t\t\t            case 3:\r\n\t\t\t                buffer[offset++] = (t & 3) << 6 | c;\r\n\t\t\t                j = 0;\r\n\t\t\t                break;\r\n\t\t\t        }\r\n\t\t\t    }\r\n\t\t\t    if (j === 1)\r\n\t\t\t        throw Error(invalidEncoding);\r\n\t\t\t    return offset - start;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Tests if the specified string appears to be base64 encoded.\r\n\t\t\t * @param {string} string String to test\r\n\t\t\t * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n\t\t\t */\r\n\t\t\tbase64.test = function test(string) {\r\n\t\t\t    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n\t\t\t};\n\t} (base64));\n\t\treturn base64;\n\t}\n\n\tvar eventemitter;\n\tvar hasRequiredEventemitter;\n\n\tfunction requireEventemitter () {\n\t\tif (hasRequiredEventemitter) return eventemitter;\n\t\thasRequiredEventemitter = 1;\n\t\teventemitter = EventEmitter;\r\n\r\n\t\t/**\r\n\t\t * Constructs a new event emitter instance.\r\n\t\t * @classdesc A minimal event emitter.\r\n\t\t * @memberof util\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tfunction EventEmitter() {\r\n\r\n\t\t    /**\r\n\t\t     * Registered listeners.\r\n\t\t     * @type {Object.<string,*>}\r\n\t\t     * @private\r\n\t\t     */\r\n\t\t    this._listeners = {};\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Registers an event listener.\r\n\t\t * @param {string} evt Event name\r\n\t\t * @param {function} fn Listener\r\n\t\t * @param {*} [ctx] Listener context\r\n\t\t * @returns {util.EventEmitter} `this`\r\n\t\t */\r\n\t\tEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n\t\t    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n\t\t        fn  : fn,\r\n\t\t        ctx : ctx || this\r\n\t\t    });\r\n\t\t    return this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Removes an event listener or any matching listeners if arguments are omitted.\r\n\t\t * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n\t\t * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n\t\t * @returns {util.EventEmitter} `this`\r\n\t\t */\r\n\t\tEventEmitter.prototype.off = function off(evt, fn) {\r\n\t\t    if (evt === undefined)\r\n\t\t        this._listeners = {};\r\n\t\t    else {\r\n\t\t        if (fn === undefined)\r\n\t\t            this._listeners[evt] = [];\r\n\t\t        else {\r\n\t\t            var listeners = this._listeners[evt];\r\n\t\t            for (var i = 0; i < listeners.length;)\r\n\t\t                if (listeners[i].fn === fn)\r\n\t\t                    listeners.splice(i, 1);\r\n\t\t                else\r\n\t\t                    ++i;\r\n\t\t        }\r\n\t\t    }\r\n\t\t    return this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Emits an event by calling its listeners with the specified arguments.\r\n\t\t * @param {string} evt Event name\r\n\t\t * @param {...*} args Arguments\r\n\t\t * @returns {util.EventEmitter} `this`\r\n\t\t */\r\n\t\tEventEmitter.prototype.emit = function emit(evt) {\r\n\t\t    var listeners = this._listeners[evt];\r\n\t\t    if (listeners) {\r\n\t\t        var args = [],\r\n\t\t            i = 1;\r\n\t\t        for (; i < arguments.length;)\r\n\t\t            args.push(arguments[i++]);\r\n\t\t        for (i = 0; i < listeners.length;)\r\n\t\t            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n\t\t    }\r\n\t\t    return this;\r\n\t\t};\n\t\treturn eventemitter;\n\t}\n\n\tvar float;\n\tvar hasRequiredFloat;\n\n\tfunction requireFloat () {\n\t\tif (hasRequiredFloat) return float;\n\t\thasRequiredFloat = 1;\n\r\n\t\tfloat = factory(factory);\r\n\r\n\t\t/**\r\n\t\t * Reads / writes floats / doubles from / to buffers.\r\n\t\t * @name util.float\r\n\t\t * @namespace\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Writes a 32 bit float to a buffer using little endian byte order.\r\n\t\t * @name util.float.writeFloatLE\r\n\t\t * @function\r\n\t\t * @param {number} val Value to write\r\n\t\t * @param {Uint8Array} buf Target buffer\r\n\t\t * @param {number} pos Target buffer offset\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Writes a 32 bit float to a buffer using big endian byte order.\r\n\t\t * @name util.float.writeFloatBE\r\n\t\t * @function\r\n\t\t * @param {number} val Value to write\r\n\t\t * @param {Uint8Array} buf Target buffer\r\n\t\t * @param {number} pos Target buffer offset\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Reads a 32 bit float from a buffer using little endian byte order.\r\n\t\t * @name util.float.readFloatLE\r\n\t\t * @function\r\n\t\t * @param {Uint8Array} buf Source buffer\r\n\t\t * @param {number} pos Source buffer offset\r\n\t\t * @returns {number} Value read\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Reads a 32 bit float from a buffer using big endian byte order.\r\n\t\t * @name util.float.readFloatBE\r\n\t\t * @function\r\n\t\t * @param {Uint8Array} buf Source buffer\r\n\t\t * @param {number} pos Source buffer offset\r\n\t\t * @returns {number} Value read\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Writes a 64 bit double to a buffer using little endian byte order.\r\n\t\t * @name util.float.writeDoubleLE\r\n\t\t * @function\r\n\t\t * @param {number} val Value to write\r\n\t\t * @param {Uint8Array} buf Target buffer\r\n\t\t * @param {number} pos Target buffer offset\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Writes a 64 bit double to a buffer using big endian byte order.\r\n\t\t * @name util.float.writeDoubleBE\r\n\t\t * @function\r\n\t\t * @param {number} val Value to write\r\n\t\t * @param {Uint8Array} buf Target buffer\r\n\t\t * @param {number} pos Target buffer offset\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Reads a 64 bit double from a buffer using little endian byte order.\r\n\t\t * @name util.float.readDoubleLE\r\n\t\t * @function\r\n\t\t * @param {Uint8Array} buf Source buffer\r\n\t\t * @param {number} pos Source buffer offset\r\n\t\t * @returns {number} Value read\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Reads a 64 bit double from a buffer using big endian byte order.\r\n\t\t * @name util.float.readDoubleBE\r\n\t\t * @function\r\n\t\t * @param {Uint8Array} buf Source buffer\r\n\t\t * @param {number} pos Source buffer offset\r\n\t\t * @returns {number} Value read\r\n\t\t */\r\n\r\n\t\t// Factory function for the purpose of node-based testing in modified global environments\r\n\t\tfunction factory(exports) {\r\n\r\n\t\t    // float: typed array\r\n\t\t    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n\t\t        var f32 = new Float32Array([ -0 ]),\r\n\t\t            f8b = new Uint8Array(f32.buffer),\r\n\t\t            le  = f8b[3] === 128;\r\n\r\n\t\t        function writeFloat_f32_cpy(val, buf, pos) {\r\n\t\t            f32[0] = val;\r\n\t\t            buf[pos    ] = f8b[0];\r\n\t\t            buf[pos + 1] = f8b[1];\r\n\t\t            buf[pos + 2] = f8b[2];\r\n\t\t            buf[pos + 3] = f8b[3];\r\n\t\t        }\r\n\r\n\t\t        function writeFloat_f32_rev(val, buf, pos) {\r\n\t\t            f32[0] = val;\r\n\t\t            buf[pos    ] = f8b[3];\r\n\t\t            buf[pos + 1] = f8b[2];\r\n\t\t            buf[pos + 2] = f8b[1];\r\n\t\t            buf[pos + 3] = f8b[0];\r\n\t\t        }\r\n\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n\t\t        function readFloat_f32_cpy(buf, pos) {\r\n\t\t            f8b[0] = buf[pos    ];\r\n\t\t            f8b[1] = buf[pos + 1];\r\n\t\t            f8b[2] = buf[pos + 2];\r\n\t\t            f8b[3] = buf[pos + 3];\r\n\t\t            return f32[0];\r\n\t\t        }\r\n\r\n\t\t        function readFloat_f32_rev(buf, pos) {\r\n\t\t            f8b[3] = buf[pos    ];\r\n\t\t            f8b[2] = buf[pos + 1];\r\n\t\t            f8b[1] = buf[pos + 2];\r\n\t\t            f8b[0] = buf[pos + 3];\r\n\t\t            return f32[0];\r\n\t\t        }\r\n\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n\t\t    // float: ieee754\r\n\t\t    })(); else (function() {\r\n\r\n\t\t        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n\t\t            var sign = val < 0 ? 1 : 0;\r\n\t\t            if (sign)\r\n\t\t                val = -val;\r\n\t\t            if (val === 0)\r\n\t\t                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n\t\t            else if (isNaN(val))\r\n\t\t                writeUint(2143289344, buf, pos);\r\n\t\t            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n\t\t                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n\t\t            else if (val < 1.1754943508222875e-38) // denormal\r\n\t\t                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n\t\t            else {\r\n\t\t                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n\t\t                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n\t\t                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n\t\t            }\r\n\t\t        }\r\n\r\n\t\t        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n\t\t        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n\t\t        function readFloat_ieee754(readUint, buf, pos) {\r\n\t\t            var uint = readUint(buf, pos),\r\n\t\t                sign = (uint >> 31) * 2 + 1,\r\n\t\t                exponent = uint >>> 23 & 255,\r\n\t\t                mantissa = uint & 8388607;\r\n\t\t            return exponent === 255\r\n\t\t                ? mantissa\r\n\t\t                ? NaN\r\n\t\t                : sign * Infinity\r\n\t\t                : exponent === 0 // denormal\r\n\t\t                ? sign * 1.401298464324817e-45 * mantissa\r\n\t\t                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n\t\t        }\r\n\r\n\t\t        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n\t\t        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n\t\t    })();\r\n\r\n\t\t    // double: typed array\r\n\t\t    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n\t\t        var f64 = new Float64Array([-0]),\r\n\t\t            f8b = new Uint8Array(f64.buffer),\r\n\t\t            le  = f8b[7] === 128;\r\n\r\n\t\t        function writeDouble_f64_cpy(val, buf, pos) {\r\n\t\t            f64[0] = val;\r\n\t\t            buf[pos    ] = f8b[0];\r\n\t\t            buf[pos + 1] = f8b[1];\r\n\t\t            buf[pos + 2] = f8b[2];\r\n\t\t            buf[pos + 3] = f8b[3];\r\n\t\t            buf[pos + 4] = f8b[4];\r\n\t\t            buf[pos + 5] = f8b[5];\r\n\t\t            buf[pos + 6] = f8b[6];\r\n\t\t            buf[pos + 7] = f8b[7];\r\n\t\t        }\r\n\r\n\t\t        function writeDouble_f64_rev(val, buf, pos) {\r\n\t\t            f64[0] = val;\r\n\t\t            buf[pos    ] = f8b[7];\r\n\t\t            buf[pos + 1] = f8b[6];\r\n\t\t            buf[pos + 2] = f8b[5];\r\n\t\t            buf[pos + 3] = f8b[4];\r\n\t\t            buf[pos + 4] = f8b[3];\r\n\t\t            buf[pos + 5] = f8b[2];\r\n\t\t            buf[pos + 6] = f8b[1];\r\n\t\t            buf[pos + 7] = f8b[0];\r\n\t\t        }\r\n\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n\t\t        function readDouble_f64_cpy(buf, pos) {\r\n\t\t            f8b[0] = buf[pos    ];\r\n\t\t            f8b[1] = buf[pos + 1];\r\n\t\t            f8b[2] = buf[pos + 2];\r\n\t\t            f8b[3] = buf[pos + 3];\r\n\t\t            f8b[4] = buf[pos + 4];\r\n\t\t            f8b[5] = buf[pos + 5];\r\n\t\t            f8b[6] = buf[pos + 6];\r\n\t\t            f8b[7] = buf[pos + 7];\r\n\t\t            return f64[0];\r\n\t\t        }\r\n\r\n\t\t        function readDouble_f64_rev(buf, pos) {\r\n\t\t            f8b[7] = buf[pos    ];\r\n\t\t            f8b[6] = buf[pos + 1];\r\n\t\t            f8b[5] = buf[pos + 2];\r\n\t\t            f8b[4] = buf[pos + 3];\r\n\t\t            f8b[3] = buf[pos + 4];\r\n\t\t            f8b[2] = buf[pos + 5];\r\n\t\t            f8b[1] = buf[pos + 6];\r\n\t\t            f8b[0] = buf[pos + 7];\r\n\t\t            return f64[0];\r\n\t\t        }\r\n\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n\t\t    // double: ieee754\r\n\t\t    })(); else (function() {\r\n\r\n\t\t        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n\t\t            var sign = val < 0 ? 1 : 0;\r\n\t\t            if (sign)\r\n\t\t                val = -val;\r\n\t\t            if (val === 0) {\r\n\t\t                writeUint(0, buf, pos + off0);\r\n\t\t                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n\t\t            } else if (isNaN(val)) {\r\n\t\t                writeUint(0, buf, pos + off0);\r\n\t\t                writeUint(2146959360, buf, pos + off1);\r\n\t\t            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n\t\t                writeUint(0, buf, pos + off0);\r\n\t\t                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n\t\t            } else {\r\n\t\t                var mantissa;\r\n\t\t                if (val < 2.2250738585072014e-308) { // denormal\r\n\t\t                    mantissa = val / 5e-324;\r\n\t\t                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n\t\t                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n\t\t                } else {\r\n\t\t                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n\t\t                    if (exponent === 1024)\r\n\t\t                        exponent = 1023;\r\n\t\t                    mantissa = val * Math.pow(2, -exponent);\r\n\t\t                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n\t\t                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n\t\t                }\r\n\t\t            }\r\n\t\t        }\r\n\r\n\t\t        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n\t\t        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n\t\t        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n\t\t            var lo = readUint(buf, pos + off0),\r\n\t\t                hi = readUint(buf, pos + off1);\r\n\t\t            var sign = (hi >> 31) * 2 + 1,\r\n\t\t                exponent = hi >>> 20 & 2047,\r\n\t\t                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n\t\t            return exponent === 2047\r\n\t\t                ? mantissa\r\n\t\t                ? NaN\r\n\t\t                : sign * Infinity\r\n\t\t                : exponent === 0 // denormal\r\n\t\t                ? sign * 5e-324 * mantissa\r\n\t\t                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n\t\t        }\r\n\r\n\t\t        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n\t\t        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n\t\t    })();\r\n\r\n\t\t    return exports;\r\n\t\t}\r\n\r\n\t\t// uint helpers\r\n\r\n\t\tfunction writeUintLE(val, buf, pos) {\r\n\t\t    buf[pos    ] =  val        & 255;\r\n\t\t    buf[pos + 1] =  val >>> 8  & 255;\r\n\t\t    buf[pos + 2] =  val >>> 16 & 255;\r\n\t\t    buf[pos + 3] =  val >>> 24;\r\n\t\t}\r\n\r\n\t\tfunction writeUintBE(val, buf, pos) {\r\n\t\t    buf[pos    ] =  val >>> 24;\r\n\t\t    buf[pos + 1] =  val >>> 16 & 255;\r\n\t\t    buf[pos + 2] =  val >>> 8  & 255;\r\n\t\t    buf[pos + 3] =  val        & 255;\r\n\t\t}\r\n\r\n\t\tfunction readUintLE(buf, pos) {\r\n\t\t    return (buf[pos    ]\r\n\t\t          | buf[pos + 1] << 8\r\n\t\t          | buf[pos + 2] << 16\r\n\t\t          | buf[pos + 3] << 24) >>> 0;\r\n\t\t}\r\n\r\n\t\tfunction readUintBE(buf, pos) {\r\n\t\t    return (buf[pos    ] << 24\r\n\t\t          | buf[pos + 1] << 16\r\n\t\t          | buf[pos + 2] << 8\r\n\t\t          | buf[pos + 3]) >>> 0;\r\n\t\t}\n\t\treturn float;\n\t}\n\n\tvar inquire_1;\n\tvar hasRequiredInquire;\n\n\tfunction requireInquire () {\n\t\tif (hasRequiredInquire) return inquire_1;\n\t\thasRequiredInquire = 1;\n\t\tinquire_1 = inquire;\r\n\r\n\t\t/**\r\n\t\t * Requires a module only if available.\r\n\t\t * @memberof util\r\n\t\t * @param {string} moduleName Module to require\r\n\t\t * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n\t\t */\r\n\t\tfunction inquire(moduleName) {\r\n\t\t    try {\r\n\t\t        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n\t\t        if (mod && (mod.length || Object.keys(mod).length))\r\n\t\t            return mod;\r\n\t\t    } catch (e) {} // eslint-disable-line no-empty\r\n\t\t    return null;\r\n\t\t}\n\t\treturn inquire_1;\n\t}\n\n\tvar utf8 = {};\n\n\tvar hasRequiredUtf8;\n\n\tfunction requireUtf8 () {\n\t\tif (hasRequiredUtf8) return utf8;\n\t\thasRequiredUtf8 = 1;\n\t\t(function (exports) {\n\r\n\t\t\t/**\r\n\t\t\t * A minimal UTF8 implementation for number arrays.\r\n\t\t\t * @memberof util\r\n\t\t\t * @namespace\r\n\t\t\t */\r\n\t\t\tvar utf8 = exports;\r\n\r\n\t\t\t/**\r\n\t\t\t * Calculates the UTF8 byte length of a string.\r\n\t\t\t * @param {string} string String\r\n\t\t\t * @returns {number} Byte length\r\n\t\t\t */\r\n\t\t\tutf8.length = function utf8_length(string) {\r\n\t\t\t    var len = 0,\r\n\t\t\t        c = 0;\r\n\t\t\t    for (var i = 0; i < string.length; ++i) {\r\n\t\t\t        c = string.charCodeAt(i);\r\n\t\t\t        if (c < 128)\r\n\t\t\t            len += 1;\r\n\t\t\t        else if (c < 2048)\r\n\t\t\t            len += 2;\r\n\t\t\t        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n\t\t\t            ++i;\r\n\t\t\t            len += 4;\r\n\t\t\t        } else\r\n\t\t\t            len += 3;\r\n\t\t\t    }\r\n\t\t\t    return len;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Reads UTF8 bytes as a string.\r\n\t\t\t * @param {Uint8Array} buffer Source buffer\r\n\t\t\t * @param {number} start Source start\r\n\t\t\t * @param {number} end Source end\r\n\t\t\t * @returns {string} String read\r\n\t\t\t */\r\n\t\t\tutf8.read = function utf8_read(buffer, start, end) {\r\n\t\t\t    var len = end - start;\r\n\t\t\t    if (len < 1)\r\n\t\t\t        return \"\";\r\n\t\t\t    var parts = null,\r\n\t\t\t        chunk = [],\r\n\t\t\t        i = 0, // char offset\r\n\t\t\t        t;     // temporary\r\n\t\t\t    while (start < end) {\r\n\t\t\t        t = buffer[start++];\r\n\t\t\t        if (t < 128)\r\n\t\t\t            chunk[i++] = t;\r\n\t\t\t        else if (t > 191 && t < 224)\r\n\t\t\t            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n\t\t\t        else if (t > 239 && t < 365) {\r\n\t\t\t            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n\t\t\t            chunk[i++] = 0xD800 + (t >> 10);\r\n\t\t\t            chunk[i++] = 0xDC00 + (t & 1023);\r\n\t\t\t        } else\r\n\t\t\t            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n\t\t\t        if (i > 8191) {\r\n\t\t\t            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n\t\t\t            i = 0;\r\n\t\t\t        }\r\n\t\t\t    }\r\n\t\t\t    if (parts) {\r\n\t\t\t        if (i)\r\n\t\t\t            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n\t\t\t        return parts.join(\"\");\r\n\t\t\t    }\r\n\t\t\t    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Writes a string as UTF8 bytes.\r\n\t\t\t * @param {string} string Source string\r\n\t\t\t * @param {Uint8Array} buffer Destination buffer\r\n\t\t\t * @param {number} offset Destination offset\r\n\t\t\t * @returns {number} Bytes written\r\n\t\t\t */\r\n\t\t\tutf8.write = function utf8_write(string, buffer, offset) {\r\n\t\t\t    var start = offset,\r\n\t\t\t        c1, // character 1\r\n\t\t\t        c2; // character 2\r\n\t\t\t    for (var i = 0; i < string.length; ++i) {\r\n\t\t\t        c1 = string.charCodeAt(i);\r\n\t\t\t        if (c1 < 128) {\r\n\t\t\t            buffer[offset++] = c1;\r\n\t\t\t        } else if (c1 < 2048) {\r\n\t\t\t            buffer[offset++] = c1 >> 6       | 192;\r\n\t\t\t            buffer[offset++] = c1       & 63 | 128;\r\n\t\t\t        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n\t\t\t            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n\t\t\t            ++i;\r\n\t\t\t            buffer[offset++] = c1 >> 18      | 240;\r\n\t\t\t            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n\t\t\t            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n\t\t\t            buffer[offset++] = c1       & 63 | 128;\r\n\t\t\t        } else {\r\n\t\t\t            buffer[offset++] = c1 >> 12      | 224;\r\n\t\t\t            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n\t\t\t            buffer[offset++] = c1       & 63 | 128;\r\n\t\t\t        }\r\n\t\t\t    }\r\n\t\t\t    return offset - start;\r\n\t\t\t};\n\t} (utf8));\n\t\treturn utf8;\n\t}\n\n\tvar pool_1;\n\tvar hasRequiredPool;\n\n\tfunction requirePool () {\n\t\tif (hasRequiredPool) return pool_1;\n\t\thasRequiredPool = 1;\n\t\tpool_1 = pool;\r\n\r\n\t\t/**\r\n\t\t * An allocator as used by {@link util.pool}.\r\n\t\t * @typedef PoolAllocator\r\n\t\t * @type {function}\r\n\t\t * @param {number} size Buffer size\r\n\t\t * @returns {Uint8Array} Buffer\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * A slicer as used by {@link util.pool}.\r\n\t\t * @typedef PoolSlicer\r\n\t\t * @type {function}\r\n\t\t * @param {number} start Start offset\r\n\t\t * @param {number} end End offset\r\n\t\t * @returns {Uint8Array} Buffer slice\r\n\t\t * @this {Uint8Array}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * A general purpose buffer pool.\r\n\t\t * @memberof util\r\n\t\t * @function\r\n\t\t * @param {PoolAllocator} alloc Allocator\r\n\t\t * @param {PoolSlicer} slice Slicer\r\n\t\t * @param {number} [size=8192] Slab size\r\n\t\t * @returns {PoolAllocator} Pooled allocator\r\n\t\t */\r\n\t\tfunction pool(alloc, slice, size) {\r\n\t\t    var SIZE   = size || 8192;\r\n\t\t    var MAX    = SIZE >>> 1;\r\n\t\t    var slab   = null;\r\n\t\t    var offset = SIZE;\r\n\t\t    return function pool_alloc(size) {\r\n\t\t        if (size < 1 || size > MAX)\r\n\t\t            return alloc(size);\r\n\t\t        if (offset + size > SIZE) {\r\n\t\t            slab = alloc(SIZE);\r\n\t\t            offset = 0;\r\n\t\t        }\r\n\t\t        var buf = slice.call(slab, offset, offset += size);\r\n\t\t        if (offset & 7) // align to 32 bit\r\n\t\t            offset = (offset | 7) + 1;\r\n\t\t        return buf;\r\n\t\t    };\r\n\t\t}\n\t\treturn pool_1;\n\t}\n\n\tvar longbits;\n\tvar hasRequiredLongbits;\n\n\tfunction requireLongbits () {\n\t\tif (hasRequiredLongbits) return longbits;\n\t\thasRequiredLongbits = 1;\n\t\tlongbits = LongBits;\n\n\t\tvar util = requireMinimal$1();\n\n\t\t/**\n\t\t * Constructs new long bits.\n\t\t * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n\t\t * @memberof util\n\t\t * @constructor\n\t\t * @param {number} lo Low 32 bits, unsigned\n\t\t * @param {number} hi High 32 bits, unsigned\n\t\t */\n\t\tfunction LongBits(lo, hi) {\n\n\t\t    // note that the casts below are theoretically unnecessary as of today, but older statically\n\t\t    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n\t\t    /**\n\t\t     * Low bits.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.lo = lo >>> 0;\n\n\t\t    /**\n\t\t     * High bits.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.hi = hi >>> 0;\n\t\t}\n\n\t\t/**\n\t\t * Zero bits.\n\t\t * @memberof util.LongBits\n\t\t * @type {util.LongBits}\n\t\t */\n\t\tvar zero = LongBits.zero = new LongBits(0, 0);\n\n\t\tzero.toNumber = function() { return 0; };\n\t\tzero.zzEncode = zero.zzDecode = function() { return this; };\n\t\tzero.length = function() { return 1; };\n\n\t\t/**\n\t\t * Zero hash.\n\t\t * @memberof util.LongBits\n\t\t * @type {string}\n\t\t */\n\t\tvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n\t\t/**\n\t\t * Constructs new long bits from the specified number.\n\t\t * @param {number} value Value\n\t\t * @returns {util.LongBits} Instance\n\t\t */\n\t\tLongBits.fromNumber = function fromNumber(value) {\n\t\t    if (value === 0)\n\t\t        return zero;\n\t\t    var sign = value < 0;\n\t\t    if (sign)\n\t\t        value = -value;\n\t\t    var lo = value >>> 0,\n\t\t        hi = (value - lo) / 4294967296 >>> 0;\n\t\t    if (sign) {\n\t\t        hi = ~hi >>> 0;\n\t\t        lo = ~lo >>> 0;\n\t\t        if (++lo > 4294967295) {\n\t\t            lo = 0;\n\t\t            if (++hi > 4294967295)\n\t\t                hi = 0;\n\t\t        }\n\t\t    }\n\t\t    return new LongBits(lo, hi);\n\t\t};\n\n\t\t/**\n\t\t * Constructs new long bits from a number, long or string.\n\t\t * @param {Long|number|string} value Value\n\t\t * @returns {util.LongBits} Instance\n\t\t */\n\t\tLongBits.from = function from(value) {\n\t\t    if (typeof value === \"number\")\n\t\t        return LongBits.fromNumber(value);\n\t\t    if (util.isString(value)) {\n\t\t        /* istanbul ignore else */\n\t\t        if (util.Long)\n\t\t            value = util.Long.fromString(value);\n\t\t        else\n\t\t            return LongBits.fromNumber(parseInt(value, 10));\n\t\t    }\n\t\t    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n\t\t};\n\n\t\t/**\n\t\t * Converts this long bits to a possibly unsafe JavaScript number.\n\t\t * @param {boolean} [unsigned=false] Whether unsigned or not\n\t\t * @returns {number} Possibly unsafe number\n\t\t */\n\t\tLongBits.prototype.toNumber = function toNumber(unsigned) {\n\t\t    if (!unsigned && this.hi >>> 31) {\n\t\t        var lo = ~this.lo + 1 >>> 0,\n\t\t            hi = ~this.hi     >>> 0;\n\t\t        if (!lo)\n\t\t            hi = hi + 1 >>> 0;\n\t\t        return -(lo + hi * 4294967296);\n\t\t    }\n\t\t    return this.lo + this.hi * 4294967296;\n\t\t};\n\n\t\t/**\n\t\t * Converts this long bits to a long.\n\t\t * @param {boolean} [unsigned=false] Whether unsigned or not\n\t\t * @returns {Long} Long\n\t\t */\n\t\tLongBits.prototype.toLong = function toLong(unsigned) {\n\t\t    return util.Long\n\t\t        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n\t\t        /* istanbul ignore next */\n\t\t        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n\t\t};\n\n\t\tvar charCodeAt = String.prototype.charCodeAt;\n\n\t\t/**\n\t\t * Constructs new long bits from the specified 8 characters long hash.\n\t\t * @param {string} hash Hash\n\t\t * @returns {util.LongBits} Bits\n\t\t */\n\t\tLongBits.fromHash = function fromHash(hash) {\n\t\t    if (hash === zeroHash)\n\t\t        return zero;\n\t\t    return new LongBits(\n\t\t        ( charCodeAt.call(hash, 0)\n\t\t        | charCodeAt.call(hash, 1) << 8\n\t\t        | charCodeAt.call(hash, 2) << 16\n\t\t        | charCodeAt.call(hash, 3) << 24) >>> 0\n\t\t    ,\n\t\t        ( charCodeAt.call(hash, 4)\n\t\t        | charCodeAt.call(hash, 5) << 8\n\t\t        | charCodeAt.call(hash, 6) << 16\n\t\t        | charCodeAt.call(hash, 7) << 24) >>> 0\n\t\t    );\n\t\t};\n\n\t\t/**\n\t\t * Converts this long bits to a 8 characters long hash.\n\t\t * @returns {string} Hash\n\t\t */\n\t\tLongBits.prototype.toHash = function toHash() {\n\t\t    return String.fromCharCode(\n\t\t        this.lo        & 255,\n\t\t        this.lo >>> 8  & 255,\n\t\t        this.lo >>> 16 & 255,\n\t\t        this.lo >>> 24      ,\n\t\t        this.hi        & 255,\n\t\t        this.hi >>> 8  & 255,\n\t\t        this.hi >>> 16 & 255,\n\t\t        this.hi >>> 24\n\t\t    );\n\t\t};\n\n\t\t/**\n\t\t * Zig-zag encodes this long bits.\n\t\t * @returns {util.LongBits} `this`\n\t\t */\n\t\tLongBits.prototype.zzEncode = function zzEncode() {\n\t\t    var mask =   this.hi >> 31;\n\t\t    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n\t\t    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Zig-zag decodes this long bits.\n\t\t * @returns {util.LongBits} `this`\n\t\t */\n\t\tLongBits.prototype.zzDecode = function zzDecode() {\n\t\t    var mask = -(this.lo & 1);\n\t\t    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n\t\t    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Calculates the length of this longbits when encoded as a varint.\n\t\t * @returns {number} Length\n\t\t */\n\t\tLongBits.prototype.length = function length() {\n\t\t    var part0 =  this.lo,\n\t\t        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n\t\t        part2 =  this.hi >>> 24;\n\t\t    return part2 === 0\n\t\t         ? part1 === 0\n\t\t           ? part0 < 16384\n\t\t             ? part0 < 128 ? 1 : 2\n\t\t             : part0 < 2097152 ? 3 : 4\n\t\t           : part1 < 16384\n\t\t             ? part1 < 128 ? 5 : 6\n\t\t             : part1 < 2097152 ? 7 : 8\n\t\t         : part2 < 128 ? 9 : 10;\n\t\t};\n\t\treturn longbits;\n\t}\n\n\tvar hasRequiredMinimal$1;\n\n\tfunction requireMinimal$1 () {\n\t\tif (hasRequiredMinimal$1) return minimal;\n\t\thasRequiredMinimal$1 = 1;\n\t\t(function (exports) {\n\t\t\tvar util = exports;\n\n\t\t\t// used to return a Promise where callback is omitted\n\t\t\tutil.asPromise = requireAspromise();\n\n\t\t\t// converts to / from base64 encoded strings\n\t\t\tutil.base64 = requireBase64();\n\n\t\t\t// base class of rpc.Service\n\t\t\tutil.EventEmitter = requireEventemitter();\n\n\t\t\t// float handling accross browsers\n\t\t\tutil.float = requireFloat();\n\n\t\t\t// requires modules optionally and hides the call from bundlers\n\t\t\tutil.inquire = requireInquire();\n\n\t\t\t// converts to / from utf8 encoded strings\n\t\t\tutil.utf8 = requireUtf8();\n\n\t\t\t// provides a node-like buffer pool in the browser\n\t\t\tutil.pool = requirePool();\n\n\t\t\t// utility to work with the low and high bits of a 64 bit value\n\t\t\tutil.LongBits = requireLongbits();\n\n\t\t\t/**\n\t\t\t * Whether running within node or not.\n\t\t\t * @memberof util\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tutil.isNode = Boolean(typeof commonjsGlobal !== \"undefined\"\n\t\t\t                   && commonjsGlobal\n\t\t\t                   && commonjsGlobal.process\n\t\t\t                   && commonjsGlobal.process.versions\n\t\t\t                   && commonjsGlobal.process.versions.node);\n\n\t\t\t/**\n\t\t\t * Global object reference.\n\t\t\t * @memberof util\n\t\t\t * @type {Object}\n\t\t\t */\n\t\t\tutil.global = util.isNode && commonjsGlobal\n\t\t\t           || typeof window !== \"undefined\" && window\n\t\t\t           || typeof self   !== \"undefined\" && self\n\t\t\t           || commonjsGlobal; // eslint-disable-line no-invalid-this\n\n\t\t\t/**\n\t\t\t * An immuable empty array.\n\t\t\t * @memberof util\n\t\t\t * @type {Array.<*>}\n\t\t\t * @const\n\t\t\t */\n\t\t\tutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n\t\t\t/**\n\t\t\t * An immutable empty object.\n\t\t\t * @type {Object}\n\t\t\t * @const\n\t\t\t */\n\t\t\tutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n\t\t\t/**\n\t\t\t * Tests if the specified value is an integer.\n\t\t\t * @function\n\t\t\t * @param {*} value Value to test\n\t\t\t * @returns {boolean} `true` if the value is an integer\n\t\t\t */\n\t\t\tutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n\t\t\t    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Tests if the specified value is a string.\n\t\t\t * @param {*} value Value to test\n\t\t\t * @returns {boolean} `true` if the value is a string\n\t\t\t */\n\t\t\tutil.isString = function isString(value) {\n\t\t\t    return typeof value === \"string\" || value instanceof String;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Tests if the specified value is a non-null object.\n\t\t\t * @param {*} value Value to test\n\t\t\t * @returns {boolean} `true` if the value is a non-null object\n\t\t\t */\n\t\t\tutil.isObject = function isObject(value) {\n\t\t\t    return value && typeof value === \"object\";\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Checks if a property on a message is considered to be present.\n\t\t\t * This is an alias of {@link util.isSet}.\n\t\t\t * @function\n\t\t\t * @param {Object} obj Plain object or message instance\n\t\t\t * @param {string} prop Property name\n\t\t\t * @returns {boolean} `true` if considered to be present, otherwise `false`\n\t\t\t */\n\t\t\tutil.isset =\n\n\t\t\t/**\n\t\t\t * Checks if a property on a message is considered to be present.\n\t\t\t * @param {Object} obj Plain object or message instance\n\t\t\t * @param {string} prop Property name\n\t\t\t * @returns {boolean} `true` if considered to be present, otherwise `false`\n\t\t\t */\n\t\t\tutil.isSet = function isSet(obj, prop) {\n\t\t\t    var value = obj[prop];\n\t\t\t    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n\t\t\t        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n\t\t\t    return false;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Any compatible Buffer instance.\n\t\t\t * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n\t\t\t * @interface Buffer\n\t\t\t * @extends Uint8Array\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Node's Buffer class if available.\n\t\t\t * @type {Constructor<Buffer>}\n\t\t\t */\n\t\t\tutil.Buffer = (function() {\n\t\t\t    try {\n\t\t\t        var Buffer = util.inquire(\"buffer\").Buffer;\n\t\t\t        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n\t\t\t        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n\t\t\t    } catch (e) {\n\t\t\t        /* istanbul ignore next */\n\t\t\t        return null;\n\t\t\t    }\n\t\t\t})();\n\n\t\t\t// Internal alias of or polyfull for Buffer.from.\n\t\t\tutil._Buffer_from = null;\n\n\t\t\t// Internal alias of or polyfill for Buffer.allocUnsafe.\n\t\t\tutil._Buffer_allocUnsafe = null;\n\n\t\t\t/**\n\t\t\t * Creates a new buffer of whatever type supported by the environment.\n\t\t\t * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n\t\t\t * @returns {Uint8Array|Buffer} Buffer\n\t\t\t */\n\t\t\tutil.newBuffer = function newBuffer(sizeOrArray) {\n\t\t\t    /* istanbul ignore next */\n\t\t\t    return typeof sizeOrArray === \"number\"\n\t\t\t        ? util.Buffer\n\t\t\t            ? util._Buffer_allocUnsafe(sizeOrArray)\n\t\t\t            : new util.Array(sizeOrArray)\n\t\t\t        : util.Buffer\n\t\t\t            ? util._Buffer_from(sizeOrArray)\n\t\t\t            : typeof Uint8Array === \"undefined\"\n\t\t\t                ? sizeOrArray\n\t\t\t                : new Uint8Array(sizeOrArray);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n\t\t\t * @type {Constructor<Uint8Array>}\n\t\t\t */\n\t\t\tutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n\t\t\t/**\n\t\t\t * Any compatible Long instance.\n\t\t\t * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n\t\t\t * @interface Long\n\t\t\t * @property {number} low Low bits\n\t\t\t * @property {number} high High bits\n\t\t\t * @property {boolean} unsigned Whether unsigned or not\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Long.js's Long class if available.\n\t\t\t * @type {Constructor<Long>}\n\t\t\t */\n\t\t\tutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n\t\t\t         || /* istanbul ignore next */ util.global.Long\n\t\t\t         || util.inquire(\"long\");\n\n\t\t\t/**\n\t\t\t * Regular expression used to verify 2 bit (`bool`) map keys.\n\t\t\t * @type {RegExp}\n\t\t\t * @const\n\t\t\t */\n\t\t\tutil.key2Re = /^true|false|0|1$/;\n\n\t\t\t/**\n\t\t\t * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n\t\t\t * @type {RegExp}\n\t\t\t * @const\n\t\t\t */\n\t\t\tutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n\t\t\t/**\n\t\t\t * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n\t\t\t * @type {RegExp}\n\t\t\t * @const\n\t\t\t */\n\t\t\tutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n\t\t\t/**\n\t\t\t * Converts a number or long to an 8 characters long hash string.\n\t\t\t * @param {Long|number} value Value to convert\n\t\t\t * @returns {string} Hash\n\t\t\t */\n\t\t\tutil.longToHash = function longToHash(value) {\n\t\t\t    return value\n\t\t\t        ? util.LongBits.from(value).toHash()\n\t\t\t        : util.LongBits.zeroHash;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Converts an 8 characters long hash string to a long or number.\n\t\t\t * @param {string} hash Hash\n\t\t\t * @param {boolean} [unsigned=false] Whether unsigned or not\n\t\t\t * @returns {Long|number} Original value\n\t\t\t */\n\t\t\tutil.longFromHash = function longFromHash(hash, unsigned) {\n\t\t\t    var bits = util.LongBits.fromHash(hash);\n\t\t\t    if (util.Long)\n\t\t\t        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n\t\t\t    return bits.toNumber(Boolean(unsigned));\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Merges the properties of the source object into the destination object.\n\t\t\t * @memberof util\n\t\t\t * @param {Object.<string,*>} dst Destination object\n\t\t\t * @param {Object.<string,*>} src Source object\n\t\t\t * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n\t\t\t * @returns {Object.<string,*>} Destination object\n\t\t\t */\n\t\t\tfunction merge(dst, src, ifNotSet) { // used by converters\n\t\t\t    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n\t\t\t        if (dst[keys[i]] === undefined || !ifNotSet)\n\t\t\t            dst[keys[i]] = src[keys[i]];\n\t\t\t    return dst;\n\t\t\t}\n\n\t\t\tutil.merge = merge;\n\n\t\t\t/**\n\t\t\t * Converts the first character of a string to lower case.\n\t\t\t * @param {string} str String to convert\n\t\t\t * @returns {string} Converted string\n\t\t\t */\n\t\t\tutil.lcFirst = function lcFirst(str) {\n\t\t\t    return str.charAt(0).toLowerCase() + str.substring(1);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Creates a custom error constructor.\n\t\t\t * @memberof util\n\t\t\t * @param {string} name Error name\n\t\t\t * @returns {Constructor<Error>} Custom error constructor\n\t\t\t */\n\t\t\tfunction newError(name) {\n\n\t\t\t    function CustomError(message, properties) {\n\n\t\t\t        if (!(this instanceof CustomError))\n\t\t\t            return new CustomError(message, properties);\n\n\t\t\t        // Error.call(this, message);\n\t\t\t        // ^ just returns a new error instance because the ctor can be called as a function\n\n\t\t\t        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n\t\t\t        /* istanbul ignore next */\n\t\t\t        if (Error.captureStackTrace) // node\n\t\t\t            Error.captureStackTrace(this, CustomError);\n\t\t\t        else\n\t\t\t            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n\t\t\t        if (properties)\n\t\t\t            merge(this, properties);\n\t\t\t    }\n\n\t\t\t    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n\t\t\t    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n\t\t\t    CustomError.prototype.toString = function toString() {\n\t\t\t        return this.name + \": \" + this.message;\n\t\t\t    };\n\n\t\t\t    return CustomError;\n\t\t\t}\n\n\t\t\tutil.newError = newError;\n\n\t\t\t/**\n\t\t\t * Constructs a new protocol error.\n\t\t\t * @classdesc Error subclass indicating a protocol specifc error.\n\t\t\t * @memberof util\n\t\t\t * @extends Error\n\t\t\t * @template T extends Message<T>\n\t\t\t * @constructor\n\t\t\t * @param {string} message Error message\n\t\t\t * @param {Object.<string,*>} [properties] Additional properties\n\t\t\t * @example\n\t\t\t * try {\n\t\t\t *     MyMessage.decode(someBuffer); // throws if required fields are missing\n\t\t\t * } catch (e) {\n\t\t\t *     if (e instanceof ProtocolError && e.instance)\n\t\t\t *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n\t\t\t * }\n\t\t\t */\n\t\t\tutil.ProtocolError = newError(\"ProtocolError\");\n\n\t\t\t/**\n\t\t\t * So far decoded message instance.\n\t\t\t * @name util.ProtocolError#instance\n\t\t\t * @type {Message<T>}\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * A OneOf getter as returned by {@link util.oneOfGetter}.\n\t\t\t * @typedef OneOfGetter\n\t\t\t * @type {function}\n\t\t\t * @returns {string|undefined} Set field name, if any\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Builds a getter for a oneof's present field name.\n\t\t\t * @param {string[]} fieldNames Field names\n\t\t\t * @returns {OneOfGetter} Unbound getter\n\t\t\t */\n\t\t\tutil.oneOfGetter = function getOneOf(fieldNames) {\n\t\t\t    var fieldMap = {};\n\t\t\t    for (var i = 0; i < fieldNames.length; ++i)\n\t\t\t        fieldMap[fieldNames[i]] = 1;\n\n\t\t\t    /**\n\t\t\t     * @returns {string|undefined} Set field name, if any\n\t\t\t     * @this Object\n\t\t\t     * @ignore\n\t\t\t     */\n\t\t\t    return function() { // eslint-disable-line consistent-return\n\t\t\t        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n\t\t\t            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n\t\t\t                return keys[i];\n\t\t\t    };\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * A OneOf setter as returned by {@link util.oneOfSetter}.\n\t\t\t * @typedef OneOfSetter\n\t\t\t * @type {function}\n\t\t\t * @param {string|undefined} value Field name\n\t\t\t * @returns {undefined}\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Builds a setter for a oneof's present field name.\n\t\t\t * @param {string[]} fieldNames Field names\n\t\t\t * @returns {OneOfSetter} Unbound setter\n\t\t\t */\n\t\t\tutil.oneOfSetter = function setOneOf(fieldNames) {\n\n\t\t\t    /**\n\t\t\t     * @param {string} name Field name\n\t\t\t     * @returns {undefined}\n\t\t\t     * @this Object\n\t\t\t     * @ignore\n\t\t\t     */\n\t\t\t    return function(name) {\n\t\t\t        for (var i = 0; i < fieldNames.length; ++i)\n\t\t\t            if (fieldNames[i] !== name)\n\t\t\t                delete this[fieldNames[i]];\n\t\t\t    };\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Default conversion options used for {@link Message#toJSON} implementations.\n\t\t\t *\n\t\t\t * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n\t\t\t *\n\t\t\t * - Longs become strings\n\t\t\t * - Enums become string keys\n\t\t\t * - Bytes become base64 encoded strings\n\t\t\t * - (Sub-)Messages become plain objects\n\t\t\t * - Maps become plain objects with all string keys\n\t\t\t * - Repeated fields become arrays\n\t\t\t * - NaN and Infinity for float and double fields become strings\n\t\t\t *\n\t\t\t * @type {IConversionOptions}\n\t\t\t * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n\t\t\t */\n\t\t\tutil.toJSONOptions = {\n\t\t\t    longs: String,\n\t\t\t    enums: String,\n\t\t\t    bytes: String,\n\t\t\t    json: true\n\t\t\t};\n\n\t\t\t// Sets up buffer utility according to the environment (called in index-minimal)\n\t\t\tutil._configure = function() {\n\t\t\t    var Buffer = util.Buffer;\n\t\t\t    /* istanbul ignore if */\n\t\t\t    if (!Buffer) {\n\t\t\t        util._Buffer_from = util._Buffer_allocUnsafe = null;\n\t\t\t        return;\n\t\t\t    }\n\t\t\t    // because node 4.x buffers are incompatible & immutable\n\t\t\t    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n\t\t\t    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n\t\t\t        /* istanbul ignore next */\n\t\t\t        function Buffer_from(value, encoding) {\n\t\t\t            return new Buffer(value, encoding);\n\t\t\t        };\n\t\t\t    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n\t\t\t        /* istanbul ignore next */\n\t\t\t        function Buffer_allocUnsafe(size) {\n\t\t\t            return new Buffer(size);\n\t\t\t        };\n\t\t\t};\n\t} (minimal));\n\t\treturn minimal;\n\t}\n\n\tvar writer;\n\tvar hasRequiredWriter;\n\n\tfunction requireWriter () {\n\t\tif (hasRequiredWriter) return writer;\n\t\thasRequiredWriter = 1;\n\t\twriter = Writer;\n\n\t\tvar util      = requireMinimal$1();\n\n\t\tvar BufferWriter; // cyclic\n\n\t\tvar LongBits  = util.LongBits,\n\t\t    base64    = util.base64,\n\t\t    utf8      = util.utf8;\n\n\t\t/**\n\t\t * Constructs a new writer operation instance.\n\t\t * @classdesc Scheduled writer operation.\n\t\t * @constructor\n\t\t * @param {function(*, Uint8Array, number)} fn Function to call\n\t\t * @param {number} len Value byte length\n\t\t * @param {*} val Value to write\n\t\t * @ignore\n\t\t */\n\t\tfunction Op(fn, len, val) {\n\n\t\t    /**\n\t\t     * Function to call.\n\t\t     * @type {function(Uint8Array, number, *)}\n\t\t     */\n\t\t    this.fn = fn;\n\n\t\t    /**\n\t\t     * Value byte length.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.len = len;\n\n\t\t    /**\n\t\t     * Next operation.\n\t\t     * @type {Writer.Op|undefined}\n\t\t     */\n\t\t    this.next = undefined;\n\n\t\t    /**\n\t\t     * Value to write.\n\t\t     * @type {*}\n\t\t     */\n\t\t    this.val = val; // type varies\n\t\t}\n\n\t\t/* istanbul ignore next */\n\t\tfunction noop() {} // eslint-disable-line no-empty-function\n\n\t\t/**\n\t\t * Constructs a new writer state instance.\n\t\t * @classdesc Copied writer state.\n\t\t * @memberof Writer\n\t\t * @constructor\n\t\t * @param {Writer} writer Writer to copy state from\n\t\t * @ignore\n\t\t */\n\t\tfunction State(writer) {\n\n\t\t    /**\n\t\t     * Current head.\n\t\t     * @type {Writer.Op}\n\t\t     */\n\t\t    this.head = writer.head;\n\n\t\t    /**\n\t\t     * Current tail.\n\t\t     * @type {Writer.Op}\n\t\t     */\n\t\t    this.tail = writer.tail;\n\n\t\t    /**\n\t\t     * Current buffer length.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.len = writer.len;\n\n\t\t    /**\n\t\t     * Next state.\n\t\t     * @type {State|null}\n\t\t     */\n\t\t    this.next = writer.states;\n\t\t}\n\n\t\t/**\n\t\t * Constructs a new writer instance.\n\t\t * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n\t\t * @constructor\n\t\t */\n\t\tfunction Writer() {\n\n\t\t    /**\n\t\t     * Current length.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.len = 0;\n\n\t\t    /**\n\t\t     * Operations head.\n\t\t     * @type {Object}\n\t\t     */\n\t\t    this.head = new Op(noop, 0, 0);\n\n\t\t    /**\n\t\t     * Operations tail\n\t\t     * @type {Object}\n\t\t     */\n\t\t    this.tail = this.head;\n\n\t\t    /**\n\t\t     * Linked forked states.\n\t\t     * @type {Object|null}\n\t\t     */\n\t\t    this.states = null;\n\n\t\t    // When a value is written, the writer calculates its byte length and puts it into a linked\n\t\t    // list of operations to perform when finish() is called. This both allows us to allocate\n\t\t    // buffers of the exact required size and reduces the amount of work we have to do compared\n\t\t    // to first calculating over objects and then encoding over objects. In our case, the encoding\n\t\t    // part is just a linked list walk calling operations with already prepared values.\n\t\t}\n\n\t\tvar create = function create() {\n\t\t    return util.Buffer\n\t\t        ? function create_buffer_setup() {\n\t\t            return (Writer.create = function create_buffer() {\n\t\t                return new BufferWriter();\n\t\t            })();\n\t\t        }\n\t\t        /* istanbul ignore next */\n\t\t        : function create_array() {\n\t\t            return new Writer();\n\t\t        };\n\t\t};\n\n\t\t/**\n\t\t * Creates a new writer.\n\t\t * @function\n\t\t * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n\t\t */\n\t\tWriter.create = create();\n\n\t\t/**\n\t\t * Allocates a buffer of the specified size.\n\t\t * @param {number} size Buffer size\n\t\t * @returns {Uint8Array} Buffer\n\t\t */\n\t\tWriter.alloc = function alloc(size) {\n\t\t    return new util.Array(size);\n\t\t};\n\n\t\t// Use Uint8Array buffer pool in the browser, just like node does with buffers\n\t\t/* istanbul ignore else */\n\t\tif (util.Array !== Array)\n\t\t    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n\t\t/**\n\t\t * Pushes a new operation to the queue.\n\t\t * @param {function(Uint8Array, number, *)} fn Function to call\n\t\t * @param {number} len Value byte length\n\t\t * @param {number} val Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @private\n\t\t */\n\t\tWriter.prototype._push = function push(fn, len, val) {\n\t\t    this.tail = this.tail.next = new Op(fn, len, val);\n\t\t    this.len += len;\n\t\t    return this;\n\t\t};\n\n\t\tfunction writeByte(val, buf, pos) {\n\t\t    buf[pos] = val & 255;\n\t\t}\n\n\t\tfunction writeVarint32(val, buf, pos) {\n\t\t    while (val > 127) {\n\t\t        buf[pos++] = val & 127 | 128;\n\t\t        val >>>= 7;\n\t\t    }\n\t\t    buf[pos] = val;\n\t\t}\n\n\t\t/**\n\t\t * Constructs a new varint writer operation instance.\n\t\t * @classdesc Scheduled varint writer operation.\n\t\t * @extends Op\n\t\t * @constructor\n\t\t * @param {number} len Value byte length\n\t\t * @param {number} val Value to write\n\t\t * @ignore\n\t\t */\n\t\tfunction VarintOp(len, val) {\n\t\t    this.len = len;\n\t\t    this.next = undefined;\n\t\t    this.val = val;\n\t\t}\n\n\t\tVarintOp.prototype = Object.create(Op.prototype);\n\t\tVarintOp.prototype.fn = writeVarint32;\n\n\t\t/**\n\t\t * Writes an unsigned 32 bit value as a varint.\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.uint32 = function write_uint32(value) {\n\t\t    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n\t\t    // uint32 is by far the most frequently used operation and benefits significantly from this.\n\t\t    this.len += (this.tail = this.tail.next = new VarintOp(\n\t\t        (value = value >>> 0)\n\t\t                < 128       ? 1\n\t\t        : value < 16384     ? 2\n\t\t        : value < 2097152   ? 3\n\t\t        : value < 268435456 ? 4\n\t\t        :                     5,\n\t\t    value)).len;\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Writes a signed 32 bit value as a varint.\n\t\t * @function\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.int32 = function write_int32(value) {\n\t\t    return value < 0\n\t\t        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n\t\t        : this.uint32(value);\n\t\t};\n\n\t\t/**\n\t\t * Writes a 32 bit value as a varint, zig-zag encoded.\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.sint32 = function write_sint32(value) {\n\t\t    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n\t\t};\n\n\t\tfunction writeVarint64(val, buf, pos) {\n\t\t    while (val.hi) {\n\t\t        buf[pos++] = val.lo & 127 | 128;\n\t\t        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n\t\t        val.hi >>>= 7;\n\t\t    }\n\t\t    while (val.lo > 127) {\n\t\t        buf[pos++] = val.lo & 127 | 128;\n\t\t        val.lo = val.lo >>> 7;\n\t\t    }\n\t\t    buf[pos++] = val.lo;\n\t\t}\n\n\t\t/**\n\t\t * Writes an unsigned 64 bit value as a varint.\n\t\t * @param {Long|number|string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t\t */\n\t\tWriter.prototype.uint64 = function write_uint64(value) {\n\t\t    var bits = LongBits.from(value);\n\t\t    return this._push(writeVarint64, bits.length(), bits);\n\t\t};\n\n\t\t/**\n\t\t * Writes a signed 64 bit value as a varint.\n\t\t * @function\n\t\t * @param {Long|number|string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t\t */\n\t\tWriter.prototype.int64 = Writer.prototype.uint64;\n\n\t\t/**\n\t\t * Writes a signed 64 bit value as a varint, zig-zag encoded.\n\t\t * @param {Long|number|string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t\t */\n\t\tWriter.prototype.sint64 = function write_sint64(value) {\n\t\t    var bits = LongBits.from(value).zzEncode();\n\t\t    return this._push(writeVarint64, bits.length(), bits);\n\t\t};\n\n\t\t/**\n\t\t * Writes a boolish value as a varint.\n\t\t * @param {boolean} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.bool = function write_bool(value) {\n\t\t    return this._push(writeByte, 1, value ? 1 : 0);\n\t\t};\n\n\t\tfunction writeFixed32(val, buf, pos) {\n\t\t    buf[pos    ] =  val         & 255;\n\t\t    buf[pos + 1] =  val >>> 8   & 255;\n\t\t    buf[pos + 2] =  val >>> 16  & 255;\n\t\t    buf[pos + 3] =  val >>> 24;\n\t\t}\n\n\t\t/**\n\t\t * Writes an unsigned 32 bit value as fixed 32 bits.\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.fixed32 = function write_fixed32(value) {\n\t\t    return this._push(writeFixed32, 4, value >>> 0);\n\t\t};\n\n\t\t/**\n\t\t * Writes a signed 32 bit value as fixed 32 bits.\n\t\t * @function\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n\t\t/**\n\t\t * Writes an unsigned 64 bit value as fixed 64 bits.\n\t\t * @param {Long|number|string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t\t */\n\t\tWriter.prototype.fixed64 = function write_fixed64(value) {\n\t\t    var bits = LongBits.from(value);\n\t\t    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n\t\t};\n\n\t\t/**\n\t\t * Writes a signed 64 bit value as fixed 64 bits.\n\t\t * @function\n\t\t * @param {Long|number|string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t\t */\n\t\tWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n\t\t/**\n\t\t * Writes a float (32 bit).\n\t\t * @function\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.float = function write_float(value) {\n\t\t    return this._push(util.float.writeFloatLE, 4, value);\n\t\t};\n\n\t\t/**\n\t\t * Writes a double (64 bit float).\n\t\t * @function\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.double = function write_double(value) {\n\t\t    return this._push(util.float.writeDoubleLE, 8, value);\n\t\t};\n\n\t\tvar writeBytes = util.Array.prototype.set\n\t\t    ? function writeBytes_set(val, buf, pos) {\n\t\t        buf.set(val, pos); // also works for plain array values\n\t\t    }\n\t\t    /* istanbul ignore next */\n\t\t    : function writeBytes_for(val, buf, pos) {\n\t\t        for (var i = 0; i < val.length; ++i)\n\t\t            buf[pos + i] = val[i];\n\t\t    };\n\n\t\t/**\n\t\t * Writes a sequence of bytes.\n\t\t * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.bytes = function write_bytes(value) {\n\t\t    var len = value.length >>> 0;\n\t\t    if (!len)\n\t\t        return this._push(writeByte, 1, 0);\n\t\t    if (util.isString(value)) {\n\t\t        var buf = Writer.alloc(len = base64.length(value));\n\t\t        base64.decode(value, buf, 0);\n\t\t        value = buf;\n\t\t    }\n\t\t    return this.uint32(len)._push(writeBytes, len, value);\n\t\t};\n\n\t\t/**\n\t\t * Writes a string.\n\t\t * @param {string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.string = function write_string(value) {\n\t\t    var len = utf8.length(value);\n\t\t    return len\n\t\t        ? this.uint32(len)._push(utf8.write, len, value)\n\t\t        : this._push(writeByte, 1, 0);\n\t\t};\n\n\t\t/**\n\t\t * Forks this writer's state by pushing it to a stack.\n\t\t * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.fork = function fork() {\n\t\t    this.states = new State(this);\n\t\t    this.head = this.tail = new Op(noop, 0, 0);\n\t\t    this.len = 0;\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Resets this instance to the last state.\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.reset = function reset() {\n\t\t    if (this.states) {\n\t\t        this.head   = this.states.head;\n\t\t        this.tail   = this.states.tail;\n\t\t        this.len    = this.states.len;\n\t\t        this.states = this.states.next;\n\t\t    } else {\n\t\t        this.head = this.tail = new Op(noop, 0, 0);\n\t\t        this.len  = 0;\n\t\t    }\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.ldelim = function ldelim() {\n\t\t    var head = this.head,\n\t\t        tail = this.tail,\n\t\t        len  = this.len;\n\t\t    this.reset().uint32(len);\n\t\t    if (len) {\n\t\t        this.tail.next = head.next; // skip noop\n\t\t        this.tail = tail;\n\t\t        this.len += len;\n\t\t    }\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Finishes the write operation.\n\t\t * @returns {Uint8Array} Finished buffer\n\t\t */\n\t\tWriter.prototype.finish = function finish() {\n\t\t    var head = this.head.next, // skip noop\n\t\t        buf  = this.constructor.alloc(this.len),\n\t\t        pos  = 0;\n\t\t    while (head) {\n\t\t        head.fn(head.val, buf, pos);\n\t\t        pos += head.len;\n\t\t        head = head.next;\n\t\t    }\n\t\t    // this.head = this.tail = null;\n\t\t    return buf;\n\t\t};\n\n\t\tWriter._configure = function(BufferWriter_) {\n\t\t    BufferWriter = BufferWriter_;\n\t\t    Writer.create = create();\n\t\t    BufferWriter._configure();\n\t\t};\n\t\treturn writer;\n\t}\n\n\tvar writer_buffer;\n\tvar hasRequiredWriter_buffer;\n\n\tfunction requireWriter_buffer () {\n\t\tif (hasRequiredWriter_buffer) return writer_buffer;\n\t\thasRequiredWriter_buffer = 1;\n\t\twriter_buffer = BufferWriter;\n\n\t\t// extends Writer\n\t\tvar Writer = requireWriter();\n\t\t(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\n\t\tvar util = requireMinimal$1();\n\n\t\t/**\n\t\t * Constructs a new buffer writer instance.\n\t\t * @classdesc Wire format writer using node buffers.\n\t\t * @extends Writer\n\t\t * @constructor\n\t\t */\n\t\tfunction BufferWriter() {\n\t\t    Writer.call(this);\n\t\t}\n\n\t\tBufferWriter._configure = function () {\n\t\t    /**\n\t\t     * Allocates a buffer of the specified size.\n\t\t     * @function\n\t\t     * @param {number} size Buffer size\n\t\t     * @returns {Buffer} Buffer\n\t\t     */\n\t\t    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n\t\t    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n\t\t        ? function writeBytesBuffer_set(val, buf, pos) {\n\t\t          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n\t\t          // also works for plain array values\n\t\t        }\n\t\t        /* istanbul ignore next */\n\t\t        : function writeBytesBuffer_copy(val, buf, pos) {\n\t\t          if (val.copy) // Buffer values\n\t\t            val.copy(buf, pos, 0, val.length);\n\t\t          else for (var i = 0; i < val.length;) // plain array values\n\t\t            buf[pos++] = val[i++];\n\t\t        };\n\t\t};\n\n\n\t\t/**\n\t\t * @override\n\t\t */\n\t\tBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n\t\t    if (util.isString(value))\n\t\t        value = util._Buffer_from(value, \"base64\");\n\t\t    var len = value.length >>> 0;\n\t\t    this.uint32(len);\n\t\t    if (len)\n\t\t        this._push(BufferWriter.writeBytesBuffer, len, value);\n\t\t    return this;\n\t\t};\n\n\t\tfunction writeStringBuffer(val, buf, pos) {\n\t\t    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n\t\t        util.utf8.write(val, buf, pos);\n\t\t    else if (buf.utf8Write)\n\t\t        buf.utf8Write(val, pos);\n\t\t    else\n\t\t        buf.write(val, pos);\n\t\t}\n\n\t\t/**\n\t\t * @override\n\t\t */\n\t\tBufferWriter.prototype.string = function write_string_buffer(value) {\n\t\t    var len = util.Buffer.byteLength(value);\n\t\t    this.uint32(len);\n\t\t    if (len)\n\t\t        this._push(writeStringBuffer, len, value);\n\t\t    return this;\n\t\t};\n\n\n\t\t/**\n\t\t * Finishes the write operation.\n\t\t * @name BufferWriter#finish\n\t\t * @function\n\t\t * @returns {Buffer} Finished buffer\n\t\t */\n\n\t\tBufferWriter._configure();\n\t\treturn writer_buffer;\n\t}\n\n\tvar reader;\n\tvar hasRequiredReader;\n\n\tfunction requireReader () {\n\t\tif (hasRequiredReader) return reader;\n\t\thasRequiredReader = 1;\n\t\treader = Reader;\n\n\t\tvar util      = requireMinimal$1();\n\n\t\tvar BufferReader; // cyclic\n\n\t\tvar LongBits  = util.LongBits,\n\t\t    utf8      = util.utf8;\n\n\t\t/* istanbul ignore next */\n\t\tfunction indexOutOfRange(reader, writeLength) {\n\t\t    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n\t\t}\n\n\t\t/**\n\t\t * Constructs a new reader instance using the specified buffer.\n\t\t * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n\t\t * @constructor\n\t\t * @param {Uint8Array} buffer Buffer to read from\n\t\t */\n\t\tfunction Reader(buffer) {\n\n\t\t    /**\n\t\t     * Read buffer.\n\t\t     * @type {Uint8Array}\n\t\t     */\n\t\t    this.buf = buffer;\n\n\t\t    /**\n\t\t     * Read buffer position.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.pos = 0;\n\n\t\t    /**\n\t\t     * Read buffer length.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.len = buffer.length;\n\t\t}\n\n\t\tvar create_array = typeof Uint8Array !== \"undefined\"\n\t\t    ? function create_typed_array(buffer) {\n\t\t        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n\t\t            return new Reader(buffer);\n\t\t        throw Error(\"illegal buffer\");\n\t\t    }\n\t\t    /* istanbul ignore next */\n\t\t    : function create_array(buffer) {\n\t\t        if (Array.isArray(buffer))\n\t\t            return new Reader(buffer);\n\t\t        throw Error(\"illegal buffer\");\n\t\t    };\n\n\t\tvar create = function create() {\n\t\t    return util.Buffer\n\t\t        ? function create_buffer_setup(buffer) {\n\t\t            return (Reader.create = function create_buffer(buffer) {\n\t\t                return util.Buffer.isBuffer(buffer)\n\t\t                    ? new BufferReader(buffer)\n\t\t                    /* istanbul ignore next */\n\t\t                    : create_array(buffer);\n\t\t            })(buffer);\n\t\t        }\n\t\t        /* istanbul ignore next */\n\t\t        : create_array;\n\t\t};\n\n\t\t/**\n\t\t * Creates a new reader using the specified buffer.\n\t\t * @function\n\t\t * @param {Uint8Array|Buffer} buffer Buffer to read from\n\t\t * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n\t\t * @throws {Error} If `buffer` is not a valid buffer\n\t\t */\n\t\tReader.create = create();\n\n\t\tReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n\t\t/**\n\t\t * Reads a varint as an unsigned 32 bit value.\n\t\t * @function\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.uint32 = (function read_uint32_setup() {\n\t\t    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n\t\t    return function read_uint32() {\n\t\t        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\t\t        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\t\t        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\t\t        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\t\t        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n\t\t        /* istanbul ignore if */\n\t\t        if ((this.pos += 5) > this.len) {\n\t\t            this.pos = this.len;\n\t\t            throw indexOutOfRange(this, 10);\n\t\t        }\n\t\t        return value;\n\t\t    };\n\t\t})();\n\n\t\t/**\n\t\t * Reads a varint as a signed 32 bit value.\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.int32 = function read_int32() {\n\t\t    return this.uint32() | 0;\n\t\t};\n\n\t\t/**\n\t\t * Reads a zig-zag encoded varint as a signed 32 bit value.\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.sint32 = function read_sint32() {\n\t\t    var value = this.uint32();\n\t\t    return value >>> 1 ^ -(value & 1) | 0;\n\t\t};\n\n\t\t/* eslint-disable no-invalid-this */\n\n\t\tfunction readLongVarint() {\n\t\t    // tends to deopt with local vars for octet etc.\n\t\t    var bits = new LongBits(0, 0);\n\t\t    var i = 0;\n\t\t    if (this.len - this.pos > 4) { // fast route (lo)\n\t\t        for (; i < 4; ++i) {\n\t\t            // 1st..4th\n\t\t            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n\t\t            if (this.buf[this.pos++] < 128)\n\t\t                return bits;\n\t\t        }\n\t\t        // 5th\n\t\t        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n\t\t        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n\t\t        if (this.buf[this.pos++] < 128)\n\t\t            return bits;\n\t\t        i = 0;\n\t\t    } else {\n\t\t        for (; i < 3; ++i) {\n\t\t            /* istanbul ignore if */\n\t\t            if (this.pos >= this.len)\n\t\t                throw indexOutOfRange(this);\n\t\t            // 1st..3th\n\t\t            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n\t\t            if (this.buf[this.pos++] < 128)\n\t\t                return bits;\n\t\t        }\n\t\t        // 4th\n\t\t        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n\t\t        return bits;\n\t\t    }\n\t\t    if (this.len - this.pos > 4) { // fast route (hi)\n\t\t        for (; i < 5; ++i) {\n\t\t            // 6th..10th\n\t\t            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n\t\t            if (this.buf[this.pos++] < 128)\n\t\t                return bits;\n\t\t        }\n\t\t    } else {\n\t\t        for (; i < 5; ++i) {\n\t\t            /* istanbul ignore if */\n\t\t            if (this.pos >= this.len)\n\t\t                throw indexOutOfRange(this);\n\t\t            // 6th..10th\n\t\t            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n\t\t            if (this.buf[this.pos++] < 128)\n\t\t                return bits;\n\t\t        }\n\t\t    }\n\t\t    /* istanbul ignore next */\n\t\t    throw Error(\"invalid varint encoding\");\n\t\t}\n\n\t\t/* eslint-enable no-invalid-this */\n\n\t\t/**\n\t\t * Reads a varint as a signed 64 bit value.\n\t\t * @name Reader#int64\n\t\t * @function\n\t\t * @returns {Long} Value read\n\t\t */\n\n\t\t/**\n\t\t * Reads a varint as an unsigned 64 bit value.\n\t\t * @name Reader#uint64\n\t\t * @function\n\t\t * @returns {Long} Value read\n\t\t */\n\n\t\t/**\n\t\t * Reads a zig-zag encoded varint as a signed 64 bit value.\n\t\t * @name Reader#sint64\n\t\t * @function\n\t\t * @returns {Long} Value read\n\t\t */\n\n\t\t/**\n\t\t * Reads a varint as a boolean.\n\t\t * @returns {boolean} Value read\n\t\t */\n\t\tReader.prototype.bool = function read_bool() {\n\t\t    return this.uint32() !== 0;\n\t\t};\n\n\t\tfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n\t\t    return (buf[end - 4]\n\t\t          | buf[end - 3] << 8\n\t\t          | buf[end - 2] << 16\n\t\t          | buf[end - 1] << 24) >>> 0;\n\t\t}\n\n\t\t/**\n\t\t * Reads fixed 32 bits as an unsigned 32 bit integer.\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.fixed32 = function read_fixed32() {\n\n\t\t    /* istanbul ignore if */\n\t\t    if (this.pos + 4 > this.len)\n\t\t        throw indexOutOfRange(this, 4);\n\n\t\t    return readFixed32_end(this.buf, this.pos += 4);\n\t\t};\n\n\t\t/**\n\t\t * Reads fixed 32 bits as a signed 32 bit integer.\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.sfixed32 = function read_sfixed32() {\n\n\t\t    /* istanbul ignore if */\n\t\t    if (this.pos + 4 > this.len)\n\t\t        throw indexOutOfRange(this, 4);\n\n\t\t    return readFixed32_end(this.buf, this.pos += 4) | 0;\n\t\t};\n\n\t\t/* eslint-disable no-invalid-this */\n\n\t\tfunction readFixed64(/* this: Reader */) {\n\n\t\t    /* istanbul ignore if */\n\t\t    if (this.pos + 8 > this.len)\n\t\t        throw indexOutOfRange(this, 8);\n\n\t\t    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n\t\t}\n\n\t\t/* eslint-enable no-invalid-this */\n\n\t\t/**\n\t\t * Reads fixed 64 bits.\n\t\t * @name Reader#fixed64\n\t\t * @function\n\t\t * @returns {Long} Value read\n\t\t */\n\n\t\t/**\n\t\t * Reads zig-zag encoded fixed 64 bits.\n\t\t * @name Reader#sfixed64\n\t\t * @function\n\t\t * @returns {Long} Value read\n\t\t */\n\n\t\t/**\n\t\t * Reads a float (32 bit) as a number.\n\t\t * @function\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.float = function read_float() {\n\n\t\t    /* istanbul ignore if */\n\t\t    if (this.pos + 4 > this.len)\n\t\t        throw indexOutOfRange(this, 4);\n\n\t\t    var value = util.float.readFloatLE(this.buf, this.pos);\n\t\t    this.pos += 4;\n\t\t    return value;\n\t\t};\n\n\t\t/**\n\t\t * Reads a double (64 bit float) as a number.\n\t\t * @function\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.double = function read_double() {\n\n\t\t    /* istanbul ignore if */\n\t\t    if (this.pos + 8 > this.len)\n\t\t        throw indexOutOfRange(this, 4);\n\n\t\t    var value = util.float.readDoubleLE(this.buf, this.pos);\n\t\t    this.pos += 8;\n\t\t    return value;\n\t\t};\n\n\t\t/**\n\t\t * Reads a sequence of bytes preceeded by its length as a varint.\n\t\t * @returns {Uint8Array} Value read\n\t\t */\n\t\tReader.prototype.bytes = function read_bytes() {\n\t\t    var length = this.uint32(),\n\t\t        start  = this.pos,\n\t\t        end    = this.pos + length;\n\n\t\t    /* istanbul ignore if */\n\t\t    if (end > this.len)\n\t\t        throw indexOutOfRange(this, length);\n\n\t\t    this.pos += length;\n\t\t    if (Array.isArray(this.buf)) // plain array\n\t\t        return this.buf.slice(start, end);\n\t\t    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n\t\t        ? new this.buf.constructor(0)\n\t\t        : this._slice.call(this.buf, start, end);\n\t\t};\n\n\t\t/**\n\t\t * Reads a string preceeded by its byte length as a varint.\n\t\t * @returns {string} Value read\n\t\t */\n\t\tReader.prototype.string = function read_string() {\n\t\t    var bytes = this.bytes();\n\t\t    return utf8.read(bytes, 0, bytes.length);\n\t\t};\n\n\t\t/**\n\t\t * Skips the specified number of bytes if specified, otherwise skips a varint.\n\t\t * @param {number} [length] Length if known, otherwise a varint is assumed\n\t\t * @returns {Reader} `this`\n\t\t */\n\t\tReader.prototype.skip = function skip(length) {\n\t\t    if (typeof length === \"number\") {\n\t\t        /* istanbul ignore if */\n\t\t        if (this.pos + length > this.len)\n\t\t            throw indexOutOfRange(this, length);\n\t\t        this.pos += length;\n\t\t    } else {\n\t\t        do {\n\t\t            /* istanbul ignore if */\n\t\t            if (this.pos >= this.len)\n\t\t                throw indexOutOfRange(this);\n\t\t        } while (this.buf[this.pos++] & 128);\n\t\t    }\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Skips the next element of the specified wire type.\n\t\t * @param {number} wireType Wire type received\n\t\t * @returns {Reader} `this`\n\t\t */\n\t\tReader.prototype.skipType = function(wireType) {\n\t\t    switch (wireType) {\n\t\t        case 0:\n\t\t            this.skip();\n\t\t            break;\n\t\t        case 1:\n\t\t            this.skip(8);\n\t\t            break;\n\t\t        case 2:\n\t\t            this.skip(this.uint32());\n\t\t            break;\n\t\t        case 3:\n\t\t            while ((wireType = this.uint32() & 7) !== 4) {\n\t\t                this.skipType(wireType);\n\t\t            }\n\t\t            break;\n\t\t        case 5:\n\t\t            this.skip(4);\n\t\t            break;\n\n\t\t        /* istanbul ignore next */\n\t\t        default:\n\t\t            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n\t\t    }\n\t\t    return this;\n\t\t};\n\n\t\tReader._configure = function(BufferReader_) {\n\t\t    BufferReader = BufferReader_;\n\t\t    Reader.create = create();\n\t\t    BufferReader._configure();\n\n\t\t    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n\t\t    util.merge(Reader.prototype, {\n\n\t\t        int64: function read_int64() {\n\t\t            return readLongVarint.call(this)[fn](false);\n\t\t        },\n\n\t\t        uint64: function read_uint64() {\n\t\t            return readLongVarint.call(this)[fn](true);\n\t\t        },\n\n\t\t        sint64: function read_sint64() {\n\t\t            return readLongVarint.call(this).zzDecode()[fn](false);\n\t\t        },\n\n\t\t        fixed64: function read_fixed64() {\n\t\t            return readFixed64.call(this)[fn](true);\n\t\t        },\n\n\t\t        sfixed64: function read_sfixed64() {\n\t\t            return readFixed64.call(this)[fn](false);\n\t\t        }\n\n\t\t    });\n\t\t};\n\t\treturn reader;\n\t}\n\n\tvar reader_buffer;\n\tvar hasRequiredReader_buffer;\n\n\tfunction requireReader_buffer () {\n\t\tif (hasRequiredReader_buffer) return reader_buffer;\n\t\thasRequiredReader_buffer = 1;\n\t\treader_buffer = BufferReader;\n\n\t\t// extends Reader\n\t\tvar Reader = requireReader();\n\t\t(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\n\t\tvar util = requireMinimal$1();\n\n\t\t/**\n\t\t * Constructs a new buffer reader instance.\n\t\t * @classdesc Wire format reader using node buffers.\n\t\t * @extends Reader\n\t\t * @constructor\n\t\t * @param {Buffer} buffer Buffer to read from\n\t\t */\n\t\tfunction BufferReader(buffer) {\n\t\t    Reader.call(this, buffer);\n\n\t\t    /**\n\t\t     * Read buffer.\n\t\t     * @name BufferReader#buf\n\t\t     * @type {Buffer}\n\t\t     */\n\t\t}\n\n\t\tBufferReader._configure = function () {\n\t\t    /* istanbul ignore else */\n\t\t    if (util.Buffer)\n\t\t        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n\t\t};\n\n\n\t\t/**\n\t\t * @override\n\t\t */\n\t\tBufferReader.prototype.string = function read_string_buffer() {\n\t\t    var len = this.uint32(); // modifies pos\n\t\t    return this.buf.utf8Slice\n\t\t        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n\t\t        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n\t\t};\n\n\t\t/**\n\t\t * Reads a sequence of bytes preceeded by its length as a varint.\n\t\t * @name BufferReader#bytes\n\t\t * @function\n\t\t * @returns {Buffer} Value read\n\t\t */\n\n\t\tBufferReader._configure();\n\t\treturn reader_buffer;\n\t}\n\n\tvar rpc = {};\n\n\tvar service;\n\tvar hasRequiredService;\n\n\tfunction requireService () {\n\t\tif (hasRequiredService) return service;\n\t\thasRequiredService = 1;\n\t\tservice = Service;\n\n\t\tvar util = requireMinimal$1();\n\n\t\t// Extends EventEmitter\n\t\t(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n\t\t/**\n\t\t * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n\t\t *\n\t\t * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n\t\t * @typedef rpc.ServiceMethodCallback\n\t\t * @template TRes extends Message<TRes>\n\t\t * @type {function}\n\t\t * @param {Error|null} error Error, if any\n\t\t * @param {TRes} [response] Response message\n\t\t * @returns {undefined}\n\t\t */\n\n\t\t/**\n\t\t * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n\t\t * @typedef rpc.ServiceMethod\n\t\t * @template TReq extends Message<TReq>\n\t\t * @template TRes extends Message<TRes>\n\t\t * @type {function}\n\t\t * @param {TReq|Properties<TReq>} request Request message or plain object\n\t\t * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n\t\t * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n\t\t */\n\n\t\t/**\n\t\t * Constructs a new RPC service instance.\n\t\t * @classdesc An RPC service as returned by {@link Service#create}.\n\t\t * @exports rpc.Service\n\t\t * @extends util.EventEmitter\n\t\t * @constructor\n\t\t * @param {RPCImpl} rpcImpl RPC implementation\n\t\t * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n\t\t * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n\t\t */\n\t\tfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n\t\t    if (typeof rpcImpl !== \"function\")\n\t\t        throw TypeError(\"rpcImpl must be a function\");\n\n\t\t    util.EventEmitter.call(this);\n\n\t\t    /**\n\t\t     * RPC implementation. Becomes `null` once the service is ended.\n\t\t     * @type {RPCImpl|null}\n\t\t     */\n\t\t    this.rpcImpl = rpcImpl;\n\n\t\t    /**\n\t\t     * Whether requests are length-delimited.\n\t\t     * @type {boolean}\n\t\t     */\n\t\t    this.requestDelimited = Boolean(requestDelimited);\n\n\t\t    /**\n\t\t     * Whether responses are length-delimited.\n\t\t     * @type {boolean}\n\t\t     */\n\t\t    this.responseDelimited = Boolean(responseDelimited);\n\t\t}\n\n\t\t/**\n\t\t * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n\t\t * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n\t\t * @param {Constructor<TReq>} requestCtor Request constructor\n\t\t * @param {Constructor<TRes>} responseCtor Response constructor\n\t\t * @param {TReq|Properties<TReq>} request Request message or plain object\n\t\t * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n\t\t * @returns {undefined}\n\t\t * @template TReq extends Message<TReq>\n\t\t * @template TRes extends Message<TRes>\n\t\t */\n\t\tService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n\t\t    if (!request)\n\t\t        throw TypeError(\"request must be specified\");\n\n\t\t    var self = this;\n\t\t    if (!callback)\n\t\t        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n\t\t    if (!self.rpcImpl) {\n\t\t        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n\t\t        return undefined;\n\t\t    }\n\n\t\t    try {\n\t\t        return self.rpcImpl(\n\t\t            method,\n\t\t            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n\t\t            function rpcCallback(err, response) {\n\n\t\t                if (err) {\n\t\t                    self.emit(\"error\", err, method);\n\t\t                    return callback(err);\n\t\t                }\n\n\t\t                if (response === null) {\n\t\t                    self.end(/* endedByRPC */ true);\n\t\t                    return undefined;\n\t\t                }\n\n\t\t                if (!(response instanceof responseCtor)) {\n\t\t                    try {\n\t\t                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n\t\t                    } catch (err) {\n\t\t                        self.emit(\"error\", err, method);\n\t\t                        return callback(err);\n\t\t                    }\n\t\t                }\n\n\t\t                self.emit(\"data\", response, method);\n\t\t                return callback(null, response);\n\t\t            }\n\t\t        );\n\t\t    } catch (err) {\n\t\t        self.emit(\"error\", err, method);\n\t\t        setTimeout(function() { callback(err); }, 0);\n\t\t        return undefined;\n\t\t    }\n\t\t};\n\n\t\t/**\n\t\t * Ends this service and emits the `end` event.\n\t\t * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n\t\t * @returns {rpc.Service} `this`\n\t\t */\n\t\tService.prototype.end = function end(endedByRPC) {\n\t\t    if (this.rpcImpl) {\n\t\t        if (!endedByRPC) // signal end to rpcImpl\n\t\t            this.rpcImpl(null, null, null);\n\t\t        this.rpcImpl = null;\n\t\t        this.emit(\"end\").off();\n\t\t    }\n\t\t    return this;\n\t\t};\n\t\treturn service;\n\t}\n\n\tvar hasRequiredRpc;\n\n\tfunction requireRpc () {\n\t\tif (hasRequiredRpc) return rpc;\n\t\thasRequiredRpc = 1;\n\t\t(function (exports) {\n\n\t\t\t/**\n\t\t\t * Streaming RPC helpers.\n\t\t\t * @namespace\n\t\t\t */\n\t\t\tvar rpc = exports;\n\n\t\t\t/**\n\t\t\t * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n\t\t\t * @typedef RPCImpl\n\t\t\t * @type {function}\n\t\t\t * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n\t\t\t * @param {Uint8Array} requestData Request data\n\t\t\t * @param {RPCImplCallback} callback Callback function\n\t\t\t * @returns {undefined}\n\t\t\t * @example\n\t\t\t * function rpcImpl(method, requestData, callback) {\n\t\t\t *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n\t\t\t *         throw Error(\"no such method\");\n\t\t\t *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n\t\t\t *         callback(err, responseData);\n\t\t\t *     });\n\t\t\t * }\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Node-style callback as used by {@link RPCImpl}.\n\t\t\t * @typedef RPCImplCallback\n\t\t\t * @type {function}\n\t\t\t * @param {Error|null} error Error, if any, otherwise `null`\n\t\t\t * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n\t\t\t * @returns {undefined}\n\t\t\t */\n\n\t\t\trpc.Service = requireService();\n\t} (rpc));\n\t\treturn rpc;\n\t}\n\n\tvar roots;\n\tvar hasRequiredRoots;\n\n\tfunction requireRoots () {\n\t\tif (hasRequiredRoots) return roots;\n\t\thasRequiredRoots = 1;\n\t\troots = {};\n\n\t\t/**\n\t\t * Named roots.\n\t\t * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n\t\t * Can also be used manually to make roots available accross modules.\n\t\t * @name roots\n\t\t * @type {Object.<string,Root>}\n\t\t * @example\n\t\t * // pbjs -r myroot -o compiled.js ...\n\t\t *\n\t\t * // in another module:\n\t\t * require(\"./compiled.js\");\n\t\t *\n\t\t * // in any subsequent module:\n\t\t * var root = protobuf.roots[\"myroot\"];\n\t\t */\n\t\treturn roots;\n\t}\n\n\tvar hasRequiredIndexMinimal;\n\n\tfunction requireIndexMinimal () {\n\t\tif (hasRequiredIndexMinimal) return indexMinimal;\n\t\thasRequiredIndexMinimal = 1;\n\t\t(function (exports) {\n\t\t\tvar protobuf = exports;\n\n\t\t\t/**\n\t\t\t * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n\t\t\t * @name build\n\t\t\t * @type {string}\n\t\t\t * @const\n\t\t\t */\n\t\t\tprotobuf.build = \"minimal\";\n\n\t\t\t// Serialization\n\t\t\tprotobuf.Writer       = requireWriter();\n\t\t\tprotobuf.BufferWriter = requireWriter_buffer();\n\t\t\tprotobuf.Reader       = requireReader();\n\t\t\tprotobuf.BufferReader = requireReader_buffer();\n\n\t\t\t// Utility\n\t\t\tprotobuf.util         = requireMinimal$1();\n\t\t\tprotobuf.rpc          = requireRpc();\n\t\t\tprotobuf.roots        = requireRoots();\n\t\t\tprotobuf.configure    = configure;\n\n\t\t\t/* istanbul ignore next */\n\t\t\t/**\n\t\t\t * Reconfigures the library according to the environment.\n\t\t\t * @returns {undefined}\n\t\t\t */\n\t\t\tfunction configure() {\n\t\t\t    protobuf.util._configure();\n\t\t\t    protobuf.Writer._configure(protobuf.BufferWriter);\n\t\t\t    protobuf.Reader._configure(protobuf.BufferReader);\n\t\t\t}\n\n\t\t\t// Set up buffer utility according to the environment\n\t\t\tconfigure();\n\t} (indexMinimal));\n\t\treturn indexMinimal;\n\t}\n\n\tvar hasRequiredMinimal;\n\n\tfunction requireMinimal () {\n\t\tif (hasRequiredMinimal) return minimal$1.exports;\n\t\thasRequiredMinimal = 1;\n\t\t(function (module) {\n\t\t\tmodule.exports = requireIndexMinimal();\n\t} (minimal$1));\n\t\treturn minimal$1.exports;\n\t}\n\n\tvar minimalExports = requireMinimal();\n\n\t/* eslint-disable */\n\tfunction createBasePBAnimator() {\n\t    return { states: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAnimator = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        for (const v of message.states) {\n\t            PBAnimationState.encode(v, writer.uint32(10).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAnimator();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.states.push(PBAnimationState.decode(reader, reader.uint32()));\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBAnimationState() {\n\t    return {\n\t        name: '',\n\t        clip: '',\n\t        playing: undefined,\n\t        weight: undefined,\n\t        speed: undefined,\n\t        loop: undefined,\n\t        shouldReset: undefined\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAnimationState = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.name !== '') {\n\t            writer.uint32(10).string(message.name);\n\t        }\n\t        if (message.clip !== '') {\n\t            writer.uint32(18).string(message.clip);\n\t        }\n\t        if (message.playing !== undefined) {\n\t            writer.uint32(24).bool(message.playing);\n\t        }\n\t        if (message.weight !== undefined) {\n\t            writer.uint32(37).float(message.weight);\n\t        }\n\t        if (message.speed !== undefined) {\n\t            writer.uint32(45).float(message.speed);\n\t        }\n\t        if (message.loop !== undefined) {\n\t            writer.uint32(48).bool(message.loop);\n\t        }\n\t        if (message.shouldReset !== undefined) {\n\t            writer.uint32(56).bool(message.shouldReset);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAnimationState();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.name = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.clip = reader.string();\n\t                    break;\n\t                case 3:\n\t                    message.playing = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    message.weight = reader.float();\n\t                    break;\n\t                case 5:\n\t                    message.speed = reader.float();\n\t                    break;\n\t                case 6:\n\t                    message.loop = reader.bool();\n\t                    break;\n\t                case 7:\n\t                    message.shouldReset = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$i = 1042;\n\t/**\n\t * @internal\n\t */\n\tconst AnimatorSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBAnimator.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBAnimator.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBAnimator.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBAudioSource() {\n\t    return { playing: undefined, volume: undefined, loop: undefined, pitch: undefined, audioClipUrl: '' };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAudioSource = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.playing !== undefined) {\n\t            writer.uint32(8).bool(message.playing);\n\t        }\n\t        if (message.volume !== undefined) {\n\t            writer.uint32(21).float(message.volume);\n\t        }\n\t        if (message.loop !== undefined) {\n\t            writer.uint32(24).bool(message.loop);\n\t        }\n\t        if (message.pitch !== undefined) {\n\t            writer.uint32(37).float(message.pitch);\n\t        }\n\t        if (message.audioClipUrl !== '') {\n\t            writer.uint32(42).string(message.audioClipUrl);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAudioSource();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.playing = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.volume = reader.float();\n\t                    break;\n\t                case 3:\n\t                    message.loop = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    message.pitch = reader.float();\n\t                    break;\n\t                case 5:\n\t                    message.audioClipUrl = reader.string();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$h = 1020;\n\t/**\n\t * @internal\n\t */\n\tconst AudioSourceSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBAudioSource.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBAudioSource.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBAudioSource.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tvar AvatarAnchorPoint;\n\t(function (AvatarAnchorPoint) {\n\t    AvatarAnchorPoint[AvatarAnchorPoint[\"POSITION\"] = 0] = \"POSITION\";\n\t    AvatarAnchorPoint[AvatarAnchorPoint[\"NAME_TAG\"] = 1] = \"NAME_TAG\";\n\t    AvatarAnchorPoint[AvatarAnchorPoint[\"LEFT_HAND\"] = 2] = \"LEFT_HAND\";\n\t    AvatarAnchorPoint[AvatarAnchorPoint[\"RIGHT_HAND\"] = 3] = \"RIGHT_HAND\";\n\t    AvatarAnchorPoint[AvatarAnchorPoint[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(AvatarAnchorPoint || (AvatarAnchorPoint = {}));\n\tfunction createBasePBAvatarAttach() {\n\t    return { avatarId: '', anchorPointId: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAvatarAttach = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.avatarId !== '') {\n\t            writer.uint32(10).string(message.avatarId);\n\t        }\n\t        if (message.anchorPointId !== 0) {\n\t            writer.uint32(16).int32(message.anchorPointId);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAvatarAttach();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.avatarId = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.anchorPointId = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$g = 1073;\n\t/**\n\t * @internal\n\t */\n\tconst AvatarAttachSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBAvatarAttach.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBAvatarAttach.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBAvatarAttach.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBaseColor3() {\n\t    return { r: 0, g: 0, b: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst Color3 = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.r !== 0) {\n\t            writer.uint32(13).float(message.r);\n\t        }\n\t        if (message.g !== 0) {\n\t            writer.uint32(21).float(message.g);\n\t        }\n\t        if (message.b !== 0) {\n\t            writer.uint32(29).float(message.b);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBaseColor3();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.r = reader.float();\n\t                    break;\n\t                case 2:\n\t                    message.g = reader.float();\n\t                    break;\n\t                case 3:\n\t                    message.b = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\tfunction createBasePBAvatarShape() {\n\t    return {\n\t        id: '',\n\t        name: undefined,\n\t        bodyShape: undefined,\n\t        skinColor: undefined,\n\t        hairColor: undefined,\n\t        eyeColor: undefined,\n\t        wearables: [],\n\t        expressionTriggerId: undefined,\n\t        expressionTriggerTimestamp: undefined,\n\t        stickerTriggerId: undefined,\n\t        stickerTriggerTimestamp: undefined,\n\t        talking: undefined\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAvatarShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.id !== '') {\n\t            writer.uint32(10).string(message.id);\n\t        }\n\t        if (message.name !== undefined) {\n\t            writer.uint32(18).string(message.name);\n\t        }\n\t        if (message.bodyShape !== undefined) {\n\t            writer.uint32(26).string(message.bodyShape);\n\t        }\n\t        if (message.skinColor !== undefined) {\n\t            Color3.encode(message.skinColor, writer.uint32(34).fork()).ldelim();\n\t        }\n\t        if (message.hairColor !== undefined) {\n\t            Color3.encode(message.hairColor, writer.uint32(42).fork()).ldelim();\n\t        }\n\t        if (message.eyeColor !== undefined) {\n\t            Color3.encode(message.eyeColor, writer.uint32(50).fork()).ldelim();\n\t        }\n\t        for (const v of message.wearables) {\n\t            writer.uint32(58).string(v);\n\t        }\n\t        if (message.expressionTriggerId !== undefined) {\n\t            writer.uint32(66).string(message.expressionTriggerId);\n\t        }\n\t        if (message.expressionTriggerTimestamp !== undefined) {\n\t            writer.uint32(72).int64(message.expressionTriggerTimestamp);\n\t        }\n\t        if (message.stickerTriggerId !== undefined) {\n\t            writer.uint32(82).string(message.stickerTriggerId);\n\t        }\n\t        if (message.stickerTriggerTimestamp !== undefined) {\n\t            writer.uint32(88).int64(message.stickerTriggerTimestamp);\n\t        }\n\t        if (message.talking !== undefined) {\n\t            writer.uint32(96).bool(message.talking);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAvatarShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.id = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.name = reader.string();\n\t                    break;\n\t                case 3:\n\t                    message.bodyShape = reader.string();\n\t                    break;\n\t                case 4:\n\t                    message.skinColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 5:\n\t                    message.hairColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 6:\n\t                    message.eyeColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 7:\n\t                    message.wearables.push(reader.string());\n\t                    break;\n\t                case 8:\n\t                    message.expressionTriggerId = reader.string();\n\t                    break;\n\t                case 9:\n\t                    message.expressionTriggerTimestamp = longToNumber(reader.int64());\n\t                    break;\n\t                case 10:\n\t                    message.stickerTriggerId = reader.string();\n\t                    break;\n\t                case 11:\n\t                    message.stickerTriggerTimestamp = longToNumber(reader.int64());\n\t                    break;\n\t                case 12:\n\t                    message.talking = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tvar globalThis$1 = (() => {\n\t    if (typeof globalThis$1 !== 'undefined')\n\t        return globalThis$1;\n\t    if (typeof self !== 'undefined')\n\t        return self;\n\t    if (typeof window !== 'undefined')\n\t        return window;\n\t    if (typeof global !== 'undefined')\n\t        return global;\n\t    throw 'Unable to locate global object';\n\t})();\n\tfunction longToNumber(long) {\n\t    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n\t        throw new globalThis$1.Error('Value is larger than Number.MAX_SAFE_INTEGER');\n\t    }\n\t    return long.toNumber();\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$f = 1080;\n\t/**\n\t * @internal\n\t */\n\tconst AvatarShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBAvatarShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBAvatarShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBAvatarShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBBillboard() {\n\t    return { x: undefined, y: undefined, z: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBBillboard = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.x !== undefined) {\n\t            writer.uint32(8).bool(message.x);\n\t        }\n\t        if (message.y !== undefined) {\n\t            writer.uint32(16).bool(message.y);\n\t        }\n\t        if (message.z !== undefined) {\n\t            writer.uint32(24).bool(message.z);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBBillboard();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.x = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.y = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.z = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$e = 1090;\n\t/**\n\t * @internal\n\t */\n\tconst BillboardSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBBillboard.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBBillboard.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBBillboard.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBBoxShape() {\n\t    return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined, uvs: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBBoxShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.withCollisions !== undefined) {\n\t            writer.uint32(8).bool(message.withCollisions);\n\t        }\n\t        if (message.isPointerBlocker !== undefined) {\n\t            writer.uint32(16).bool(message.isPointerBlocker);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(24).bool(message.visible);\n\t        }\n\t        writer.uint32(34).fork();\n\t        for (const v of message.uvs) {\n\t            writer.float(v);\n\t        }\n\t        writer.ldelim();\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBBoxShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.withCollisions = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.isPointerBlocker = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    if ((tag & 7) === 2) {\n\t                        const end2 = reader.uint32() + reader.pos;\n\t                        while (reader.pos < end2) {\n\t                            message.uvs.push(reader.float());\n\t                        }\n\t                    }\n\t                    else {\n\t                        message.uvs.push(reader.float());\n\t                    }\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$d = 1013;\n\t/**\n\t * @internal\n\t */\n\tconst BoxShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBBoxShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBBoxShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBBoxShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBCameraMode() {\n\t    return { mode: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBCameraMode = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.mode !== 0) {\n\t            writer.uint32(8).int32(message.mode);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBCameraMode();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.mode = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$c = 1072;\n\t/**\n\t * @internal\n\t */\n\tconst CameraModeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBCameraMode.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBCameraMode.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBCameraMode.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBaseVector3() {\n\t    return { x: 0, y: 0, z: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst Vector3 = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.x !== 0) {\n\t            writer.uint32(13).float(message.x);\n\t        }\n\t        if (message.y !== 0) {\n\t            writer.uint32(21).float(message.y);\n\t        }\n\t        if (message.z !== 0) {\n\t            writer.uint32(29).float(message.z);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBaseVector3();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.x = reader.float();\n\t                    break;\n\t                case 2:\n\t                    message.y = reader.float();\n\t                    break;\n\t                case 3:\n\t                    message.z = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\tfunction createBasePBCameraModeArea() {\n\t    return { area: undefined, mode: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBCameraModeArea = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.area !== undefined) {\n\t            Vector3.encode(message.area, writer.uint32(10).fork()).ldelim();\n\t        }\n\t        if (message.mode !== 0) {\n\t            writer.uint32(16).int32(message.mode);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBCameraModeArea();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.area = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 2:\n\t                    message.mode = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$b = 1071;\n\t/**\n\t * @internal\n\t */\n\tconst CameraModeAreaSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBCameraModeArea.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBCameraModeArea.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBCameraModeArea.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBCylinderShape() {\n\t    return {\n\t        withCollisions: undefined,\n\t        isPointerBlocker: undefined,\n\t        visible: undefined,\n\t        radiusTop: undefined,\n\t        radiusBottom: undefined\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBCylinderShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.withCollisions !== undefined) {\n\t            writer.uint32(8).bool(message.withCollisions);\n\t        }\n\t        if (message.isPointerBlocker !== undefined) {\n\t            writer.uint32(16).bool(message.isPointerBlocker);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(24).bool(message.visible);\n\t        }\n\t        if (message.radiusTop !== undefined) {\n\t            writer.uint32(37).float(message.radiusTop);\n\t        }\n\t        if (message.radiusBottom !== undefined) {\n\t            writer.uint32(45).float(message.radiusBottom);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBCylinderShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.withCollisions = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.isPointerBlocker = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    message.radiusTop = reader.float();\n\t                    break;\n\t                case 5:\n\t                    message.radiusBottom = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$a = 1016;\n\t/**\n\t * @internal\n\t */\n\tconst CylinderShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBCylinderShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBCylinderShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBCylinderShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBGLTFShape() {\n\t    return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined, src: '' };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBGLTFShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.withCollisions !== undefined) {\n\t            writer.uint32(8).bool(message.withCollisions);\n\t        }\n\t        if (message.isPointerBlocker !== undefined) {\n\t            writer.uint32(16).bool(message.isPointerBlocker);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(24).bool(message.visible);\n\t        }\n\t        if (message.src !== '') {\n\t            writer.uint32(34).string(message.src);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBGLTFShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.withCollisions = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.isPointerBlocker = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    message.src = reader.string();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$9 = 1041;\n\t/**\n\t * @internal\n\t */\n\tconst GLTFShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBGLTFShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBGLTFShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBGLTFShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBNFTShape() {\n\t    return {\n\t        withCollisions: undefined,\n\t        isPointerBlocker: undefined,\n\t        visible: undefined,\n\t        src: '',\n\t        assetId: undefined,\n\t        style: undefined,\n\t        color: undefined\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBNFTShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.withCollisions !== undefined) {\n\t            writer.uint32(8).bool(message.withCollisions);\n\t        }\n\t        if (message.isPointerBlocker !== undefined) {\n\t            writer.uint32(16).bool(message.isPointerBlocker);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(24).bool(message.visible);\n\t        }\n\t        if (message.src !== '') {\n\t            writer.uint32(34).string(message.src);\n\t        }\n\t        if (message.assetId !== undefined) {\n\t            writer.uint32(42).string(message.assetId);\n\t        }\n\t        if (message.style !== undefined) {\n\t            writer.uint32(48).int32(message.style);\n\t        }\n\t        if (message.color !== undefined) {\n\t            Color3.encode(message.color, writer.uint32(58).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBNFTShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.withCollisions = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.isPointerBlocker = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    message.src = reader.string();\n\t                    break;\n\t                case 5:\n\t                    message.assetId = reader.string();\n\t                    break;\n\t                case 6:\n\t                    message.style = reader.int32();\n\t                    break;\n\t                case 7:\n\t                    message.color = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$8 = 1040;\n\t/**\n\t * @internal\n\t */\n\tconst NFTShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBNFTShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBNFTShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBNFTShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBOnPointerDown() {\n\t    return { button: undefined, hoverText: undefined, maxDistance: undefined, showFeedback: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBOnPointerDown = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.button !== undefined) {\n\t            writer.uint32(8).int32(message.button);\n\t        }\n\t        if (message.hoverText !== undefined) {\n\t            writer.uint32(18).string(message.hoverText);\n\t        }\n\t        if (message.maxDistance !== undefined) {\n\t            writer.uint32(29).float(message.maxDistance);\n\t        }\n\t        if (message.showFeedback !== undefined) {\n\t            writer.uint32(32).bool(message.showFeedback);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBOnPointerDown();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.button = reader.int32();\n\t                    break;\n\t                case 2:\n\t                    message.hoverText = reader.string();\n\t                    break;\n\t                case 3:\n\t                    message.maxDistance = reader.float();\n\t                    break;\n\t                case 4:\n\t                    message.showFeedback = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$7 = 1060;\n\t/**\n\t * @internal\n\t */\n\tconst OnPointerDownSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBOnPointerDown.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBOnPointerDown.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBOnPointerDown.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBOnPointerDownResult() {\n\t    return {\n\t        button: 0,\n\t        meshName: '',\n\t        origin: undefined,\n\t        direction: undefined,\n\t        point: undefined,\n\t        normal: undefined,\n\t        distance: 0,\n\t        timestamp: 0\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBOnPointerDownResult = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.button !== 0) {\n\t            writer.uint32(16).int32(message.button);\n\t        }\n\t        if (message.meshName !== '') {\n\t            writer.uint32(26).string(message.meshName);\n\t        }\n\t        if (message.origin !== undefined) {\n\t            Vector3.encode(message.origin, writer.uint32(34).fork()).ldelim();\n\t        }\n\t        if (message.direction !== undefined) {\n\t            Vector3.encode(message.direction, writer.uint32(42).fork()).ldelim();\n\t        }\n\t        if (message.point !== undefined) {\n\t            Vector3.encode(message.point, writer.uint32(50).fork()).ldelim();\n\t        }\n\t        if (message.normal !== undefined) {\n\t            Vector3.encode(message.normal, writer.uint32(58).fork()).ldelim();\n\t        }\n\t        if (message.distance !== 0) {\n\t            writer.uint32(69).float(message.distance);\n\t        }\n\t        if (message.timestamp !== 0) {\n\t            writer.uint32(72).int32(message.timestamp);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBOnPointerDownResult();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 2:\n\t                    message.button = reader.int32();\n\t                    break;\n\t                case 3:\n\t                    message.meshName = reader.string();\n\t                    break;\n\t                case 4:\n\t                    message.origin = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 5:\n\t                    message.direction = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 6:\n\t                    message.point = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 7:\n\t                    message.normal = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 8:\n\t                    message.distance = reader.float();\n\t                    break;\n\t                case 9:\n\t                    message.timestamp = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$6 = 1066;\n\t/**\n\t * @internal\n\t */\n\tconst OnPointerDownResultSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBOnPointerDownResult.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBOnPointerDownResult.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBOnPointerDownResult.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBOnPointerUp() {\n\t    return { button: undefined, hoverText: undefined, maxDistance: undefined, showFeedback: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBOnPointerUp = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.button !== undefined) {\n\t            writer.uint32(8).int32(message.button);\n\t        }\n\t        if (message.hoverText !== undefined) {\n\t            writer.uint32(18).string(message.hoverText);\n\t        }\n\t        if (message.maxDistance !== undefined) {\n\t            writer.uint32(29).float(message.maxDistance);\n\t        }\n\t        if (message.showFeedback !== undefined) {\n\t            writer.uint32(32).bool(message.showFeedback);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBOnPointerUp();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.button = reader.int32();\n\t                    break;\n\t                case 2:\n\t                    message.hoverText = reader.string();\n\t                    break;\n\t                case 3:\n\t                    message.maxDistance = reader.float();\n\t                    break;\n\t                case 4:\n\t                    message.showFeedback = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$5 = 1061;\n\t/**\n\t * @internal\n\t */\n\tconst OnPointerUpSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBOnPointerUp.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBOnPointerUp.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBOnPointerUp.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBOnPointerUpResult() {\n\t    return {\n\t        button: 0,\n\t        meshName: '',\n\t        origin: undefined,\n\t        direction: undefined,\n\t        point: undefined,\n\t        normal: undefined,\n\t        distance: 0,\n\t        timestamp: 0\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBOnPointerUpResult = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.button !== 0) {\n\t            writer.uint32(16).int32(message.button);\n\t        }\n\t        if (message.meshName !== '') {\n\t            writer.uint32(26).string(message.meshName);\n\t        }\n\t        if (message.origin !== undefined) {\n\t            Vector3.encode(message.origin, writer.uint32(34).fork()).ldelim();\n\t        }\n\t        if (message.direction !== undefined) {\n\t            Vector3.encode(message.direction, writer.uint32(42).fork()).ldelim();\n\t        }\n\t        if (message.point !== undefined) {\n\t            Vector3.encode(message.point, writer.uint32(50).fork()).ldelim();\n\t        }\n\t        if (message.normal !== undefined) {\n\t            Vector3.encode(message.normal, writer.uint32(58).fork()).ldelim();\n\t        }\n\t        if (message.distance !== 0) {\n\t            writer.uint32(69).float(message.distance);\n\t        }\n\t        if (message.timestamp !== 0) {\n\t            writer.uint32(72).int32(message.timestamp);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBOnPointerUpResult();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 2:\n\t                    message.button = reader.int32();\n\t                    break;\n\t                case 3:\n\t                    message.meshName = reader.string();\n\t                    break;\n\t                case 4:\n\t                    message.origin = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 5:\n\t                    message.direction = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 6:\n\t                    message.point = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 7:\n\t                    message.normal = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 8:\n\t                    message.distance = reader.float();\n\t                    break;\n\t                case 9:\n\t                    message.timestamp = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$4 = 1065;\n\t/**\n\t * @internal\n\t */\n\tconst OnPointerUpResultSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBOnPointerUpResult.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBOnPointerUpResult.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBOnPointerUpResult.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBPlaneShape() {\n\t    return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined, uvs: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBPlaneShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.withCollisions !== undefined) {\n\t            writer.uint32(8).bool(message.withCollisions);\n\t        }\n\t        if (message.isPointerBlocker !== undefined) {\n\t            writer.uint32(16).bool(message.isPointerBlocker);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(24).bool(message.visible);\n\t        }\n\t        writer.uint32(34).fork();\n\t        for (const v of message.uvs) {\n\t            writer.float(v);\n\t        }\n\t        writer.ldelim();\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBPlaneShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.withCollisions = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.isPointerBlocker = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    if ((tag & 7) === 2) {\n\t                        const end2 = reader.uint32() + reader.pos;\n\t                        while (reader.pos < end2) {\n\t                            message.uvs.push(reader.float());\n\t                        }\n\t                    }\n\t                    else {\n\t                        message.uvs.push(reader.float());\n\t                    }\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$3 = 1014;\n\t/**\n\t * @internal\n\t */\n\tconst PlaneShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBPlaneShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBPlaneShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBPlaneShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBPointerLock() {\n\t    return { isPointerLocked: false };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBPointerLock = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.isPointerLocked === true) {\n\t            writer.uint32(8).bool(message.isPointerLocked);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBPointerLock();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.isPointerLocked = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$2 = 1074;\n\t/**\n\t * @internal\n\t */\n\tconst PointerLockSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBPointerLock.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBPointerLock.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBPointerLock.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBSphereShape() {\n\t    return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBSphereShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.withCollisions !== undefined) {\n\t            writer.uint32(8).bool(message.withCollisions);\n\t        }\n\t        if (message.isPointerBlocker !== undefined) {\n\t            writer.uint32(16).bool(message.isPointerBlocker);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(24).bool(message.visible);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBSphereShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.withCollisions = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.isPointerBlocker = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$1 = 1015;\n\t/**\n\t * @internal\n\t */\n\tconst SphereShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBSphereShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBSphereShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBSphereShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBTextShape() {\n\t    return {\n\t        text: '',\n\t        visible: undefined,\n\t        font: undefined,\n\t        opacity: undefined,\n\t        fontSize: undefined,\n\t        fontAutoSize: undefined,\n\t        hTextAlign: undefined,\n\t        vTextAlign: undefined,\n\t        width: undefined,\n\t        height: undefined,\n\t        paddingTop: undefined,\n\t        paddingRight: undefined,\n\t        paddingBottom: undefined,\n\t        paddingLeft: undefined,\n\t        lineSpacing: undefined,\n\t        lineCount: undefined,\n\t        textWrapping: undefined,\n\t        shadowBlur: undefined,\n\t        shadowOffsetX: undefined,\n\t        shadowOffsetY: undefined,\n\t        outlineWidth: undefined,\n\t        shadowColor: undefined,\n\t        outlineColor: undefined,\n\t        textColor: undefined\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBTextShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.text !== '') {\n\t            writer.uint32(10).string(message.text);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(16).bool(message.visible);\n\t        }\n\t        if (message.font !== undefined) {\n\t            writer.uint32(26).string(message.font);\n\t        }\n\t        if (message.opacity !== undefined) {\n\t            writer.uint32(37).float(message.opacity);\n\t        }\n\t        if (message.fontSize !== undefined) {\n\t            writer.uint32(45).float(message.fontSize);\n\t        }\n\t        if (message.fontAutoSize !== undefined) {\n\t            writer.uint32(48).bool(message.fontAutoSize);\n\t        }\n\t        if (message.hTextAlign !== undefined) {\n\t            writer.uint32(58).string(message.hTextAlign);\n\t        }\n\t        if (message.vTextAlign !== undefined) {\n\t            writer.uint32(66).string(message.vTextAlign);\n\t        }\n\t        if (message.width !== undefined) {\n\t            writer.uint32(77).float(message.width);\n\t        }\n\t        if (message.height !== undefined) {\n\t            writer.uint32(85).float(message.height);\n\t        }\n\t        if (message.paddingTop !== undefined) {\n\t            writer.uint32(93).float(message.paddingTop);\n\t        }\n\t        if (message.paddingRight !== undefined) {\n\t            writer.uint32(101).float(message.paddingRight);\n\t        }\n\t        if (message.paddingBottom !== undefined) {\n\t            writer.uint32(109).float(message.paddingBottom);\n\t        }\n\t        if (message.paddingLeft !== undefined) {\n\t            writer.uint32(117).float(message.paddingLeft);\n\t        }\n\t        if (message.lineSpacing !== undefined) {\n\t            writer.uint32(125).float(message.lineSpacing);\n\t        }\n\t        if (message.lineCount !== undefined) {\n\t            writer.uint32(128).int32(message.lineCount);\n\t        }\n\t        if (message.textWrapping !== undefined) {\n\t            writer.uint32(136).bool(message.textWrapping);\n\t        }\n\t        if (message.shadowBlur !== undefined) {\n\t            writer.uint32(149).float(message.shadowBlur);\n\t        }\n\t        if (message.shadowOffsetX !== undefined) {\n\t            writer.uint32(157).float(message.shadowOffsetX);\n\t        }\n\t        if (message.shadowOffsetY !== undefined) {\n\t            writer.uint32(165).float(message.shadowOffsetY);\n\t        }\n\t        if (message.outlineWidth !== undefined) {\n\t            writer.uint32(173).float(message.outlineWidth);\n\t        }\n\t        if (message.shadowColor !== undefined) {\n\t            Color3.encode(message.shadowColor, writer.uint32(178).fork()).ldelim();\n\t        }\n\t        if (message.outlineColor !== undefined) {\n\t            Color3.encode(message.outlineColor, writer.uint32(186).fork()).ldelim();\n\t        }\n\t        if (message.textColor !== undefined) {\n\t            Color3.encode(message.textColor, writer.uint32(194).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBTextShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.text = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.font = reader.string();\n\t                    break;\n\t                case 4:\n\t                    message.opacity = reader.float();\n\t                    break;\n\t                case 5:\n\t                    message.fontSize = reader.float();\n\t                    break;\n\t                case 6:\n\t                    message.fontAutoSize = reader.bool();\n\t                    break;\n\t                case 7:\n\t                    message.hTextAlign = reader.string();\n\t                    break;\n\t                case 8:\n\t                    message.vTextAlign = reader.string();\n\t                    break;\n\t                case 9:\n\t                    message.width = reader.float();\n\t                    break;\n\t                case 10:\n\t                    message.height = reader.float();\n\t                    break;\n\t                case 11:\n\t                    message.paddingTop = reader.float();\n\t                    break;\n\t                case 12:\n\t                    message.paddingRight = reader.float();\n\t                    break;\n\t                case 13:\n\t                    message.paddingBottom = reader.float();\n\t                    break;\n\t                case 14:\n\t                    message.paddingLeft = reader.float();\n\t                    break;\n\t                case 15:\n\t                    message.lineSpacing = reader.float();\n\t                    break;\n\t                case 16:\n\t                    message.lineCount = reader.int32();\n\t                    break;\n\t                case 17:\n\t                    message.textWrapping = reader.bool();\n\t                    break;\n\t                case 18:\n\t                    message.shadowBlur = reader.float();\n\t                    break;\n\t                case 19:\n\t                    message.shadowOffsetX = reader.float();\n\t                    break;\n\t                case 20:\n\t                    message.shadowOffsetY = reader.float();\n\t                    break;\n\t                case 21:\n\t                    message.outlineWidth = reader.float();\n\t                    break;\n\t                case 22:\n\t                    message.shadowColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 23:\n\t                    message.outlineColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 24:\n\t                    message.textColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID = 1030;\n\t/**\n\t * @internal\n\t */\n\tconst TextShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBTextShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBTextShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBTextShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction defineLibraryComponents({ defineComponentFromSchema }) {\n\t    return {\n\t        Transform: defineComponentFromSchema(TransformSchema, COMPONENT_ID$j),\n\t        Animator: defineComponentFromSchema(AnimatorSchema, COMPONENT_ID$i),\n\t        AudioSource: defineComponentFromSchema(AudioSourceSchema, COMPONENT_ID$h),\n\t        AvatarAttach: defineComponentFromSchema(AvatarAttachSchema, COMPONENT_ID$g),\n\t        AvatarShape: defineComponentFromSchema(AvatarShapeSchema, COMPONENT_ID$f),\n\t        Billboard: defineComponentFromSchema(BillboardSchema, COMPONENT_ID$e),\n\t        BoxShape: defineComponentFromSchema(BoxShapeSchema, COMPONENT_ID$d),\n\t        CameraMode: defineComponentFromSchema(CameraModeSchema, COMPONENT_ID$c),\n\t        CameraModeArea: defineComponentFromSchema(CameraModeAreaSchema, COMPONENT_ID$b),\n\t        CylinderShape: defineComponentFromSchema(CylinderShapeSchema, COMPONENT_ID$a),\n\t        GLTFShape: defineComponentFromSchema(GLTFShapeSchema, COMPONENT_ID$9),\n\t        NFTShape: defineComponentFromSchema(NFTShapeSchema, COMPONENT_ID$8),\n\t        OnPointerDown: defineComponentFromSchema(OnPointerDownSchema, COMPONENT_ID$7),\n\t        OnPointerDownResult: defineComponentFromSchema(OnPointerDownResultSchema, COMPONENT_ID$6),\n\t        OnPointerUp: defineComponentFromSchema(OnPointerUpSchema, COMPONENT_ID$5),\n\t        OnPointerUpResult: defineComponentFromSchema(OnPointerUpResultSchema, COMPONENT_ID$4),\n\t        PlaneShape: defineComponentFromSchema(PlaneShapeSchema, COMPONENT_ID$3),\n\t        PointerLock: defineComponentFromSchema(PointerLockSchema, COMPONENT_ID$2),\n\t        SphereShape: defineComponentFromSchema(SphereShapeSchema, COMPONENT_ID$1),\n\t        TextShape: defineComponentFromSchema(TextShapeSchema, COMPONENT_ID),\n\t    };\n\t}\n\n\t/**\n\t * @public\n\t */\n\tfunction IArray(type) {\n\t    return {\n\t        serialize(value, builder) {\n\t            builder.writeUint32(value.length);\n\t            for (const item of value) {\n\t                type.serialize(item, builder);\n\t            }\n\t        },\n\t        deserialize(reader) {\n\t            const newArray = [];\n\t            const length = reader.readUint32();\n\t            for (let index = 0; index < length; index++) {\n\t                newArray.push(type.deserialize(reader));\n\t            }\n\t            return newArray;\n\t        },\n\t        create() {\n\t            return [];\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * @public\n\t */\n\tconst Bool = {\n\t    serialize(value, builder) {\n\t        builder.writeInt8(value ? 1 : 0);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readInt8() === 1;\n\t    },\n\t    create() {\n\t        return false;\n\t    }\n\t};\n\n\t/**\n\t * @public\n\t */\n\tfunction IEnum(type) {\n\t    return {\n\t        serialize(value, builder) {\n\t            type.serialize(value, builder);\n\t        },\n\t        deserialize(reader) {\n\t            return type.deserialize(reader);\n\t        },\n\t        create() {\n\t            return type.create();\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * @public\n\t */\n\tconst Float32 = {\n\t    serialize(value, builder) {\n\t        builder.writeFloat32(value);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readFloat32();\n\t    },\n\t    create() {\n\t        return 0.0;\n\t    }\n\t};\n\t/**\n\t * @public\n\t */\n\tconst Float64 = {\n\t    serialize(value, builder) {\n\t        builder.writeFloat64(value);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readFloat64();\n\t    },\n\t    create() {\n\t        return 0.0;\n\t    }\n\t};\n\n\t/**\n\t * @public\n\t */\n\tconst Int64 = {\n\t    serialize(value, builder) {\n\t        builder.writeInt64(BigInt(value));\n\t    },\n\t    deserialize(reader) {\n\t        return Number(reader.readInt64());\n\t    },\n\t    create() {\n\t        return 0;\n\t    }\n\t};\n\t/**\n\t * @public\n\t */\n\tconst Int32 = {\n\t    serialize(value, builder) {\n\t        builder.writeInt32(value);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readInt32();\n\t    },\n\t    create() {\n\t        return 0;\n\t    }\n\t};\n\t/**\n\t * @public\n\t */\n\tconst Int16 = {\n\t    serialize(value, builder) {\n\t        builder.writeInt16(value);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readInt16();\n\t    },\n\t    create() {\n\t        return 0;\n\t    }\n\t};\n\t/**\n\t * @public\n\t */\n\tconst Int8 = {\n\t    serialize(value, builder) {\n\t        builder.writeInt8(value);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readInt8();\n\t    },\n\t    create() {\n\t        return 0;\n\t    }\n\t};\n\n\t/**\n\t * @public\n\t */\n\tconst FlatString = {\n\t    serialize(value, builder) {\n\t        builder.writeBuffer(new TextEncoder().encode(value));\n\t    },\n\t    deserialize(reader) {\n\t        return new TextDecoder().decode(reader.readBuffer());\n\t    },\n\t    create() {\n\t        return '';\n\t    }\n\t};\n\t/**\n\t * @public\n\t */\n\tconst EcsString = FlatString;\n\n\t/**\n\t * @public\n\t */\n\tfunction IMap(spec) {\n\t    return {\n\t        serialize(value, builder) {\n\t            for (const key in spec) {\n\t                // TODO: as any\n\t                spec[key].serialize(value[key], builder);\n\t            }\n\t        },\n\t        deserialize(reader) {\n\t            const newValue = {};\n\t            for (const key in spec) {\n\t                newValue[key] = spec[key].deserialize(reader);\n\t            }\n\t            return newValue;\n\t        },\n\t        create() {\n\t            const newValue = {};\n\t            for (const key in spec) {\n\t                newValue[key] = spec[key].create();\n\t            }\n\t            return newValue;\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * @public\n\t */\n\tfunction IOptional(spec) {\n\t    return {\n\t        serialize(value, builder) {\n\t            if (value) {\n\t                builder.writeInt8(1);\n\t                spec.serialize(value, builder);\n\t            }\n\t            else {\n\t                builder.writeInt8(0);\n\t            }\n\t        },\n\t        deserialize(reader) {\n\t            const exists = reader.readInt8();\n\t            if (exists) {\n\t                return spec.deserialize(reader);\n\t            }\n\t        },\n\t        create() {\n\t            return undefined;\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * @public\n\t */\n\texports.Schemas = void 0;\n\t(function (Schemas) {\n\t    Schemas.Boolean = Bool;\n\t    Schemas.String = EcsString;\n\t    Schemas.Float = Float32;\n\t    Schemas.Double = Float64;\n\t    Schemas.Byte = Int8;\n\t    Schemas.Short = Int16;\n\t    Schemas.Int = Int32;\n\t    Schemas.Int64 = Int64;\n\t    Schemas.Number = Float32;\n\t    Schemas.Enum = IEnum;\n\t    Schemas.Array = IArray;\n\t    Schemas.Map = IMap;\n\t    Schemas.Optional = IOptional;\n\t})(exports.Schemas || (exports.Schemas = {}));\n\n\tfunction preEngine() {\n\t    const entityContainer = EntityContainer();\n\t    const componentsDefinition = new Map();\n\t    // TODO: find a way to make this work.\n\t    // Maybe a proxy/callback to be up-to-date\n\t    const entitiesComponent = new Map();\n\t    const systems = SystemContainer();\n\t    function addSystem(fn, priority = SYSTEMS_REGULAR_PRIORITY, name) {\n\t        systems.add(fn, priority, name);\n\t    }\n\t    function removeSystem(selector) {\n\t        return systems.remove(selector);\n\t    }\n\t    function addEntity(dynamic = false) {\n\t        // entitiesCompnonent.set(entity, new Set())\n\t        const entity = entityContainer.generateEntity(dynamic);\n\t        return entity;\n\t    }\n\t    function addDynamicEntity() {\n\t        return addEntity(true);\n\t    }\n\t    function removeEntity(entity) {\n\t        for (const [, component] of componentsDefinition) {\n\t            if (component.has(entity)) {\n\t                component.deleteFrom(entity);\n\t            }\n\t        }\n\t        return entityContainer.removeEntity(entity);\n\t    }\n\t    function defineComponentFromSchema(spec, componentId) {\n\t        if (componentsDefinition.get(componentId)) {\n\t            throw new Error(`Component ${componentId} already declared`);\n\t        }\n\t        const newComponent = defineComponent(componentId, spec);\n\t        componentsDefinition.set(componentId, newComponent);\n\t        return newComponent;\n\t    }\n\t    function defineComponent$1(spec, componentId) {\n\t        return defineComponentFromSchema(exports.Schemas.Map(spec), componentId);\n\t    }\n\t    function getComponent(componentId) {\n\t        const component = componentsDefinition.get(componentId);\n\t        if (!component) {\n\t            throw new Error('Component not found. You need to declare the components at the beginnig of the engine declaration');\n\t        }\n\t        return component;\n\t    }\n\t    function* getEntitiesWith(...components) {\n\t        for (const [entity, ...groupComp] of getComponentDefGroup(...components)) {\n\t            yield [entity, ...groupComp.map((c) => c.get(entity))];\n\t        }\n\t    }\n\t    function* getComponentDefGroup(...args) {\n\t        const [firstComponentDef, ...componentDefinitions] = args;\n\t        for (const [entity] of firstComponentDef.iterator()) {\n\t            let matches = true;\n\t            for (const componentDef of componentDefinitions) {\n\t                if (!componentDef.has(entity)) {\n\t                    matches = false;\n\t                    break;\n\t                }\n\t            }\n\t            if (matches) {\n\t                yield [entity, ...args];\n\t            }\n\t        }\n\t    }\n\t    function getSystems() {\n\t        return systems.getSystems();\n\t    }\n\t    return {\n\t        entitiesComponent,\n\t        componentsDefinition,\n\t        addEntity,\n\t        addDynamicEntity,\n\t        removeEntity,\n\t        addSystem,\n\t        getSystems,\n\t        removeSystem,\n\t        defineComponent: defineComponent$1,\n\t        defineComponentFromSchema,\n\t        getEntitiesWith,\n\t        getComponent\n\t    };\n\t}\n\t/**\n\t * @public\n\t */\n\tfunction Engine({ transports } = {}) {\n\t    const engine = preEngine();\n\t    const crdtSystem = crdtSceneSystem({ engine, transports: transports || [] });\n\t    const baseComponents = defineLibraryComponents(engine);\n\t    function update(dt) {\n\t        crdtSystem.receiveMessages();\n\t        for (const system of engine.getSystems()) {\n\t            system.fn(dt);\n\t        }\n\t        // Selected components that only exist one frame\n\t        //  then, they are deleted but their crdt state keeps\n\t        const removeSelectedComponents = [\n\t            baseComponents.OnPointerDownResult,\n\t            baseComponents.OnPointerUpResult\n\t        ];\n\t        const excludeComponentIds = removeSelectedComponents.map((item) => item._id);\n\t        for (const componentDef of removeSelectedComponents) {\n\t            for (const [entity] of engine.getEntitiesWith(componentDef)) {\n\t                componentDef.deleteFrom(entity);\n\t            }\n\t        }\n\t        // TODO: Perf tip\n\t        // Should we add some dirtyIteratorSet at engine level so we dont have\n\t        // to iterate all the component definitions to get the dirty ones ?\n\t        const dirtySet = new Map();\n\t        for (const [componentId, definition] of engine.componentsDefinition) {\n\t            if (excludeComponentIds.includes(componentId))\n\t                continue;\n\t            for (const entity of definition.dirtyIterator()) {\n\t                if (!dirtySet.has(entity)) {\n\t                    dirtySet.set(entity, new Set());\n\t                }\n\t                dirtySet.get(entity).add(componentId);\n\t            }\n\t        }\n\t        crdtSystem.createMessages(dirtySet);\n\t        for (const [_componentId, definition] of engine.componentsDefinition) {\n\t            definition.clearDirty();\n\t        }\n\t    }\n\t    return {\n\t        addEntity: engine.addEntity,\n\t        addDynamicEntity: engine.addDynamicEntity,\n\t        removeEntity: engine.removeEntity,\n\t        addSystem: engine.addSystem,\n\t        removeSystem: engine.removeSystem,\n\t        defineComponent: engine.defineComponent,\n\t        defineComponentFromSchema: engine.defineComponentFromSchema,\n\t        getEntitiesWith: engine.getEntitiesWith,\n\t        getComponent: engine.getComponent,\n\t        update,\n\t        baseComponents\n\t    };\n\t}\n\n\t/** @public */\n\tvar ECSComponentIDs;\n\t(function (ECSComponentIDs) {\n\t    ECSComponentIDs[ECSComponentIDs[\"Transform\"] = 1] = \"Transform\";\n\t    ECSComponentIDs[ECSComponentIDs[\"Animator\"] = 1042] = \"Animator\";\n\t    ECSComponentIDs[ECSComponentIDs[\"AudioSource\"] = 1020] = \"AudioSource\";\n\t    ECSComponentIDs[ECSComponentIDs[\"AvatarAttach\"] = 1073] = \"AvatarAttach\";\n\t    ECSComponentIDs[ECSComponentIDs[\"AvatarShape\"] = 1080] = \"AvatarShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"Billboard\"] = 1090] = \"Billboard\";\n\t    ECSComponentIDs[ECSComponentIDs[\"BoxShape\"] = 1013] = \"BoxShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"CameraMode\"] = 1072] = \"CameraMode\";\n\t    ECSComponentIDs[ECSComponentIDs[\"CameraModeArea\"] = 1071] = \"CameraModeArea\";\n\t    ECSComponentIDs[ECSComponentIDs[\"CylinderShape\"] = 1016] = \"CylinderShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"GLTFShape\"] = 1041] = \"GLTFShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"NFTShape\"] = 1040] = \"NFTShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"OnPointerDown\"] = 1060] = \"OnPointerDown\";\n\t    ECSComponentIDs[ECSComponentIDs[\"OnPointerDownResult\"] = 1066] = \"OnPointerDownResult\";\n\t    ECSComponentIDs[ECSComponentIDs[\"OnPointerUp\"] = 1061] = \"OnPointerUp\";\n\t    ECSComponentIDs[ECSComponentIDs[\"OnPointerUpResult\"] = 1065] = \"OnPointerUpResult\";\n\t    ECSComponentIDs[ECSComponentIDs[\"PlaneShape\"] = 1014] = \"PlaneShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"PointerLock\"] = 1074] = \"PointerLock\";\n\t    ECSComponentIDs[ECSComponentIDs[\"SphereShape\"] = 1015] = \"SphereShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"TextShape\"] = 1030] = \"TextShape\";\n\t})(ECSComponentIDs || (ECSComponentIDs = {}));\n\n\tconst componentIds = Object.values(ECSComponentIDs)\n\t    .filter((a) => typeof a === 'number')\n\t    .map(Number);\n\tfunction createRendererTransport() {\n\t    const type = 'renderer';\n\t    return {\n\t        type,\n\t        send(message) {\n\t            // TODO: replace with new rpc\n\t            dcl\n\t                .callRpc('@decentraland/ExperimentalAPI', 'sendToRenderer', [\n\t                { data: new Uint8Array(message) }\n\t            ])\n\t                .catch(dcl.error);\n\t        },\n\t        filter(message) {\n\t            // Echo message, ignore them\n\t            if (message.transportType === type) {\n\t                return false;\n\t            }\n\t            // Only send renderer components (Proto Generated)\n\t            if (!componentIds.includes(message.componentId)) {\n\t                return false;\n\t            }\n\t            return !!message;\n\t        }\n\t    };\n\t}\n\n\tfunction createNetworkTransport() {\n\t    // const rpc = new RpcTransport()\n\t    function send(..._args) {\n\t        // console.log('NetworkMessage Sent: ', ...args)\n\t    }\n\t    const type = 'network-transport';\n\t    return {\n\t        send,\n\t        type,\n\t        filter(message) {\n\t            // Echo message, ignore them\n\t            if (message.transportType === type) {\n\t                return false;\n\t            }\n\t            // TODO: Static entities & Network components\n\t            return !!message; // validComponents.includes(componentId)\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * @alpha * This file initialization is an alpha one. This is based on the old-ecs\n\t * init and it'll be changing.\n\t */\n\tconst rendererTransport = createRendererTransport();\n\tconst engine = Engine({\n\t    transports: [rendererTransport, createNetworkTransport()]\n\t});\n\tif (dcl) {\n\t    dcl.loadModule('@decentraland/ExperimentalAPI', {}).catch(dcl.error);\n\t    async function pullRendererMessages() {\n\t        var _a;\n\t        const response = await dcl.callRpc('@decentraland/ExperimentalAPI', 'messageFromRenderer', []);\n\t        if ((_a = response.data) === null || _a === void 0 ? void 0 : _a.length) {\n\t            if (rendererTransport.onmessage) {\n\t                for (const byteArray of response.data) {\n\t                    rendererTransport.onmessage(byteArray);\n\t                }\n\t            }\n\t        }\n\t    }\n\t    dcl.onUpdate((dt) => {\n\t        pullRendererMessages()\n\t            .catch(dcl.error)\n\t            .finally(() => engine.update(dt));\n\t    });\n\t}\n\tconst log = dcl.log;\n\tconst error = dcl.error;\n\n\t/** @public */\n\tconst Transform = engine.baseComponents.Transform;\n\t/** @public */\n\tconst Animator = engine.baseComponents.Animator;\n\t/** @public */\n\tconst AudioSource = engine.baseComponents.AudioSource;\n\t/** @public */\n\tconst AvatarAttach = engine.baseComponents.AvatarAttach;\n\t/** @public */\n\tconst AvatarShape = engine.baseComponents.AvatarShape;\n\t/** @public */\n\tconst Billboard = engine.baseComponents.Billboard;\n\t/** @public */\n\tconst BoxShape = engine.baseComponents.BoxShape;\n\t/** @public */\n\tconst CameraMode = engine.baseComponents.CameraMode;\n\t/** @public */\n\tconst CameraModeArea = engine.baseComponents.CameraModeArea;\n\t/** @public */\n\tconst CylinderShape = engine.baseComponents.CylinderShape;\n\t/** @public */\n\tconst GLTFShape = engine.baseComponents.GLTFShape;\n\t/** @public */\n\tconst NFTShape = engine.baseComponents.NFTShape;\n\t/** @public */\n\tconst OnPointerDown = engine.baseComponents.OnPointerDown;\n\t/** @public */\n\tconst OnPointerDownResult = engine.baseComponents.OnPointerDownResult;\n\t/** @public */\n\tconst OnPointerUp = engine.baseComponents.OnPointerUp;\n\t/** @public */\n\tconst OnPointerUpResult = engine.baseComponents.OnPointerUpResult;\n\t/** @public */\n\tconst PlaneShape = engine.baseComponents.PlaneShape;\n\t/** @public */\n\tconst PointerLock = engine.baseComponents.PointerLock;\n\t/** @public */\n\tconst SphereShape = engine.baseComponents.SphereShape;\n\t/** @public */\n\tconst TextShape = engine.baseComponents.TextShape;\n\n\t/** @public */\n\texports.Components = void 0;\n\t(function (Components) {\n\t    /** @public */\n\t    Components.Transform = engine.baseComponents.Transform;\n\t    /** @public */\n\t    Components.Animator = engine.baseComponents.Animator;\n\t    /** @public */\n\t    Components.AudioSource = engine.baseComponents.AudioSource;\n\t    /** @public */\n\t    Components.AvatarAttach = engine.baseComponents.AvatarAttach;\n\t    /** @public */\n\t    Components.AvatarShape = engine.baseComponents.AvatarShape;\n\t    /** @public */\n\t    Components.Billboard = engine.baseComponents.Billboard;\n\t    /** @public */\n\t    Components.BoxShape = engine.baseComponents.BoxShape;\n\t    /** @public */\n\t    Components.CameraMode = engine.baseComponents.CameraMode;\n\t    /** @public */\n\t    Components.CameraModeArea = engine.baseComponents.CameraModeArea;\n\t    /** @public */\n\t    Components.CylinderShape = engine.baseComponents.CylinderShape;\n\t    /** @public */\n\t    Components.GLTFShape = engine.baseComponents.GLTFShape;\n\t    /** @public */\n\t    Components.NFTShape = engine.baseComponents.NFTShape;\n\t    /** @public */\n\t    Components.OnPointerDown = engine.baseComponents.OnPointerDown;\n\t    /** @public */\n\t    Components.OnPointerDownResult = engine.baseComponents.OnPointerDownResult;\n\t    /** @public */\n\t    Components.OnPointerUp = engine.baseComponents.OnPointerUp;\n\t    /** @public */\n\t    Components.OnPointerUpResult = engine.baseComponents.OnPointerUpResult;\n\t    /** @public */\n\t    Components.PlaneShape = engine.baseComponents.PlaneShape;\n\t    /** @public */\n\t    Components.PointerLock = engine.baseComponents.PointerLock;\n\t    /** @public */\n\t    Components.SphereShape = engine.baseComponents.SphereShape;\n\t    /** @public */\n\t    Components.TextShape = engine.baseComponents.TextShape;\n\t})(exports.Components || (exports.Components = {}));\n\n\texports.Animator = Animator;\n\texports.AudioSource = AudioSource;\n\texports.AvatarAttach = AvatarAttach;\n\texports.AvatarShape = AvatarShape;\n\texports.Billboard = Billboard;\n\texports.BoxShape = BoxShape;\n\texports.CameraMode = CameraMode;\n\texports.CameraModeArea = CameraModeArea;\n\texports.CylinderShape = CylinderShape;\n\texports.DEG2RAD = distExports$1.DEG2RAD;\n\texports.Engine = Engine;\n\texports.Epsilon = distExports$1.Epsilon;\n\texports.GLTFShape = GLTFShape;\n\texports.NFTShape = NFTShape;\n\texports.OnPointerDown = OnPointerDown;\n\texports.OnPointerDownResult = OnPointerDownResult;\n\texports.OnPointerUp = OnPointerUp;\n\texports.OnPointerUpResult = OnPointerUpResult;\n\texports.Orientation = distExports$1.Orientation;\n\texports.PlaneShape = PlaneShape;\n\texports.PointerLock = PointerLock;\n\texports.Quaternion = distExports$1.Quaternion;\n\texports.RAD2DEG = distExports$1.RAD2DEG;\n\texports.Space = distExports$1.Space;\n\texports.SphereShape = SphereShape;\n\texports.TextShape = TextShape;\n\texports.ToGammaSpace = distExports$1.ToGammaSpace;\n\texports.ToLinearSpace = distExports$1.ToLinearSpace;\n\texports.Transform = Transform;\n\texports.Vector3 = distExports$1.Vector3;\n\texports.engine = engine;\n\texports.error = error;\n\texports.log = log;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})(this.self = this.self || {});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n//# sourceURL=dcl://node_modules/@dcl/sdk/dist/ecs7/index.js")